<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「C语言程序设计」选择结构</title>
      <link href="/9bd95ab60051.html"/>
      <url>/9bd95ab60051.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-关系运算和逻辑运算"><a href="#1-关系运算和逻辑运算" class="headerlink" title="1.关系运算和逻辑运算"></a>1.关系运算和逻辑运算</h2><h3 id="1-1-C语言的逻辑值"><a href="#1-1-C语言的逻辑值" class="headerlink" title="1.1 C语言的逻辑值"></a>1.1 C语言的逻辑值</h3><ol><li>在C语言中，用非0表示“真”，用0表示“假”</li></ol><h3 id="1-2-关系运算符和关系表达式"><a href="#1-2-关系运算符和关系表达式" class="headerlink" title="1.2 关系运算符和关系表达式"></a>1.2 关系运算符和关系表达式</h3><ol><li>6种关系运算符<ol><li>小于 &lt;</li><li>大于 &gt;</li><li>等于 &#x3D;&#x3D;</li><li>小于或等于 &lt;&#x3D;</li><li>大于或等于 &gt;&#x3D;</li><li>不等于 !&#x3D;</li></ol></li><li>由两个字符组成的运算符之间不允许有空格</li><li>关系运算符是双目运算符，具有自左至右的结合性</li><li>关系运算的值为“逻辑值”，只有可能是整数0或1</li></ol><h3 id="1-3-逻辑运算符和逻辑表达式"><a href="#1-3-逻辑运算符和逻辑表达式" class="headerlink" title="1.3 逻辑运算符和逻辑表达式"></a>1.3 逻辑运算符和逻辑表达式</h3><p><strong>逻辑运算符</strong></p><ol><li>三种逻辑运算符<ol><li>逻辑与 &amp;&amp;</li><li>逻辑或 ||</li><li>逻辑非 !</li></ol></li><li>&amp;&amp;和||为双目运算符，!为单目运算符，出现在运算对象的左边。结合方向自左至右</li></ol><p><strong>逻辑表达式和逻辑表达式的值</strong></p><ol><li>逻辑表达式的运算结果为1或0</li><li>由&amp;&amp;或||构成的逻辑表达式，在特定情况下会产生“短路”现象</li></ol><h2 id="2-if语句和用if语句构成的选择结构"><a href="#2-if语句和用if语句构成的选择结构" class="headerlink" title="2.if语句和用if语句构成的选择结构"></a>2.if语句和用if语句构成的选择结构</h2><h3 id="2-1-if语句"><a href="#2-1-if语句" class="headerlink" title="2.1 if语句"></a>2.1 if语句</h3><ol><li>基本形式<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) 语句    /\* 不含<span class="keyword">else</span>子句的<span class="keyword">if</span>语句 \*/</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(表达式) 语句<span class="number">1</span>    /\* 含<span class="keyword">else</span>子句的<span class="keyword">if</span>语句 \*/</span><br><span class="line"><span class="keyword">else</span> 语句<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-嵌套的if语句"><a href="#2-2-嵌套的if语句" class="headerlink" title="2.2 嵌套的if语句"></a>2.2 嵌套的if语句</h3><ol><li>语句形式<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(表达式<span class="number">2</span>) 语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>else子句总是与前面最近的不带else的if相结合</li></ol><h2 id="3-条件表达式构成的选择结构"><a href="#3-条件表达式构成的选择结构" class="headerlink" title="3.条件表达式构成的选择结构"></a>3.条件表达式构成的选择结构</h2><ol><li>条件运算符：<code>? :</code> ,C语言提供的唯一的三目运算符</li><li>右条件运算符构成的条件表达式：<code>表达式1 ? 表达式2 : 表达式3</code></li><li>运算功能：当表达式1的值为非零时，求出表达式2的值为整个表达式的值；当表达式1的值为零时，求出表达式3的值为整个表达式的值</li></ol><h2 id="4-switch语句以及用switch语句和break语句构成的选择结构"><a href="#4-switch语句以及用switch语句和break语句构成的选择结构" class="headerlink" title="4.switch语句以及用switch语句和break语句构成的选择结构"></a>4.switch语句以及用switch语句和break语句构成的选择结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">1</span>:语句<span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">2</span>:语句<span class="number">2</span></span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line"><span class="keyword">case</span> 常量表达式n:语句n</span><br><span class="line"><span class="keyword">default</span>        :语句n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>关键字case和常量表达式之间一定要有空格</li><li>通常在case之后的语句最后加上break语句，每当执行到break语句时，立即跳出switch语句体</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」顺序结构</title>
      <link href="/1c4fbf64698f.html"/>
      <url>/1c4fbf64698f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-赋值语句"><a href="#1-赋值语句" class="headerlink" title="1.赋值语句"></a>1.赋值语句</h2><ol><li>赋值语句（表达式语句）：在赋值表达式的尾部加上“;”</li></ol><h2 id="2-数据输出"><a href="#2-数据输出" class="headerlink" title="2.数据输出"></a>2.数据输出</h2><h3 id="2-1-printf函数的一般调用形式"><a href="#2-1-printf函数的一般调用形式" class="headerlink" title="2.1 printf函数的一般调用形式"></a>2.1 printf函数的一般调用形式</h3><ol><li>调用形式：<code>printf(格式控制，输出项1，输出项2，···)</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-printf函数中常用的格式说明"><a href="#2-2-printf函数中常用的格式说明" class="headerlink" title="2.2 printf函数中常用的格式说明"></a>2.2 printf函数中常用的格式说明</h3><blockquote><p>每个格式说明都必须用“%”开头，以一个格式字符作为结束，在此之间可以根据需要插入“宽度说明”、左对齐符号“-”、前导零符号“0”</p></blockquote><ol><li>格式字符</li></ol><table><thead><tr><th align="left">格式字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">输出一个字符</td></tr><tr><td align="left">d或i</td><td align="left">输出带符号的十进制整型数。%ld为长整型，%hd为短整型，%I64d为64位长整数</td></tr><tr><td align="left">o</td><td align="left">以八进制格式输出整型数。%#o加先导0</td></tr><tr><td align="left">x或X</td><td align="left">以十六进制格式输出整型数。%#x或%#X输出带先导0x或0X的十六进制数</td></tr><tr><td align="left">u</td><td align="left">以无符号十进制形式输出整型数</td></tr><tr><td align="left">f</td><td align="left">以带小数点的数学形式输出浮点数（单精度和双精度数）</td></tr><tr><td align="left">e或E</td><td align="left">以指数形式输出浮点是（单精度和双精度数）</td></tr><tr><td align="left">g或G</td><td align="left">有系统决定采用%f还是采用%e（或%E）格式输出，以使输出宽度最小</td></tr><tr><td align="left">s</td><td align="left">输出一个字符串，直到遇到“\0”</td></tr><tr><td align="left">p</td><td align="left">输出变量的内存地址</td></tr><tr><td align="left">%</td><td align="left">输出一个%</td></tr></tbody></table><ol start="2"><li>输出数据所占宽度说明<ol><li>在%和格式字符之间插入一个整数常量来指定输出的宽度。如果指定的宽度超过输出数据的实际宽度，输出时将会右对齐，左边补上空格</li><li>对于float和double类型的实数，可以用“n1.n2”的形式来指定输出宽度（n1和n2分别代表一个整常数），其中n1指定输出数据的宽度（包括小数点），n2指定小数点后小数位的位数，n2也称精度<ol><li>对于f、e或E，当输出数据的小数位数多于n2位时，截去右边多余小数，并对截去部分的第一位小数做四舍五入处理；当输出数据的小数位少于n2时，在小数最右边补0</li><li>也可用“.n2”格式，不指定总宽度；如果指定“n1.0”或“.0”格式，则不输出小数点和小数部分</li><li>对于g或G，宽度用来指定输出的有效数字位数。默认6位有效数字</li></ol></li></ol></li></ol><table><thead><tr><th align="left">宽度说明</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">%2d</td><td align="left">输出数据占两位宽度，不足两位右对齐，左边补空格</td></tr><tr><td align="left">%10.2f</td><td align="left">输出浮点数总宽度为10，小数点后保留两位</td></tr></tbody></table><ol start="3"><li>输出数据左对齐：在“%”和宽度之间加“-”</li><li>使输出数据总带+&#x2F;-：在“%”和格式字符间加“+”</li></ol><h3 id="2-3-使用printf函数时的注意事项"><a href="#2-3-使用printf函数时的注意事项" class="headerlink" title="2.3 使用printf函数时的注意事项"></a>2.3 使用printf函数时的注意事项</h3><ol><li>调用函数printf时，其参数是从右至左进行处理的</li><li>输出数据的域宽可以改变<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*d&quot;</span>,m,i);    <span class="comment">/*将按照m指定的域宽输出i值，并不输出m的值*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-数据输入"><a href="#3-数据输入" class="headerlink" title="3.数据输入"></a>3.数据输入</h2><h3 id="3-1-scanf函数的一般调用形式"><a href="#3-1-scanf函数的一般调用形式" class="headerlink" title="3.1 scanf函数的一般调用形式"></a>3.1 scanf函数的一般调用形式</h3><ol><li>调用形式：<code>scanf(格式控制，输入项1，输入项二，···)</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%f%lf&quot;</span>,&amp;k,&amp;a,&amp;y);</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2-scanf函数中常用的格式说明"><a href="#3-2-scanf函数中常用的格式说明" class="headerlink" title="3.2 scanf函数中常用的格式说明"></a>3.2 scanf函数中常用的格式说明</h3><table><thead><tr><th align="left">格式字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">输入一个字符</td></tr><tr><td align="left">d</td><td align="left">输入带符号的十进制整型数</td></tr><tr><td align="left">i</td><td align="left">输入整型数，整型数可以是带先导0的八进制数，也可以是带先导0x（或0X）的十六进制数</td></tr><tr><td align="left">o</td><td align="left">以八进制格式输入整型数，可以带先导0，也可以不带</td></tr><tr><td align="left">x</td><td align="left">以十六进制格式输入整型数，可以带先导0x或0X，也可以不带</td></tr><tr><td align="left">u</td><td align="left">以无符号十进制形式输入整型数</td></tr><tr><td align="left">f（lf）</td><td align="left">以带小数点的数学形式或指数形式输入浮点数（单精度数用f，双精度数用lf）</td></tr><tr><td align="left">e（le）</td><td align="left">同上</td></tr><tr><td align="left">s</td><td align="left">输入一个字符串，直到遇到“\0”</td></tr></tbody></table><ol><li>scanf函数右返回值，其值就是本次scanf调用正确输入的数据项个数</li></ol><h3 id="3-3-通过scanf函数从键盘输入数据"><a href="#3-3-通过scanf函数从键盘输入数据" class="headerlink" title="3.3 通过scanf函数从键盘输入数据"></a>3.3 通过scanf函数从键盘输入数据</h3><ol><li>输入数值数据：在输入整数或实数这类数值型数据后，输入的数据之间必须用空格、回车符、制表符等间隔符隔开</li><li>跳过某个输入数据：在%和字符之间加入“*”</li></ol><h2 id="4-复合语句和空语句"><a href="#4-复合语句和空语句" class="headerlink" title="4.复合语句和空语句"></a>4.复合语句和空语句</h2><p><strong>复合语句</strong></p><ol><li>语句形式：<code>&#123;语句1 语句2 语句3 ··· 语句n&#125;</code></li></ol><p><strong>空语句</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">;    <span class="comment">/*空语句*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-程序举例"><a href="#5-程序举例" class="headerlink" title="5.程序举例"></a>5.程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入整数x和y的值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d,y=%d\n&quot;</span>, x, y);</span><br><span class="line">t = x;</span><br><span class="line">x = y;</span><br><span class="line">y = t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d,y=%d&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 输入一个double类型的数，使该数保留小数点后两位，对第三位小数进行四舍五入处理，然后输出此数  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%f\n&quot;</span>, x);</span><br><span class="line">x = x * <span class="number">100</span>;</span><br><span class="line">x = x + <span class="number">0.5</span>;</span><br><span class="line">x = (<span class="type">int</span>) x;</span><br><span class="line">x = x / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%f&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」C程序设计的初步认识</title>
      <link href="/f2437dccc17c.html"/>
      <url>/f2437dccc17c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-简单C语言程序的构成和格式"><a href="#1-简单C语言程序的构成和格式" class="headerlink" title="1.简单C语言程序的构成和格式"></a>1.简单C语言程序的构成和格式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*求矩形面积*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> a, b, area;</span><br><span class="line">a = <span class="number">1.2</span>; <span class="comment">/*将矩形的两条边长分别赋给a和b*/</span></span><br><span class="line">b = <span class="number">3.6</span>;</span><br><span class="line">area = a * b; <span class="comment">/*计算矩形的面积并储存到变量area中*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%f,b=%f,area=%f\n&quot;</span>, a, b, area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>C语言规定必须用main作为主函数名,每一个可执行的C程序都必须有且只有一个主函数</li><li>C程序中的每一条执行语句都必须用分号结束</li><li>注释内容必须放在符号“&#x2F;*”和“*&#x2F;”之间，在注释之间不可以再嵌套“&#x2F;*”和“*&#x2F;”</li></ol><h2 id="2-标识符、常量和变量"><a href="#2-标识符、常量和变量" class="headerlink" title="2.标识符、常量和变量"></a>2.标识符、常量和变量</h2><p><strong>标识符</strong></p><ol><li>由字母、数字和下划线组成，并且第一个字符必须为字母或下划线</li><li>类别<ol><li>关键字</li><li>预定义标识符</li><li>用户标识符</li></ol></li></ol><p><strong>常量</strong></p><ol><li>程序运行中，其值不能被改变的量</li><li>分类<ol><li>整型常量：只用数字表示，不带小数点<ol><li>短整型常量</li><li>长整型常量</li></ol></li><li>实型常量：必须带小数点的数</li><li>字符常量</li><li>字符串常量</li></ol></li></ol><p><strong>符号常量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*计算圆面积*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159 <span class="comment">/*定义符号名PI为3.14159*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> r, s;</span><br><span class="line">r = <span class="number">5.0</span>;</span><br><span class="line">s = PI * r * r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s=%f\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量</strong></p><ol><li>变量指程序运行过程中其值可以改变的量</li></ol><h2 id="3-整型数据"><a href="#3-整型数据" class="headerlink" title="3.整型数据"></a>3.整型数据</h2><h3 id="3-1-整型常量"><a href="#3-1-整型常量" class="headerlink" title="3.1 整型常量"></a>3.1 整型常量</h3><ol><li>整型常量可以用十进制、八进制和十六进制等形式表示</li><li>八进制数：开头必须是数字“0”</li><li>十六进制数：使用“0x”或“0X”开头；十六进制数中的字母a、b、c、d、e、f既可以小写也可以大写</li><li>在C程序中，只有十进制数可以是负数，而八进制和十六进制数只能是正数</li></ol><h3 id="3-2-整型变量"><a href="#3-2-整型变量" class="headerlink" title="3.2 整型变量"></a>3.2 整型变量</h3><ol><li>基本型的整型变量用类型名关键字int进行定义<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>, k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-整型数据的分类"><a href="#3-3-整型数据的分类" class="headerlink" title="3.3 整型数据的分类"></a>3.3 整型数据的分类</h3><ol><li>短整型（short int）</li><li>基本整型（int）</li><li>长整型（long int）</li><li>无符号型（unsigned）：无符号整数在数的末尾加上字母后缀u或U；若是长整型无符号整型常量，加上后缀lu或LU</li></ol><blockquote><p>若不指定变量为无符号型，则变量隐含为有符号型（signed）</p></blockquote><h3 id="3-4-整数在内存中的储存形式"><a href="#3-4-整数在内存中的储存形式" class="headerlink" title="3.4 整数在内存中的储存形式"></a>3.4 整数在内存中的储存形式</h3><ol><li>通常把一个字节的最右边一位称为最低位，最左边一位称为最高位。对于一个有符号整数，其中最高位用来存放整数的符号，称为符号位。若是正整数，最高位放置0；若是负整数，最高位放置1</li><li>负整数在内存中以“补码”形式存放</li></ol><p><strong>例</strong>：取二进制数10000101（十进制数-5）的补码<br>步骤如下：求原码的反码。把原码除符号位之外的二进制码按位取反，得11111010<br>         把所得的反码加1，得到原码的补码。得11111011</p><blockquote><p>把内存中以补码形式存放的二进制码转化成十进制的负整数</p><ul><li>先对除符号位之外的各位取反</li><li>将所得二进制数转换成十进制数</li><li>对所求得的数再减1</li></ul></blockquote><h2 id="4-实型数据"><a href="#4-实型数据" class="headerlink" title="4.实型数据"></a>4.实型数据</h2><h3 id="4-1-实型常量"><a href="#4-1-实型常量" class="headerlink" title="4.1 实型常量"></a>4.1 实型常量</h3><ol><li>小数形式：必须要有小数点</li></ol><h3 id="4-2-实型变量"><a href="#4-2-实型变量" class="headerlink" title="4.2 实型变量"></a>4.2 实型变量</h3><ol><li>单精度型（float）<ol><li>定义：<code>float a,b,c;</code></li><li>占4字节的存储单元</li></ol></li><li>双精度型（double）<ol><li>定义：<code>double x,y,z;</code></li><li>占8字节的存储单元</li></ol></li></ol><h2 id="5-算数表达式"><a href="#5-算数表达式" class="headerlink" title="5.算数表达式"></a>5.算数表达式</h2><h3 id="5-1-基本的算数运算符"><a href="#5-1-基本的算数运算符" class="headerlink" title="5.1 基本的算数运算符"></a>5.1 基本的算数运算符</h3><ol><li>加（+）</li><li>减（-）</li><li>乘（*）</li><li>除（&#x2F;）</li><li>求余（%）：运算对象只能是整型</li></ol><blockquote><ul><li>这些运算符需要两个运算对象，称为双目运算符</li><li>“+”和“-”也可用作单目运算符，运算符必须出现在运算数的左边</li><li>如果双面运算符两边运算数的类型一致，则所得结果的类型与运算数的类型一致</li><li>如果双目运算符两边运算数的类型不一致，系统将自动进行类型转换，使运算符两边的类型达到一致后再进行运算</li><li>在C语言中，所有实型数的运算均以双精度方式进行</li></ul></blockquote><h3 id="5-2-运算符的优先级、结合性和算数表达式"><a href="#5-2-运算符的优先级、结合性和算数表达式" class="headerlink" title="5.2 运算符的优先级、结合性和算数表达式"></a>5.2 运算符的优先级、结合性和算数表达式</h3><ol><li><p>算数运算符的优先级![[3.png]]</p></li><li><p>算数运算符和圆括号的结合性</p><ol><li>以上运算符中，只有单目运算符“+”和“-”的结合性是从右到左的，其余运算符的结合性都是从左到右</li></ol></li><li><p>算数表达式</p><ol><li>定义：用算术运算符和一对圆括号将运算符（或称操作数）连接起来的、符合C语言语法的表达式</li><li>运算对象可以是常量、变量和函数等</li></ol></li></ol><h3 id="5-3-强制类型转换表达式"><a href="#5-3-强制类型转换表达式" class="headerlink" title="5.3 强制类型转换表达式"></a>5.3 强制类型转换表达式</h3><ol><li>格式：<code>(类型名)(表达式)</code><ol><li><code>(类型名)</code> 称为强制类型转换运算符</li></ol></li></ol><h2 id="6-赋值表达式"><a href="#6-赋值表达式" class="headerlink" title="6.赋值表达式"></a>6.赋值表达式</h2><h3 id="6-1-赋值运算符和赋值表达式"><a href="#6-1-赋值运算符和赋值表达式" class="headerlink" title="6.1 赋值运算符和赋值表达式"></a>6.1 赋值运算符和赋值表达式</h3><ol><li>格式：<code>变量名=表达式</code></li><li>赋值运算符的左侧只能是变量，不能是常量或表达式</li><li>C语言规定最左边变量中所得到的新值就是赋值表达式的值</li></ol><h3 id="6-2-复合赋值表达式"><a href="#6-2-复合赋值表达式" class="headerlink" title="6.2 复合赋值表达式"></a>6.2 复合赋值表达式</h3><ol><li>定义：在赋值运算符之前加上其他运算符</li></ol><h3 id="6-3-赋值运算中的类型转换"><a href="#6-3-赋值运算中的类型转换" class="headerlink" title="6.3 赋值运算中的类型转换"></a>6.3 赋值运算中的类型转换</h3><ol><li>如果赋值运算符两侧的数据类型不一致，在赋值前系统将自动先把右侧表达式求得的数值按赋值号左边变量的类型进行转换</li><li>在C语言的表达式（不包括赋值表达式）中的转换规则<ol><li>一个短整型，一个长整型：$短整型 \to 长整型$</li><li>一个是有符号整型，一个是无符号整型：$有符号整型 \to 无符号整型$</li></ol></li></ol><h2 id="7-自加、自减运算符和逗号"><a href="#7-自加、自减运算符和逗号" class="headerlink" title="7.自加、自减运算符和逗号"></a>7.自加、自减运算符和逗号</h2><h3 id="7-1-自加运算符和自减运算符"><a href="#7-1-自加运算符和自减运算符" class="headerlink" title="7.1 自加运算符和自减运算符"></a>7.1 自加运算符和自减运算符</h3><ol><li>“++”和“–”都是单目运算符，不能给常量或表达式赋值</li><li>既可以前缀形式出现，也可以后缀形式出现</li><li>对于变量来说自增或自减1；对于表达式来说，前置先自增后使用变量值，后置先使用变量值再自增</li><li>结合方向：从右至左</li></ol><h3 id="7-2-逗号运算符"><a href="#7-2-逗号运算符" class="headerlink" title="7.2 逗号运算符"></a>7.2 逗号运算符</h3><ol><li>结合方向：从左至右</li><li>逗号运算符优先级最低</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「第一行代码」第一行Android 代码</title>
      <link href="/4d4ebbc0eb20.html"/>
      <url>/4d4ebbc0eb20.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Android简介"><a href="#1-Android简介" class="headerlink" title="1.Android简介"></a>1.Android简介</h2><h3 id="1-1-Android系统架构"><a href="#1-1-Android系统架构" class="headerlink" title="1.1 Android系统架构"></a>1.1 Android系统架构</h3><ol><li>Linux内核层</li><li>系统运行库层</li><li>应用框架层</li><li>应用层</li></ol><h3 id="1-2-Android应用开发特色"><a href="#1-2-Android应用开发特色" class="headerlink" title="1.2 Android应用开发特色"></a>1.2 Android应用开发特色</h3><ol><li>四大组件<ol><li>Activity：界面</li><li>Service：在后台运行</li><li>BroadcastReceiver：允许你的应用接收或发送来自广播消息</li><li>ContentP rovider：为应用程序之间共享数据提供了可能</li></ol></li><li>系统控件</li><li>SQLite数据库</li><li>多媒体</li></ol><h2 id="2-创建Android项目"><a href="#2-创建Android项目" class="headerlink" title="2.创建Android项目"></a>2.创建Android项目</h2><ol><li>res目录<ol><li>以“drawable”开头的目录存放图片</li><li>以“mipmap”开头的目录放应用图标</li><li>以“values”开头的目录放字符串、样式、颜色等配置</li><li>以“layout”开头的目录放布局文件</li></ol></li><li>资源引用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R.string.app_name <span class="comment">// 代码中</span></span><br><span class="line"><span class="meta">@string</span>/app_name <span class="comment">// xml中</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-使用Android的日志工具Log"><a href="#3-使用Android的日志工具Log" class="headerlink" title="3.使用Android的日志工具Log"></a>3.使用Android的日志工具Log</h2><ol><li>Log.v()：用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose，是 Android 日志里面级别最低的一种</li><li>Log.d()：用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的。对应级别debug，比verbose 高一级</li><li>Log.i()：用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为的数据。对应级别info，比debug 高一级</li><li>Log.w()：用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方。对应级别warn，比info高一级</li><li>Log.e()：用于打印程序中的错误信息，比如程序进入了catch语句中。当有错误信息打印出来的时候，一般代表你的程序出现严重问题了，必须尽快修复。对应级别error，比 warn 高一级</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」程序设计的基本概念</title>
      <link href="/be54a660ba8e.html"/>
      <url>/be54a660ba8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-算法的特性"><a href="#1-算法的特性" class="headerlink" title="1.算法的特性"></a>1.算法的特性</h2><ol><li>有穷性：算法必须在执行有限的步骤后终止，不会无限循环或进入死循环</li><li>确定性：算法的每个步骤必须明确定义，没有歧义。相同输入应产生相同的输出</li><li>可执行性：算法中的每个步骤都必须能够被执行，不会包含无法实现的操作</li><li>有零个或多个输入：算法可以接受零个或多个输入参数，这些参数是问题的输入数据</li><li>有一个或多个输出：算法产生一个或多个输出结果，这是问题的解决方案</li></ol><h2 id="2-三种基本结构"><a href="#2-三种基本结构" class="headerlink" title="2.三种基本结构"></a>2.三种基本结构</h2><blockquote><p>三种基本结构组成的算法可以解决任何复杂的问题</p></blockquote><ol><li>顺序结构：程序中的语句按顺序执行，从上到下，每个语句都执行一次</li><li>选择结构：选择结构允许根据条件的真假来执行不同的代码块。这包括<code>if</code>语句和<code>switch</code>语句等。例如，使用<code>if</code>语句可以根据条件执行不同的代码块，从而实现分支逻辑 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">   <span class="comment">// 代码块1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 代码块2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>循环结构：循环结构允许多次执行相同的代码块，直到满足特定条件为止。这可以通过<code>for</code>、<code>while</code>和<code>do-while</code>等循环语句来实现 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">   <span class="comment">// 循环执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">// 循环执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo相关说明</title>
      <link href="/dbfccc8810dc.html"/>
      <url>/dbfccc8810dc.html</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>! 这是你的第一篇文章。有关详细信息，请查看<a href="https://hexo.io/docs/">文档</a>. 如果你在使用 Hexo 时遇到任何问题，可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案， 也可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>使用PowerShell时，一键生成并发布<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean ; hexo g ; hexo d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Alist</title>
      <link href="/9670e20129fe.html"/>
      <url>/9670e20129fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s install</span><br></pre></td></tr></table></figure><blockquote><p>默认安装在 <code>/opt/alist</code> 中</p></blockquote><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s update</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s uninstall</span><br></pre></td></tr></table></figure><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x ./alist</span><br><span class="line"><span class="comment"># 随机生成一个密码</span></span><br><span class="line">./alist admin random</span><br><span class="line"><span class="comment"># 手动设置一个密码,`NEW_PASSWORD`是指你需要设置的密码</span></span><br><span class="line">./alist admin <span class="built_in">set</span> NEW_PASSWORD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 WordPress搭建一个个人博客</title>
      <link href="/9c02e8f16bbf.html"/>
      <url>/9c02e8f16bbf.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装LNMP"><a href="#安装LNMP" class="headerlink" title="安装LNMP"></a>安装LNMP</h2><ol><li>下载LNMP<br> <code>wget http://soft.vpser.net/lnmp/lnmp2.0.tar.gz -cO lnmp2.0.tar.gz</code></li><li>解压并执行<br> <code>tar zxf lnmp2.0.tar.gz &amp;&amp; cd lnmp1.5 &amp;&amp; ./install.sh lnmp</code></li><li>之后选择想要安装的版本然后回车开始安装</li><li>时间比较长，耐心等待一下，看到以下显示表示安装成功<img src="/pic/1.png" alt="img"></li><li>配置nigix<ol><li>查看nginx配置文件,在目录 <code>/usr/local/nginx/conf</code> 下，<code>root  /home/wwwroot/default;</code> 表明网站根目录为<code>/home/wwwroot/default</code>，可访问<code>http://ip</code>查看<img src="/pic/2.png" alt="img"></li><li>如果你绑定了域名，可以为网站配置 Cloudflare 免费证书和 SSL<ol><li>在 Cloudflare 的控制面板中，确保 SSL 选项设置为 “Full” 或 “Full (strict)”，生成一个私钥（通常是 .key 格式）和一个证书文件（通常是 .pem 格式）放置到服务器中</li><li>在 “server” 块内部，添加以下 SSL 配置 <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 SSL</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl_certificate</span> /path/to/your_cloudflare_cert.pem;  <span class="comment"># 指向 Cloudflare 证书文件</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /path/to/your_cloudflare_private.key;  <span class="comment"># 指向Cloudflare 私钥文件</span></span><br></pre></td></tr></table></figure></li><li>验证nginx是否有配置错误 <code>nginx -t</code></li><li>重新加载nginx <code>nginx -s reload</code></li></ol></li></ol></li></ol><h2 id="安装WordPress"><a href="#安装WordPress" class="headerlink" title="安装WordPress"></a>安装WordPress</h2><ol><li><p>安装 wordpress 安装包并解压到 <code>/home/wwwroot</code><br> <code>wget https://cn.wordpress.org/latest-zh_CN.zip &amp;&amp; unzip latest-zh_CN.zip -d /home/wwwroot</code></p></li><li><p>登录MySQL，创建wordpress表，创建完后输入exit退出</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">create database wordpress;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol><li>如果使用远程连接，还需配置防火墙<code>ufw allow 3306</code></li><li>创建允许远程访问用户<code>CREATE USER &#39;remote_user&#39;@&#39;%&#39; IDENTIFIED BY &#39;securepassword&#39;;</code></li><li>刷新 <code>FLUSH PRIVILEGES;</code></li></ol></li><li><p>使用 vim 修改 nginx 配置文件,将网站根目录为<code>/home/wwwroot/wordpress</code><br> <code>vim /usr/local/nginx/conf/nginx.conf</code></p></li><li><p>保存文件</p></li><li><p>修改wordpress目录权限<br> <code>cd /home/wwwroot &amp;&amp; chown -R www wordpress/ &amp;&amp; chgrp -R www wordpress/</code></p></li><li><p>访问<a href="http://ip/wp-admin/setup-config.php%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85">http://ip/wp-admin/setup-config.php开始安装</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
