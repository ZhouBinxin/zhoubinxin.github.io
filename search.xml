<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「Linux」远程连接Linux系统</title>
      <link href="/ac1f5b3e941d.html"/>
      <url>/ac1f5b3e941d.html</url>
      
        <content type="html"><![CDATA[<ol><li>在Linux桌面右键Open Terminal输入ifconfig</li><li>回车 在ens33中有一行ip地址</li><li>在FinalShell中点击文件夹图标选择SSH连接</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json</title>
      <link href="/c172f81a0ee6.html"/>
      <url>/c172f81a0ee6.html</url>
      
        <content type="html"><![CDATA[<h2 id="语法规则">语法规则</h2><ol><li>数组（Arrary）：方括号［］</li><li>对象（Object）：花括号{}</li><li>名称/值对（name/value）：组合成数组和对象，之间用冒号隔开<ol><li>名称置于双引号之中</li><li>值有字符串（String）、数值（Number）、布尔值、null、对象和数组<ol><li>字符串：需要双引号括起来；不能出现单独的双引号和右斜杠</li></ol></li><li>并列的数据用逗号分隔</li></ol></li></ol><h2 id="字符串转为对象">字符串转为对象</h2><ol><li>eval() 函数参数是一个字符串，作用是直接执行JavaScript代码</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var str = <span class="string">&quot;console.log(&#x27;hello&#x27;)&quot;</span>;</span><br><span class="line">    eval(str);<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line">    str=&#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zbx&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">20</span><span class="punctuation">&#125;</span>&#x27;;</span><br><span class="line">    var obj = eval(<span class="string">&quot;(&quot;</span> + str + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    console.log(obj);<span class="comment">//&#123;name: &#x27;zbx&#x27;, age: 20&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>JSON.prase 可以有第二个参数，是一个函数</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var str = &#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zbx&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">20</span><span class="punctuation">&#125;</span>&#x27;;</span><br><span class="line">    var obj = JSON.parse(str);</span><br><span class="line">    console.log(obj);<span class="comment">//&#123;name: &#x27;zbx&#x27;, age: 20&#125;</span></span><br><span class="line"></span><br><span class="line">    function fun(name<span class="punctuation">,</span> value) <span class="punctuation">&#123;</span></span><br><span class="line">        if (name == <span class="string">&quot;age&quot;</span>) <span class="punctuation">&#123;</span></span><br><span class="line">            value = <span class="number">14</span>;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        return value;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    var jsonstr = JSON.parse(str<span class="punctuation">,</span> fun);</span><br><span class="line">    console.log(jsonstr);<span class="comment">//&#123;name: &#x27;zbx&#x27;, age: 14&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="对象转为字符串">对象转为字符串</h2><ol><li>JSON.stringify(value[,replacer [, space]])</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var obj=<span class="punctuation">&#123;</span></span><br><span class="line">        name<span class="punctuation">:</span><span class="string">&quot;zbx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        age<span class="punctuation">:</span><span class="number">20</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    console.log(obj);<span class="comment">//&#123;name: &#x27;zbx&#x27;, age: 20&#125;</span></span><br><span class="line"></span><br><span class="line">    var jsonstr = JSON.stringify(obj<span class="punctuation">,</span>fun);</span><br><span class="line"></span><br><span class="line">    function fun(name<span class="punctuation">,</span> value) <span class="punctuation">&#123;</span></span><br><span class="line">        if (name == <span class="string">&quot;age&quot;</span>) <span class="punctuation">&#123;</span></span><br><span class="line">            value = <span class="number">14</span>;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        return value;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    console.log(jsonstr);<span class="comment">//&#123;&quot;name&quot;:&quot;zbx&quot;,&quot;age&quot;:14&#125;</span></span><br><span class="line"></span><br><span class="line">    var obj1=<span class="punctuation">&#123;</span></span><br><span class="line">        a<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        b<span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        c<span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        d<span class="punctuation">:</span><span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    console.log(obj1);<span class="comment">//&#123;a: 1, b: 2, c: 3, d: 4&#125;</span></span><br><span class="line"></span><br><span class="line">    var jsonstr1 = JSON.stringify(obj1<span class="punctuation">,</span><span class="punctuation">[</span>&#x27;c&#x27;<span class="punctuation">,</span>&#x27;a&#x27;<span class="punctuation">,</span>&#x27;b&#x27;<span class="punctuation">]</span><span class="punctuation">,</span><span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">    console.log(jsonstr1);</span><br><span class="line">    <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">        &quot;c&quot;: 3,</span></span><br><span class="line"><span class="comment">        &quot;a&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;b&quot;: 2</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Ajax和Json">Ajax和Json</h2><ol><li>局部更新</li><li>xmlhttp.readystate 存有 XMLHttpRequest 的状态，有五个值<ol><li>0:请求未初始化</li><li>1:服务器连接已建立</li><li>2: 请求已接收</li><li>3:请求处理中</li><li>4: 请求已完成，且响应已就绪</li></ol></li><li>xmlhttp.status 的值为请求结果，200 表示OK，404 表示未找到页面</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var xmlhttp;</span><br><span class="line">    xmlhttp=CreateXHR();</span><br><span class="line">    xmlhttp.open(<span class="string">&quot;GET&quot;</span><span class="punctuation">,</span><span class="string">&quot;test.json&quot;</span><span class="punctuation">,</span><span class="literal"><span class="keyword">true</span></span>);</span><br><span class="line">    xmlhttp.send();</span><br><span class="line">    <span class="comment">// 响应函数</span></span><br><span class="line">    xmlhttp.onreadystatechange=function()<span class="punctuation">&#123;</span></span><br><span class="line">        if(xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)<span class="punctuation">&#123;</span></span><br><span class="line">            var jsonstr=xmlhttp.responseText;</span><br><span class="line">            console.log(jsonstr);</span><br><span class="line">            var obj=JSON.parse(jsonstr);</span><br><span class="line">            console.log(obj);</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    function CreateXHR()<span class="punctuation">&#123;</span></span><br><span class="line">        if(window.XMLHttpRequest)<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">            return = new XMLHttpRequest();</span><br><span class="line">        <span class="punctuation">&#125;</span>else<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// IE6, IE5</span></span><br><span class="line">            return = new ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「数据结构」串</title>
      <link href="/10ddc5923551.html"/>
      <url>/10ddc5923551.html</url>
      
        <content type="html"><![CDATA[<h2 id="串的定义和实现">串的定义和实现</h2><h3 id="串的定义">串的定义</h3><ol><li>串: 即字符串，零个或多个字符组成的有限序列</li><li>串的长度：串中字符的个数n</li><li>空串：n=0时的串</li><li>子串：串中任意多个<strong>连续的</strong>字符组成的子序列</li><li>主串：包含子串的串</li><li>字符在主串中的位置：字符在串中的序号（从1开始）</li><li>子串在主串中的位置：子串的第一个字符在主串中的位置</li><li>空串和空格串<ol><li>M = ‘’ 是空串；</li><li>N =’   ’ 是空格串；</li></ol></li><li>串和线性表<ol><li>串是特殊的线性表，数据元素之间呈线性关系</li><li>串的数据对象限定为字符集：中文字符、英文字符、数字字符、标点字符等</li><li>串的基本操作，如增删改除<strong>通常以子串为操作对象</strong></li></ol></li></ol><h3 id="串的存储结构">串的存储结构</h3><p><strong>串的顺序存储</strong></p><ol><li>静态数组实现（定长顺序存储）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255   <span class="comment">//预定义最大串长为255</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];    <span class="comment">//每个分量存储一个字符</span></span><br><span class="line">    <span class="type">int</span> length;        <span class="comment">//串的实际长度</span></span><br><span class="line">&#125;SString;</span><br></pre></td></tr></table></figure><ol start="2"><li>动态数组实现（堆分配存储）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> *ch;    <span class="comment">//按串长分配存储区，ch指向串的基地址</span></span><br><span class="line">    <span class="type">int</span> length;        <span class="comment">//串的实际长度</span></span><br><span class="line">&#125;HString;</span><br><span class="line">HString S;</span><br><span class="line">S.ch = (<span class="type">char</span> *) <span class="built_in">malloc</span>(MAXLEN * <span class="built_in">szeof</span>(<span class="type">char</span>));    <span class="comment">//用完要手动free</span></span><br><span class="line">S.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>串长表示法<ol><li>用一个额外的变量length来存放串的长度</li><li>用ch[0]充当length<ol><li>优点：字符的位序和数组下标相同</li><li>缺点：字符串最大长度只有256</li></ol></li><li>没有length变量，以字符 ‘\0’ 表示结尾（对应ASCII码的0）<ol><li>缺点：需要从头到尾遍历</li></ol></li><li>ch[0]废弃不用，声明int型变量length来存放串的长度</li></ol></li></ol><p><strong>基本操作实现</strong></p><blockquote><p>ch[0]废弃不用，声明int型变量length来存放串的长度</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];   </span><br><span class="line">    <span class="type">int</span> length;       </span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求子串</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SubString</span><span class="params">(SString &amp;Sub, SString S, <span class="type">int</span> pos, <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="comment">//子串范围越界</span></span><br><span class="line">    <span class="keyword">if</span> (pos+len<span class="number">-1</span> &gt; S.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=pos; i&lt;pos+len; i++)</span><br><span class="line">        Sub.cn[i-pos+<span class="number">1</span>] = S.ch[i];</span><br><span class="line">    </span><br><span class="line">    Sub.length = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较两个串的大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StrCompare</span><span class="params">(SString S, SString T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i; i&lt;S.length &amp;&amp; i&lt;T.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i] != T.ch[i])</span><br><span class="line">            <span class="keyword">return</span> S.ch[i] - T.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扫描过的所有字符都相同，则长度长的串更大</span></span><br><span class="line">    <span class="keyword">return</span> S.length - T.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位操作</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(SString S, SString T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    n = <span class="built_in">StrLength</span>(S);</span><br><span class="line">    m = <span class="built_in">StrLength</span>(T);</span><br><span class="line">    SString sub;        <span class="comment">//用于暂存子串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n-m+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">SubString</span>(Sub,S,i,m);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(Sub,T)!=<span class="number">0</span>)</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> i;    <span class="comment">// 返回子串在主串中的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;            <span class="comment">//S中不存在与T相等的子串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>串的链式存储</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">StringNode</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;           <span class="comment">//每个结点存1个字符</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">StringNode</span> *next;</span><br><span class="line">&#125;StringNode, * String;</span><br></pre></td></tr></table></figure><blockquote><p>缺点：存储密度低，每个字符1B，每个指针4B</p></blockquote><ol><li>改进方法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">StringNode</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">4</span>];           <span class="comment">//每个结点存多个个字符</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">StringNode</span> *next;</span><br><span class="line">&#125;StringNode, * String;</span><br></pre></td></tr></table></figure><h3 id="串的基本操作">串的基本操作</h3><ol><li>假设有串 T = ‘’, S = ‘iPhone 11 Pro Max?’, W = ‘Pro’<ol><li>StrAssign(&amp;T, chars): 赋值操作，把串T赋值为chars</li><li>StrCopy(&amp;T, S): 复制操作，把串S复制得到串T</li><li>StrEmpty(S): 判空操作，若S为空串，则返回True，否则返回False</li><li>StrLength(S): 求串长，返回串S的元素个数</li><li>ClearString(&amp;S): 清空操作，将S清为空串</li><li>DestroyString(&amp;S): 销毁串，将串S销毁（回收存储空间）</li><li>Concat(&amp;T, S1, S2): 串联联接，用T返回由S1和S2联接而成的新串———可能会导致存储空间的扩展</li><li>SubString(&amp;Sub, S, pos, len): 求子串，用Sub返回串S的第pos个字符起长度为len的子串</li><li><strong>Index(S, T)</strong>: 定位操作，若主串S中存在与串T值相同的子串，则返回它再主串S中第一次出现的位置，否则函数值为0</li><li><strong>StrCompare(S, T)</strong>: 串的比较操作，参照英文词典排序方式；若S &gt; T,返回值&gt;0; S = T,返回值=0 (需要两个串完全相同) ; S &lt; T,返回值&lt;0</li></ol></li></ol><h2 id="串的模式匹配">串的模式匹配</h2><ol><li>字符串模式匹配:在主串中找到与模式串相同的子串，并返回其所在位置</li></ol><h3 id="简单的模式匹配算法">简单的模式匹配算法</h3><ol><li>朴素模式匹配算法: 将主串中所有长度为m的子串依次与模式串对比，直到找到一个完全匹配的子串或所有的子串都不匹配为止</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(SString S, SString T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;                <span class="comment">//扫描主串S</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;                <span class="comment">//扫描模式串T</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length &amp;&amp; j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i] == T.ch[j])&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;             <span class="comment">//继续比较后继字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i = i-j+<span class="number">2</span>;</span><br><span class="line">            j=<span class="number">1</span>;             <span class="comment">//指针后退重新开始匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>时间复杂度分析<ol><li>主串长度为n，模式串长度为m,大多数时候，n&gt;&gt;m</li><li>最多比较n-m+1个子串</li><li>最坏时间复杂度：每个子串都要对比m个字符(对比到最后一个字符才匹配不上)，共要对比n-m+1个子串，复杂度 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo>−</mo><msup><mi>m</mi><mn>2</mn></msup><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((n-m+1)m) = O(nm - m^2 + m) = O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">((</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">nm</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">nm</span><span class="mclose">)</span></span></span></span></li><li>最好时间复杂度 = O(n)</li><li>每个子串的第一个字符就匹配失败，共要对比n-m+1个子串，复杂度 = O(n-m+1) = O(n)</li></ol></li></ol><h3 id="串的模式匹配算法——KMP算法">串的模式匹配算法——KMP算法</h3><ol><li>根据模式串T，求出next数组，利用next数组进行匹配（主串指针不再回溯）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index_KMP</span><span class="params">(SString S, SString T, <span class="type">int</span> next[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;     <span class="comment">//主串</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;     <span class="comment">//模式串</span></span><br><span class="line">    <span class="keyword">while</span>（i&lt;S.length &amp;&amp; j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span> || S.ch[i]==T.ch[j])&#123;      <span class="comment">//第一个元素匹配失败时</span></span><br><span class="line">            ++j;</span><br><span class="line">            ++i;         <span class="comment">//继续比较后继字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j]   <span class="comment">//模式串向右移动</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-T.length; <span class="comment">//匹配成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>最坏时间复杂度：O(m+n)<ol><li>求next数组时间复杂度O(m)</li><li>模式匹配过程最坏时间复杂度O(n)</li></ol></li></ol><p><strong>求模式串的next数组</strong></p><ol><li>next数组的作用：当模式串的第j个字符失配时，从模式串的第 next[j] 个字符继续往后匹配</li><li>任何模式串都一样，第一个字符不匹配时，只能匹配下一个子串，因此，next[1]都等于 0</li><li>任何模式串都一样，第2个字符不匹配时，应尝试匹配模式串的第1个字符，因此，next[2]都等于 1</li><li>在不匹配的位置前边，划一根分界线，模式串一步一步往后退，直到分界线之前“能对上”，或模式串完全跨过分界线为止，此时j指向哪儿，next数组值就是多少</li></ol><h3 id="KMP算法的进一步优化">KMP算法的进一步优化</h3><ol><li>nextval[1]恒等于0</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nextval[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">2</span>; j&lt;=T.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(T.ch[next[j]]==T.ch[j])</span><br><span class="line">nextval[j]=nextval[next[j]];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">nextval[j]=next[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「数据结构」栈和队列</title>
      <link href="/c1822c2d762d.html"/>
      <url>/c1822c2d762d.html</url>
      
        <content type="html"><![CDATA[<h2 id="栈">栈</h2><h3 id="栈的基本概念">栈的基本概念</h3><ol><li>定义<ol><li>栈是只允许在一端进行插入或删除操作的线性表</li><li>栈顶：线性表允许进行插入删除的那一端</li><li>栈底：固定的，不允许进行插入和删除的另一端</li><li>空栈：不含任何元素</li><li>特点：后进先出（LIFO）</li></ol></li><li>基本操作<ol><li><code>InitStack(&amp;S)</code>：初始化一个空栈S</li><li><code>StackEmpty(S)</code>：判断一个栈是否为空，若栈S为空则返回true，否则返回false</li><li><code>Push(&amp;S,x)</code>：进栈，若栈S未满，则将x加入使之成为新栈顶</li><li><code>Pop(&amp;S,%=&amp;x)</code>：出栈，若栈S非空，则用x返回栈顶元素</li><li><code>GetTop(S,&amp;x)</code>：读栈顶元素，若栈S非空，则用x返回栈顶元素</li><li><code>DestroyStack(&amp;S)</code>：销毁栈，并释放栈S占用的存储空间</li></ol></li><li>卡特兰数：n个不同元素进栈，出栈元素的不同排列的个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">\frac{1}{n+1}C^n_{2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.4519em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span></li></ol><h3 id="栈的顺序存储结构">栈的顺序存储结构</h3><ol><li>顺序栈的定义</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10         <span class="comment">//定义栈中元素的最大个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];       <span class="comment">//静态数组存放栈中元素</span></span><br><span class="line">    <span class="type">int</span> top;                      <span class="comment">//栈顶元素</span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqStack S;       <span class="comment">//声明一个顺序栈(分配空间)</span></span><br><span class="line">                     <span class="comment">//连续的存储空间大小为 MaxSize*sizeof(ElemType)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>基本操作</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10         <span class="comment">//定义栈中元素的最大个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];       <span class="comment">//静态数组存放栈中元素</span></span><br><span class="line">    <span class="type">int</span> top;                      <span class="comment">//栈顶元素</span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;                   <span class="comment">//初始化栈顶指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判栈空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == <span class="number">-1</span>)      <span class="comment">//栈空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span>                 <span class="comment">//栈不空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素进栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == MaxSize - <span class="number">1</span>)        <span class="comment">//栈满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    S.top = S.top + <span class="number">1</span>;    <span class="comment">//指针先加1</span></span><br><span class="line">    S.data[S.top] = x;    <span class="comment">//新元素入栈</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    S.data[++S.top] = x;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;x, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == <span class="number">-1</span>)          <span class="comment">//栈空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    x = S.data[S.top];       <span class="comment">//先出栈</span></span><br><span class="line">    S.top = S.top - <span class="number">1</span>;       <span class="comment">//栈顶指针减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    x = S.data[S.top--];</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//只是逻辑上的删除，数据依然残留在内存里</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    x = S.data[S.top];      <span class="comment">//x记录栈顶元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqStack S;       <span class="comment">//声明一个顺序栈(分配空间)</span></span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>栈满条件：<code>top==MaxSize</code></li><li>顺序栈的缺点：栈的大小不可变</li><li>共享栈<ol><li>定义：利用栈底位置相对不变的特性，可以让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸</li></ol></li></ol><h3 id="栈的链式存储结构">栈的链式存储结构</h3><p>与链表类似，入栈和出栈的操作都在链表的表头进行</p><h2 id="队列">队列</h2><h3 id="队列的概念">队列的概念</h3><ol><li>定义：队列是只允许在一端进行插入（入队），在另一端删除（出队）的线性表</li><li>队头：允许删除的一端</li><li>队尾：允许插入的一端</li><li>空队列：不含任何元素的空表</li><li>队列的特点：先进先出（FIFO）</li><li>队列的基本操作<ol><li><code>InitQueue(&amp;Q)</code>: 初始化队列，构造一个空队列Q</li><li><code>DestroyQueue(&amp;Q)</code>: 销毁队列，并释放队列Q所占用的内存空间</li><li><code>EnQueue(&amp;Q, x)</code>: 入队，若队列Q未满，将x加入，使之成为新的队尾</li><li><code>DeQueue(&amp;Q, &amp;x)</code>: 出队，若队列Q非空，删除队头元素，并用x返回</li><li><code>GetHead(Q,&amp;x)</code>: 读队头元素，若队列Q非空，则将队头元素赋值给x</li><li><code>QueueEmpty(Q)</code>: 判队列空，若队列Q为空，则返回true，否则返回false</li></ol></li></ol><h3 id="队列的顺序存储结构">队列的顺序存储结构</h3><ol><li>队列的顺序实现</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> MaxSize 10;     <span class="comment">//定义队列中元素的最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];   <span class="comment">//用静态数组存放队列元素</span></span><br><span class="line">    <span class="type">int</span> front, rear;          <span class="comment">//队头指针和队尾指针</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化操作</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化时，队头、队尾指针指向0</span></span><br><span class="line">    Q.rear = Q.front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == Q.front)    <span class="comment">//队空条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>入队操作</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize == Q.front)    <span class="comment">//队满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//队满报错</span></span><br><span class="line">    Q.data[Q.rear] = x;    <span class="comment">//将x插入队尾</span></span><br><span class="line">    Q.rear = (Q.rear + <span class="number">1</span>) % MaxSize;    <span class="comment">//队尾指针加1取模</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>出队操作</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队，删除一个队头元素，用x返回</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == Q.front)              <span class="comment">//队空报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    x = Q.data[Q.front];</span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % MaxSize; <span class="comment">//队头指针后移动</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>获得队头元素</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetHead</span><span class="params">(SqQueue &amp;Q, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == Q.front)              <span class="comment">//队空报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    x = Q.data[Q.front];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>判断队列已满/已空<ol><li>方案一：牺牲一个存储单元（实现代码同1）<ol><li>初始化时：<code>rear=front=0;</code></li><li>队空条件：<code>Q.rear==Q.front;</code></li><li>队满条件：<code>(Q.rear+1)%MaxSize == Q.front</code></li><li>队列元素个数：<code>(rear+MaxSize-front)%MaxSize;</code></li></ol></li><li>方案二<ol><li>实现</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10;     <span class="comment">//定义队列中元素的最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];   <span class="comment">//用静态数组存放队列元素</span></span><br><span class="line">    <span class="type">int</span> front, rear;          <span class="comment">//队头指针和队尾指针</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化时</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rear=front=<span class="number">0</span>;</span><br><span class="line">size=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>插入成功：<code>size++;</code></li><li>删除成功：<code>size--;</code></li><li>队满条件：<code>size==Maxsize;</code></li><li>队空条件：<code>size==0;</code></li></ol></li><li>方案三<ol><li>实现</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10;     <span class="comment">//定义队列中元素的最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];   <span class="comment">//用静态数组存放队列元素</span></span><br><span class="line">    <span class="type">int</span> front, rear;          <span class="comment">//队头指针和队尾指针</span></span><br><span class="line">    <span class="type">int</span> tag;    <span class="comment">//最近进行的是删除/插入</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化时</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rear=front=<span class="number">0</span>;</span><br><span class="line">tag=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>插入成功：<code>tag=1;</code></li><li>删除成功：<code>tag=0;</code></li><li>队满条件：<code>rear==front&amp;&amp;tag==1;</code></li><li>队空条件：<code>rear==front&amp;&amp;tag==0;</code></li></ol></li></ol></li></ol><h3 id="队列的链式存储结构">队列的链式存储结构</h3><ol><li>定义队列</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span>&#123;      <span class="comment">//链式队列结点</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkNode</span> *next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;               <span class="comment">//链式队列</span></span><br><span class="line">    LinkNode *front, *rear;   <span class="comment">//队列的队头和队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>初始化</p><ol><li>带头结点</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化时，front、rear都指向头结点</span></span><br><span class="line">    Q.front = Q.rear = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    Q.front -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear)     <span class="comment">//也可用 Q.front -&gt; next == NULL</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>不带头结点</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化时，front、rear都指向NULL</span></span><br><span class="line">    Q.front = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>入队</p><ol><li>带头结点</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新元素入队 (表尾进行)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, ElemType x)</span></span>&#123;</span><br><span class="line">    LinkNode *s = (LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode)); <span class="comment">//申请一个新结点</span></span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;     <span class="comment">//s作为最后一个结点，指针域指向NULL</span></span><br><span class="line">    Q.rear-&gt;next = s;   <span class="comment">//新结点插入到当前的rear之后</span></span><br><span class="line">    Q.rear = s;         <span class="comment">//表尾指针指向新的表尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>不带头结点</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新元素入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, ElemType x)</span></span>&#123;</span><br><span class="line">    LinkNode *s = (LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode)); <span class="comment">//申请一个新结点</span></span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)&#123;    <span class="comment">//在空队列中插入第一个元素</span></span><br><span class="line">    Q.front=s;    <span class="comment">//修改队头队尾指针</span></span><br><span class="line">    Q.rear=s;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    Q.rear-&gt;next=s;    <span class="comment">//新结点插入到rear结点之后</span></span><br><span class="line">    Q.rear=s;    <span class="comment">//修改rear指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出队</p><ol><li>带头结点</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队头元素出队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;                    <span class="comment">//空队</span></span><br><span class="line">   </span><br><span class="line">    LinkNode *p = Q.front-&gt;next;    <span class="comment">//p指针指向即将删除的结点</span></span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;             <span class="comment">//修改头结点的next指针</span></span><br><span class="line">    <span class="keyword">if</span>(Q.rear == p)                      <span class="comment">//此次是最后一个结点出队</span></span><br><span class="line">        Q.rear = Q.front;                <span class="comment">//修改rear指针</span></span><br><span class="line">    <span class="built_in">free</span>(p);                             <span class="comment">//释放结点空间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>不带头结点</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队头元素出队</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;                    <span class="comment">//空队</span></span><br><span class="line">   </span><br><span class="line">    LinkNode *p = Q.front;    <span class="comment">//p指针指向即将删除的结点</span></span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    Q.front = p-&gt;next;             <span class="comment">//修改头结点的next指针</span></span><br><span class="line">    <span class="keyword">if</span>(Q.rear == p)&#123;    <span class="comment">//此次是最后一个结点出队</span></span><br><span class="line">    Q.rear==<span class="literal">NULL</span>:</span><br><span class="line">    Q.front==<span class="literal">NULL</span>;</span><br><span class="line">    &#125;                      </span><br><span class="line">    <span class="built_in">free</span>(p);     <span class="comment">//释放结点空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="双端队列">双端队列</h3><ol><li>定义：只允许从两端插入、两端删除的线性表<ol><li>输入受限的双端队列：允许一端插入，两端删除的线性表</li><li>输出受限的双端队列：允许两端插入，一端删除的线性表</li></ol></li></ol><h2 id="栈和队列的应用">栈和队列的应用</h2><h3 id="栈在括号匹配中的应用">栈在括号匹配中的应用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10   </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="built_in">InitStack</span>(SqStack &amp;S)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//新元素入栈</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, <span class="type">char</span> x)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//栈顶元素出栈，用x返回</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S, <span class="type">char</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bracketCheck</span><span class="params">(<span class="type">char</span> str[], <span class="type">int</span> length)</span></span>&#123;</span><br><span class="line">    SqStack S;      <span class="comment">//声明</span></span><br><span class="line">    <span class="built_in">InitStack</span>(S);   <span class="comment">//初始化栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">&#x27;(&#x27;</span> || str[i] == <span class="string">&#x27;[&#x27;</span> || str[i] == <span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">Push</span>(S, str[i]);       <span class="comment">//扫描到左括号，入栈</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">StackEmpty</span>(S))      <span class="comment">//扫描到右括号，且当前栈空</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;      <span class="comment">//匹配失败</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">char</span> topElem;          <span class="comment">//存储栈顶元素</span></span><br><span class="line">            <span class="built_in">Pop</span>(S, topElem);       <span class="comment">//栈顶元素出栈</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; topElem != <span class="string">&#x27;(&#x27;</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; topElem != <span class="string">&#x27;[&#x27;</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; topElem != <span class="string">&#x27;&#123;&#x27;</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StackEmpty</span>(S); <span class="comment">//栈空说明匹配成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈在表达式值中的应用">栈在表达式值中的应用</h3><p><strong>中缀表达式</strong><br>(需要界限符)</p><ol><li>规则：运算符在两个操作数中间</li><li>例<ol><li>a + b</li><li>a + b - c</li><li>a + b - c*d</li></ol></li></ol><p><strong>后缀表达式 (逆波兰表达式)</strong></p><ol><li>规则：运算符在两个操作数后面</li><li>例<ol><li>a b +</li><li>ab+ c - / a bc- +</li><li>ab+ cd* -</li></ol></li><li>中缀表达式转后缀表达式<ol><li>确定中缀表达式中各个运算符的运算顺序</li><li>选择下一个运算符，按照[左操作数 右操作数 运算符]的方式组合成一个新的操作数</li><li>如果还有运算符没被处理，继续步骤2</li></ol></li></ol><blockquote><p>“左优先”原则: 只要左边的运算符能先计算，就优先算左边的 (保证运算顺序唯一)</p></blockquote><ol><li>用栈实现中缀表达式转后缀表达式<ol><li>初始化一个栈，用于保存暂时还不能确定运算顺序的运算符。从左到右处理各个元素，直到末尾。可能遇到三种情况<ol><li>遇到操作数: 直接加入后缀表达式</li><li>遇到界限符: 遇到 ‘(’ 直接入栈; 遇到 ‘)’ 则依次弹出栈内运算符并加入后缀表达式，直到弹出 ‘(’ 为止。注意: ‘(’ 不加入后缀表达式</li><li>遇到运算符: 依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到 ‘(’ 或栈空则停止。之后再把当前运算符入栈</li></ol></li><li>按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式</li></ol></li><li>后缀表达式的计算：从左往右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应的运算，合体为一个操作数</li><li>用栈实现后缀表达式的计算（栈用来存放当前暂时不能确定运算次序的操作数）<ol><li>从左往后扫描下一个元素，直到处理完所有元素</li><li>若扫描到操作数，则压入栈，并回到步骤1;否则执行步骤3</li><li>若扫描到运算符，则弹出两个栈顶元素，执行相应的运算，运算结果压回栈顶，回到步骤1</li></ol></li></ol><blockquote><p>先出栈的是“右操作数”</p></blockquote><p><strong>前缀表达式 (波兰表达式)</strong></p><ol><li>规则：运算符在两个操作数前面</li><li>例<ol><li><ul><li>a b</li></ul></li><li>+ab  c</li><li><ul><li>+ab *cd</li></ul></li></ol></li><li>中缀表达式转前缀表达式<ol><li>确定中缀表达式中各个运算符的运算顺序</li><li>选择下一个运算符，按照[运算符 左操作数 右操作数]的方式组合成一个新的操作数</li><li>如果还有运算符没被处理，就继续执行步骤2</li></ol></li></ol><blockquote><p>“右优先”原则: 只要右边的运算符能先计算，就优先算右边的;</p></blockquote><ol><li>用栈实现前缀表达式的计算<ol><li>从右往左扫描下一个元素，直到处理完所有元素</li><li>若扫描到操作数则压入栈，并回到步骤1，否则执行步骤3</li><li>若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到步骤1；</li></ol></li></ol><blockquote><p>先出栈的是“左操作数”</p></blockquote><p>4.中缀表达式的计算(用栈实现)：两个算法的结合： 中缀转后缀 + 后缀表达式的求值<br>1. 初始化两个栈，<strong>操作数栈</strong>和<strong>运算符栈</strong><br>2. 若扫描到操作数，压入操作数栈<br>3. 若扫描到运算符或界限符，则按照“中缀转后缀”相同的逻辑压入运算符栈 (期间也会<strong>弹出</strong>运算符，<strong>每当弹出一个运算符时，就需要再弹出两个操作数栈的栈项元素并执行相应运算，运算结果再压回操作数栈</strong>)</p><h3 id="栈在递归中的应用">栈在递归中的应用</h3><ol><li>函数调用的特点：最后被调用的函数最先执行结束(LIFO)</li><li>函数调用时，需要用一个栈存储<ol><li>调用返回地址</li><li>实参</li><li>局部变量</li></ol></li><li>递归调用时，函数调用栈称为 “递归工作栈”<ol><li>每进入一层递归，就将递归调用所需信息压入栈顶</li><li>每退出一层递归，就从栈顶弹出相应信息</li><li><strong>缺点：</strong> 太多层递归可能回导致栈溢出</li></ol></li></ol><h2 id="数组和特殊矩阵">数组和特殊矩阵</h2><h3 id="数组的定义">数组的定义</h3><p>数组是由n(n&gt;=1)个相同类型的数据元素构成的有限序列，每个数据元素称为一个数组元素，每个元素在n个线性关系中的序号称为该元素的下标，下标的取值范围称为数组的维界</p><h3 id="数组的存储结构">数组的存储结构</h3><ol><li>一维数组<ol><li>各数组元素大小相同，物理上连续存放</li><li>数组下标：默认从0开始</li><li>数组元素 a[i] 的存放地址 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo>+</mo><mi>i</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><mi>E</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LOC + i * sizeof(ElemType)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">El</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span><ol><li>LOC为数组起始地址</li></ol></li></ol></li><li>二维数组<ol><li>行优先/列优先存储优点：实现随机存储</li><li>M行N列的二维数组 b[M][N] 中，b[i][j]的存储地址：<ol><li>行优先存储: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo>+</mo><mo stretchy="false">(</mo><mi>i</mi><mo>×</mo><mi>N</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo><mo>×</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><mi>E</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LOC + (i×N + j) × sizeof(ElemType)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">El</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></li><li>列优先存储：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo>+</mo><mo stretchy="false">(</mo><mi>j</mi><mo>×</mo><mi>M</mi><mo>+</mo><mi>i</mi><mo stretchy="false">)</mo><mo>×</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy="false">(</mo><mi>E</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LOC + (j×M + i) × sizeof(ElemType)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">zeo</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">El</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></li></ol></li></ol></li><li>普通矩阵的存储：使用二维数组存储</li></ol><blockquote><p>描述矩阵元素时，行、列号通常从1开始<br>描述数组时，通常下标从 0 开始</p></blockquote><h3 id="特殊矩阵的压缩存储">特殊矩阵的压缩存储</h3><p>矩阵的压缩存储：为多个相同的非零元素只分配一个存储空间；对零元素不分配空间。</p><ol><li>对称矩阵<ol><li>若n 阶方阵中任意一个元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>都有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>j</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,j}=a_{j,i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>则该矩阵为对称矩阵</li><li>策略：只存储主对角线+下三角区；按行优先原则将各元素存入一维数组中</li><li>数组大小：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n(n+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>元素下标对应关系：k为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>在一维数组中的下标</li></ol></li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>k</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>i</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mspace width="1em"/><mi>i</mi><mo>≥</mo><mi>j</mi><mspace width="1em"/><mo stretchy="false">(</mo><mtext>下三角区和主对角线元素</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>j</mi><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mspace width="1em"/><mi>i</mi><mo>&lt;</mo><mi>j</mi><mspace width="1em"/><mo stretchy="false">(</mo><mtext>上三角区元素</mtext><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>j</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo><mtext> </mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">k= \left\{\begin{array}{l}\frac{i(i-1)}{2}+j-1, \quad i \ge j \quad (下三角区和主对角线元素) \\\frac{j(j-1)}{2}+i-1, \quad i&lt;j \quad (上三角区元素a_{i,j}=a_{j,i}) \\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.62em;"><span style="top:-3.62em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">下三角区和主对角线元素</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">上三角区元素</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.12em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ol><li>三角矩阵<ol><li>以主对角线划分，三角矩阵有上（下）三角两种。上（下）三角矩阵的下（上）三角（不含主对角线）中的元素均为常数。在大多数情况下，三角矩阵常数为零</li><li>策略：按行优先原则将元素存入一维数组中（同对称矩阵）。并在最后一个位置存储常量</li><li>元素下标对应关系：k为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>在一维数组中的下标</li></ol></li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>k</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>i</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mspace width="1em"/><mi>i</mi><mo>≥</mo><mi>j</mi><mspace width="1em"/><mo stretchy="false">(</mo><mtext>下三角区和主对角线元素</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo separator="true">,</mo><mspace width="1em"/><mi>i</mi><mo>&lt;</mo><mi>j</mi><mspace width="1em"/><mo stretchy="false">(</mo><mtext>上三角区元素</mtext><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>j</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo><mtext> </mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">k= \left\{\begin{array}{l}\frac{i(i-1)}{2}+j-1, \quad i \ge j \quad (下三角区和主对角线元素) \\\frac{n(n+1)}{2}, \quad i&lt;j \quad (上三角区元素a_{i,j}=a_{j,i}) \\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.62em;"><span style="top:-3.62em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">下三角区和主对角线元素</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">上三角区元素</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.12em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ol start="3"><li>三对角矩阵（带状矩阵）<ol><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>i</mi><mo>−</mo><mi>j</mi><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|i-j|&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>时，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mn>0</mn><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>≤</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_{i,j}=0 (1 \leq i,j \leq n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>策略：按行优先(或列优先) 原则，只存储带状部分</li><li>元素下标对应关系：k为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>在一维数组中的下标 <code>k=2i+j-3</code></li></ol></li></ol><h3 id="稀疏矩阵">稀疏矩阵</h3><ol><li>非零元系远远少于矩阵元素的个数</li><li>策略<ol><li>顺序存储——三元组&lt;行,列,值&gt;<ol><li>会失去随机存取的特性</li></ol></li><li>十字链表法</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「数据结构」线性表</title>
      <link href="/f9477ce73d75.html"/>
      <url>/f9477ce73d75.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义和基本操作">定义和基本操作</h2><ol><li>定义：相同数据类型的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n \ge 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>个数据元素的有限序列，其中n为表长，当n=0时线性表是一个空表</li><li>一般表示：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L=(a_1,a_2,……,a_i,a_{i+1},a_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">……</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是表头元素，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是表尾元素</li></ol></li><li>除第一个元素外，每个元素有且只有一个直接前驱；除最后一个元素外，每个元素有且只有一个直接后继</li></ol><p><strong>基本操作</strong></p><ol><li><code>InitList(&amp;L)</code>；初始化表。构造一个空的线性表L，分配内存空间</li><li><code>DestroyList(&amp;L)</code>：销毁操作。销毁线性表，并释放线性表L所占用的内存空间</li><li><code>ListInsert(&amp;L,i,e)</code>：插入操作。在表L中的第i个位置插入指定元素e</li><li><code>ListDelete(&amp;L,i,&amp;e)</code>：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值</li><li><code>LocateElem(L,e)</code>：按值查找操作。在表L中查找具有给定关键字值的元素</li><li><code>GetElem(L,i)</code>：按位查找操作。获取表L中第i个位置的元素的值</li></ol><p><strong>其他常用操作</strong></p><ol><li><code>Length(L)</code>：求表长。返回线性表L中数据元素的个数</li><li><code>PrintList(L)</code>：输出操作。按前后顺序输出线性表L的所有元素值</li><li><code>Empty(L)</code>：判空操作。若L为空表，返回true，否则返回false</li></ol><h2 id="顺序表">顺序表</h2><h3 id="定义">定义</h3><ol><li>顺序表：用顺序存储的方式实现线性表的顺序存储。把逻辑上相邻的元素存储在物理位置也相邻的存储单元中</li><li>顺序表的实现-静态分配</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50<span class="comment">//线性表的最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType data[MaxSize];<span class="comment">//顺序表的元素</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义</span></span><br></pre></td></tr></table></figure><ol start="3"><li>顺序表的实现-动态分配<ol><li>时间开销大</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 50<span class="comment">//顺序表的初始长度</span></span></span><br><span class="line"><span class="comment">//动态分配</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType* data;<span class="comment">//指针动态分配数组的指针</span></span><br><span class="line"><span class="type">int</span> maxsize;<span class="comment">//顺序表的最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>动态申请和释放内存空间</p><ol><li>C：malloc、free函数</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = (ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType) * InitSize);<span class="comment">//C语言初始动态分配</span></span><br></pre></td></tr></table></figure><ol start="2"><li>C++：new、delete关键字</li></ol> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.data = <span class="keyword">new</span> <span class="type">int</span>[InitSize];</span><br></pre></td></tr></table></figure></li><li><p>顺序表的特点</p><ol><li>随机访问，可以在O(1)时间内找到第i个元素</li><li>存储密度高</li><li>拓展容量不方便</li><li>插入、删除操作不方便，需要移动大量元素</li></ol></li></ol><h3 id="插入和删除">插入和删除</h3><p><strong>插入</strong></p><ol><li><code>ListInsert(&amp;L,i,e)</code>：插入操作。在表L中第i个位置上插入指定元素</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) &#123;<span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (L.length &gt;= MaxSize) &#123;<span class="comment">//当前存储空间已满，不能插入</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--) &#123;<span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;<span class="comment">//在位置i处放e</span></span><br><span class="line">L.length++;<span class="comment">//长度加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>时间复杂度<ol><li>最好情况：在表尾插入（即i=n+1），不需要移动元素，时间复杂度为O(1)</li><li>最坏情况：在表头插入（即i=1），元素后移语句执行n次，时间复杂度为O(n)</li><li>平均情况：移动结点的平均次数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，时间复杂度O(n)</li></ol></li></ol><p><strong>删除</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, <span class="type">int</span>&amp; e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) &#123;<span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = L.data[i - <span class="number">1</span>];<span class="comment">//将被删除的元素赋值给e</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L.length; j++) &#123;<span class="comment">//将第i个位置后的元素前移</span></span><br><span class="line">L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">&#125;</span><br><span class="line">L.length--;<span class="comment">////线性表长度减1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>时间复杂度<ol><li>最好情况：删除表尾元素（即i=n）,时间复杂度为O(1)</li><li>最坏情况：删除表头元素（即i=1），时间复杂度为O(n)</li><li>平均情况：移动结点的平均次数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，时间复杂度O(n)</li></ol></li></ol><h3 id="查找">查找</h3><p><strong>按位查找</strong></p><ol><li><code>GetElem(L,i)</code>：按位查找操作。获取表L中第i个位置的元素的值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem</span><span class="params">(SeqList L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>时间复杂度O(1)<ol><li>随机存取特性</li></ol></li></ol><p><strong>按值查找</strong></p><ol><li><code>LocateElem(L,e)</code>：按值查找操作。在表L中查找具有给定关键字值的元素</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LoacteElem</span><span class="params">(SqList L, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (L.data[i] == e) &#123;    <span class="comment">//&quot;==&quot;不可以用于比较两个结构体</span></span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;<span class="comment">//下标为i的元素值等于e，返回其位序i+1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//退出循环，说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>时间复杂度<ol><li>最好情况：查找的元素在表头，时间复杂度为O(1)</li><li>最坏情况：查找的元素在表尾（或不存在），时间复杂度为O(n)</li><li>平均情况：平均比较次数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n+1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，时间复杂度为O(n)</li></ol></li></ol><h2 id="单链表">单链表</h2><h3 id="定义-2">定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;<span class="comment">//定义单链表结点类型</span></span><br><span class="line"><span class="type">int</span> data;<span class="comment">//每个结点存放一个指针元素</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>* next;<span class="comment">//指针指向下一个结点</span></span><br><span class="line">&#125;LNode, * LinkList;</span><br></pre></td></tr></table></figure><ol><li>不带头结点的单链表</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList&amp; L)</span></span>&#123;</span><br><span class="line">L = <span class="literal">NULL</span>;<span class="comment">//空表，暂时没有任何结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>带头结点的单链表</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList&amp; L)</span> </span>&#123;</span><br><span class="line">L = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//分配一个头结点</span></span><br><span class="line"><span class="keyword">if</span> (L == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L -&gt; next = <span class="literal">NULL</span>;<span class="comment">//头结点之后暂时还没有结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入和删除-2">插入和删除</h3><p><strong>按位序插入（带头结点）</strong></p><ol><li><code>ListInsert(&amp;L,i,e)</code>：插入操作。在表L中的第i个位置上插入指定元素e</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;    <span class="comment">//指针p指向当前扫描的结点</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;    <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">p=L;    <span class="comment">//L指向头结点，头结点是第0个结点（不存储数据）</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;    <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;    <span class="comment">//i值不合法</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-next=s;    <span class="comment">//将结点s连到p之后</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按位序插入（不带头结点）</strong></p><ol><li><code>ListInsert(&amp;L,i,e)</code>：插入操作。在表L中的第i个位置上插入指定元素e</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;    <span class="comment">//插入第i个结点的操作与其他结点不同</span></span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=L;</span><br><span class="line">L=s;    <span class="comment">//头指针指向新结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br><span class="line">LNode *p;    <span class="comment">//指针p指向当前扫描的结点</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;    <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">p=L;    <span class="comment">//p指向第1个结点（不是头结点）</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;    <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;    <span class="comment">//i值不合法</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-next=s;    <span class="comment">//将结点s连到p之后</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定结点的后插操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在p结点之后插入元素e</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode *p, ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;    <span class="comment">//内存分配失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data=e;    <span class="comment">//用结点s保存数据元素e</span></span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;    <span class="comment">//将结点s连接到p之后</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定元素的前插操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在p结点之前插入元素e</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode *p, ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;    <span class="comment">//内存分配失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;    <span class="comment">//将结点s连接到p之后</span></span><br><span class="line">s-&gt;data=p-&gt;data;    <span class="comment">//将p中的元素复制到s中</span></span><br><span class="line">p-&gt;data=e;    <span class="comment">//p中元素覆盖为e</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按位序删除（带头结点）</strong></p><ol><li><code>ListDelete(&amp;L,i,&amp;e)</code>；删除操作，删除表L中第i个位置的元素，并用e返回元素的值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L，<span class="type">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;    <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;    <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">p=L;    <span class="comment">//L指向头结点，头结点是第0个结点 (不存数据)</span></span><br><span class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp; j&lt;i<span class="number">-1</span>)&#123;    <span class="comment">//循环找至第 i-1个结点</span></span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;    <span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next == <span class="literal">NULL</span>)&#123;    <span class="comment">//第i-1个结点之后已无其他结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">LNode *q=p-&gt;next;    <span class="comment">//令q指向被删除结点</span></span><br><span class="line">e = q-&gt;data;    <span class="comment">//用e返回元素的值</span></span><br><span class="line">p-&gt;next=q-&gt;next;    <span class="comment">//将*q结点从链中“断开”</span></span><br><span class="line"><span class="built_in">free</span>(q);    <span class="comment">//释放结点的存储空间</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">//删除成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定结点的删除</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定结点p</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span> <span class="params">(LNode *p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *q=p-&gt;next;    <span class="comment">//令q指向*p的后继结点</span></span><br><span class="line">p-&gt;data=p-&gt;next-&gt;data;    <span class="comment">//和后继结点交换数据域</span></span><br><span class="line">p-&gt;next=q-&gt;next;    <span class="comment">//将*q结点从链中“断开”</span></span><br><span class="line"><span class="built_in">free</span>(q);    <span class="comment">//释放后继结点的存储空间</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果p是最后一个结点，只能从表头开始寻找p的前驱，时间复杂度O(n)</p></blockquote><h3 id="查找-2">查找</h3><p><strong>按位查找</strong></p><ol><li><code>GetElem(L,i)</code>：按位查找操作。获取表L中第i个位置的元素的值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位查找，返回第i个元素（带头结点）</span></span><br><span class="line"><span class="function">LNode *<span class="title">GetElem</span><span class="params">(LinkList, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;    <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;    <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">p=L;    <span class="comment">//L指向头结点，头结点是第0个结点（不存储数据）</span></span><br><span class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;    <span class="comment">//循环找到第 i 个结点</span></span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>平均时间复杂度O(n)</li></ol><p><strong>按值查找</strong></p><ol><li><code>LocateElem(L,i)</code>：按值查找操作。在表L中查找具有给定关键字值的元素</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按值查找，找到数据域==e 的结点</span></span><br><span class="line"><span class="function">LNode * <span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">LNode *p = L-&gt;next;</span><br><span class="line"><span class="comment">//从第1个结点开始查找数据域为e的结点</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">return</span> p;    <span class="comment">//找到后返回该结点指针，否则返回NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>时间复杂度O(n)</li></ol><p><strong>求表的长度</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求表的长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;    <span class="comment">//统计表长</span></span><br><span class="line">LNode *p = L;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br></pre></td></tr></table></figure><ol start="2"><li>时间复杂度O(n)</li></ol><h3 id="建立">建立</h3><ol><li>尾插法</li><li>头插法</li></ol><h3 id="双链表">双链表</h3><ol><li>初始化</li><li>插入</li><li>删除</li><li>遍历</li></ol><h3 id="循环链表">循环链表</h3><ol><li>循环单链表：表尾结点的next指针指向头结点<ol><li>从一个结点出发可以找到其他任何一个结点</li></ol></li><li>循环双链表</li></ol><h3 id="静态链表">静态链表</h3><ol><li>概念：分配一整连续的内存空间，各个结点集中安置</li></ol><h3 id="顺序表和链表的比较">顺序表和链表的比较</h3><ol><li>逻辑结构<ol><li>都属于线性表，都是线性结构</li></ol></li><li>物理结构/存储结构<ol><li>顺序表<ol><li>优点：支持随机存取、存取密度高</li><li>缺点：大片连续空间分配不方便，改变容量不方便</li></ol></li><li>链表<ol><li>优点：离散的小空间分配方便、改变容量方便</li><li>缺点：不可随机存取、存取密度低</li></ol></li></ol></li><li>数据的运算/基本操作<ol><li>初始化<ol><li>顺序表：需要预分配大片连续空间若分配空间过小，则之后不方便拓展容量;若分配空间过大，则浪费内存资源<ol><li>静态分配：静态数组，容量不可改变</li><li>动态分配：动态数组（malloc、free），容量可改变，但需要移动大量元素，时间代价高</li></ol></li><li>链表：只需分配一个头结点 (也可以不要头结点，只声明一个头指针) ，之后方便拓展</li></ol></li><li>销毁<ol><li>顺序表：修改Length=0<ol><li>静态分配：系统自动回收空间</li><li>动态分配：需要手动free</li></ol></li><li>链表：依次删除各个结点(free)</li></ol></li><li>插入和删除<ol><li>顺序表：需要把后续元素后移/前移，若数据元素很大，则移动的时间代价很大</li><li>链表：修改指针</li></ol></li><li>查找<ol><li>顺序表<ol><li>按位查找：O(1)</li><li>按值查找：O(n)<ol><li>若表内元素有序，可在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>时间内找到</li></ol></li></ol></li><li>链表<ol><li>按位查找：O(n)</li><li>按值查找：O(n)</li></ol></li></ol></li></ol></li></ol><p><strong>开放式问题回答思路</strong></p><p><strong>问题：</strong> 请描述顺序表和链表的 bla bla bla… 实现线性表时，用顺序表还是链表好?</p><p>顺序表和链表的<strong>逻辑结构</strong>都是线性结构，都属于线性表但是二者的<strong>存储结构</strong>不同，顺序表采用顺序存储…(特点，带来的优点缺点): 链表采用链式存储…(特点、导致的优缺点)。由于采用不同的存储方式实现，因此<strong>基本操作</strong>的实现效率也不同。当初始化时…;当插入一个数据元素时…;当删除一个数据元素时…; 当查找一个数据元素时…</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「数据结构」绪论</title>
      <link href="/707467af21a0.html"/>
      <url>/707467af21a0.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构的研究内容">数据结构的研究内容</h2><ol><li>无法用数学的公式或方程来描述，是一些“非数值计算”的程序设计问题</li><li>描述非数值计算问题的数学模型的数学方程，而是诸如表、树和图之类的具有逻辑关系的数据</li><li>数据结构是一门研究非数值计算的程序设计中计算机的操作对象以及它们之间的关系和操作的学科</li></ol><h3 id="数据结构的基本概念">数据结构的基本概念</h3><p><strong>数据</strong></p><ol><li>定义：是能输入计算机且能被计算机处理的各种符号的集合<ol><li>信息的载体</li><li>是对客观事物符号化的表示</li><li>能够被计算机识别、存储和加工</li></ol></li><li>分类<ol><li>数值型数据：整数、实数等</li><li>非数值型数据：文字、图形、图像、声音等</li></ol></li></ol><p><strong>数据元素</strong></p><ol><li>定义：是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理</li><li>也简称元素，或称为记录、结点或顶点</li><li>一个数据元素可由若干数据项组成</li></ol><p><strong>数据项</strong></p><ol><li>构成数据元素不可分割的最小单位</li></ol><blockquote><p>数据、数据元素、数据项三者之间的关系：数据&gt;数据元素&gt;数据项<br>例：学生表&gt;个人记录&gt;学号、姓名<code>······</code></p></blockquote><p><strong>数据对象</strong></p><ol><li>定义：是数据相同的元素的集合，是数据的一个子集</li></ol><h3 id="数据结构的三要素">数据结构的三要素</h3><ol><li>数据结构包括以下三个方面的内容<ol><li>数据结构之间的逻辑关系，也称逻辑结构</li><li>数据元素及其关系在计算机内存中的表示（又称为映像），称为数据的物理结构或数据的存储结构</li><li>数据的运算和实现，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现</li></ol></li><li>数据结构的两个层次<ol><li>逻辑结构<ol><li>描述数据之间的逻辑关系</li><li>与数据的存储无关，独立于计算机</li><li>是从具体问题抽象出来的数学模型</li></ol></li><li>物理结构（存储结构）<ol><li>数据元素及其关系在计算机存储器中的结构（存储方式）</li><li>是数据结构在计算机中的表示</li></ol></li><li>逻辑结构与存储结构的关系<ol><li>存储结构是逻辑关系的映像与元素本身的映像</li><li>逻辑结构是数据结构的抽象，存储结构是数据结构的实现</li><li>两者综合起来建立了数据元素之间的结构关系</li></ol></li></ol></li><li>逻辑结构的种类<ol><li>划分方法一<ol><li>线性结构：有且只有一个开始和一个终端结点，并且所有结点都最多只有一个直接前驱和一个直接后继<ol><li>例如：线性表、栈、队列、串</li></ol></li><li>非线性结构：一个结点可能有多个直接前驱和直接后继<ol><li>例如：树、图</li></ol></li></ol></li><li>划分方法二——四类基本逻辑结构<ol><li>集合结构：结构中的数据元素之间除了同属一个集合的关系外，无任何其他关系</li><li>线性结构：结构中的数据元素之间存在着一对一的线性关系</li><li>树形结构：结构中的数据元素之间存在着一对多的层次关系</li><li>图状结构（网状结构）：结构中的数据元素之间存在着多对多的任意关系</li></ol></li></ol></li><li>存储结构的种类<ol><li>顺序存储结构<ol><li>用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系由元素的存储位置来表示</li><li>C语言中用数组来实现顺序存储结构</li></ol></li><li>链式存储结构<ol><li>用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示</li><li>C语言中用指针来实现链式存储结构</li></ol></li><li>索引存储结构<ol><li>在存储结点信息的同时，还建立附加的索引表</li></ol></li><li>散列存储结构<ol><li>根据结点的关键字之间计算出该结点的存储地址</li></ol></li></ol></li></ol><h3 id="数据类型和抽象数据类型">数据类型和抽象数据类型</h3><ol><li>数据类型的作用<ol><li>约束变量或常量的取值范围</li><li>约束变量或常量的操作</li></ol></li></ol><p><strong>数据类型</strong></p><ol><li>定义：数据类型是一组性质相同的值的集合以及定义于这个值集合上的一组操作的总称</li></ol><p><strong>抽象数据类型（ADT）</strong></p><ol><li>定义：是指一个数学模型以及定义在此数学模型上的一组操作<ol><li>由用户定义，从问题抽象出数学模型（逻辑结构）</li><li>还包括定义在数据模型上的一组抽象运算（相关操作）</li><li>不考虑计算机内的具体存储结构与运算的具体实现算法</li></ol></li><li>抽象数据类型的形式定义<ol><li>抽象数据类型可用(D,S,P)三元组表示<ol><li>D是数据对象</li><li>S是D上的关系集</li><li>P是对D的基本操作集</li></ol></li></ol></li><li>定义格式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ADT 抽象数据类型名&#123;</span><br><span class="line">数据对象:&lt;数据对象的定义&gt;</span><br><span class="line">数据关系:&lt;数据关系的定义&gt;</span><br><span class="line">基本操作:&lt;基本操作的定义&gt;</span><br><span class="line">&#125; ADT 抽象数据类型名</span><br></pre></td></tr></table></figure><ol start="4"><li>基本操作的定义格式<ol><li>参数表：赋值参数，只为操作提供输入值<ol><li>引用参数以<code>&amp;</code>打头，除可提供输入值外，还将返回操作结果</li></ol></li><li>初始条件：描述操作执行之前数据结构和参数应满足的条件，若不满足，则操作失败，并返回相应出错信息。若初始结果为空，则省略之</li><li>操作结果：说明操作正常完成之后，数据结构的变化状况和应返回的结果</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本操作名(参数表)</span><br><span class="line">初始条件:&lt;初始条件描述&gt;</span><br><span class="line">操作结果:&lt;操作结果描述&gt;</span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><ol><li>Circle的定义</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ADT Circle&#123;</span><br><span class="line">数据对象:D=&#123;r,x,y|r,x,y均为实数&#125;</span><br><span class="line">数据关系:R=&#123;&lt;r,x,y&gt;|r是半径,&lt;x,y&gt;是圆心坐标&#125;</span><br><span class="line">基本操作:</span><br><span class="line">Circle(&amp;C,r,x,y)</span><br><span class="line">操作结果：构造一个圆</span><br><span class="line">double Area(C)</span><br><span class="line">初始条件：圆已存在</span><br><span class="line">操作结果：计算面积</span><br><span class="line">double Circumference(C)</span><br><span class="line">初始条件：圆已存在</span><br><span class="line">操作结果：计算面积</span><br><span class="line">&#125; ADT Circle</span><br></pre></td></tr></table></figure><h3 id="抽象数据类型的表现与实现">抽象数据类型的表现与实现</h3><ol><li>用已有的数据类型定义描述它的存储结构</li><li>用函数定义描述它的操作</li></ol><p><strong>例</strong>：抽象数据类型“复数”的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">float</span> realpart;    <span class="comment">/*实部*/</span></span><br><span class="line"><span class="type">float</span> imagpart;    <span class="comment">/*虚部*/</span></span><br><span class="line">&#125; Complex;             <span class="comment">/*定义复数抽象类型*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">assign</span><span class="params">(Complex *A,<span class="type">float</span> real,<span class="type">float</span> imag)</span>&#123;</span><br><span class="line">A-&gt;realpart=real;    <span class="comment">/*实部赋值*/</span></span><br><span class="line">A-&gt;imagpart=imag;    <span class="comment">/*虚部赋值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法和算法分析">算法和算法分析</h2><h3 id="算法的基本概念">算法的基本概念</h3><ol><li>算法的定义：对特定问题求解方法和步骤的一种描述，它是指令的有限序列。其中每个指令表示一个或多个操作</li><li>算法的描述<ol><li>自然语言：英文、中文</li><li>流程图：传统流程图、NS流程图</li><li>伪代码：类C语言</li><li>程序代码：C、Java</li></ol></li><li>算法的特性<ol><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入：零个或多个输入</li><li>输出：一个或多个输出</li></ol></li><li>算法效率<ol><li>时间效率</li><li>空间效率</li><li>时间效率和空间效率之间有时候是矛盾的</li></ol></li></ol><h3 id="算法的时间复杂度">算法的时间复杂度</h3><ul><li>时间效率的度量<ul><li>事后统计</li><li>事前统计</li><li>执行一种简单操作（如赋值、比较、移动等）所需的时间与算法中进行简单操作次数的乘积</li><li>算法运行时间=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span></span></span></span>每条语句频度*单位时间</li></ul></li></ul><h3 id="算法的空间复杂度">算法的空间复杂度</h3><ol><li>算法原地工作：算法所需内存空间为常量</li><li>函数递归调用时，空间复杂度=递归调用的深度</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「计算机网络」数据链路层</title>
      <link href="/b4ff562c2d6b.html"/>
      <url>/b4ff562c2d6b.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>数据链路层的地位：网络中的主机、路由器等都必须实现数据链路层</li><li>信道类型<ul><li>点对点信道：使用一对一的点对点通信方式</li><li>广播信道<ul><li>使用一对多的广播通信方式</li><li>必须使用专用的共享信道协议来协调这些主机的数据发送</li></ul></li></ul></li></ul></blockquote><h2 id="使用点对点信道的数据链路层">使用点对点信道的数据链路层</h2><h3 id="数据链路和帧">数据链路和帧</h3><ol><li>链路：从一个节点到相邻节点的一段物理线路（有线或无线），中间没有其他交换节点</li><li>数据链路：把通信协议和软件加到链路中，如网络适配器</li><li>帧：数据链路层的协议数据单元</li></ol><h3 id="三个基本问题">三个基本问题</h3><ol><li>封装成帧<ol><li>在一段数据的前后分别添加首部和尾部，构成一个帧</li><li>首部和尾部的一个重要作用就是进行帧定界（即确定帧的界限）</li><li>最大传送单元 MTU：规定了所能传送的帧的数据部分长度上限</li><li>控制字符 SOH：放在一帧的最前面，表示帧的首部开始</li><li>控制字符 EOT：放在一帧的末尾，表示帧的结束</li></ol></li><li>透明传输<ol><li>含义：无论发送什么样的比特组合的数据，这些数据都能够按照原样<strong>没有差错</strong>地通过这个数据链路层</li><li>字节填充/字符填充：发送端的数据链路层在数据中的控制字符SOH/EOT前插入转义字符&quot;ESC&quot;（十六进制编码为1B，二进制为00011011）</li></ol></li><li>差错检测<ol><li>比特差错：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mn>0</mn><mtext>、</mtext></mrow><annotation encoding="application/x-tex">1\to0、</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">0</span><span class="mord cjk_fallback">、</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0\to1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>误码率BER：传输错误的比特占所传输比特总数的比率</li><li>循环冗余检测CRC<ol><li>在发送端，先把数据划分为组。假定每组 k 个比特</li><li>CRC 运算在每组 M 后面再添加供差错检测用的 n 位冗余码，然后构成一个帧发送出去。一共发送 (k + n) 位</li><li>帧检验序列 FCS：在数据后面添加上的冗余码</li><li>仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受</li></ol></li></ol></li></ol><h2 id="点对点协议PPP">点对点协议PPP</h2><h3 id="PPP协议的特点">PPP协议的特点</h3><ol><li>PPP协议应满足的需求<ol><li>简单：首要要求</li><li>封装成帧：必须使用特殊的字符作为帧定界符</li><li>透明性：如果数据中碰巧出现了和界定符一样的比特组合时，就要采取有效的措施来解决这个问题（详见3.2.2）</li><li>多种网络层协议：在同一条物理链路上同时支持多种网络层协议</li><li>多种类型链路：能够在多种类型的链路上运行</li><li>差错检测：对接收端收到的帧进行检测，并立即丢弃有差错的帧</li><li>检测连接状态：能够及时自动检测出链路是否处于正常工作状态</li><li>最大传送单元：必须对每一种类型的点对点链路设置最大传送单元 MTU 的标准默认值，促进各种实现之间的互操作性</li><li>网络层地址协商：必须提供一种机制使通信的两个网络层实体能够通过协商知道或能够配置彼此的网络层地址</li><li>数据压缩协商：必须提供一种方法来协商使用数据压缩算法</li></ol></li><li>PPP协议的组成<ol><li>一个将IP数据报封装到串行链路的方法</li><li>链路控制协议LCP</li><li>网络控制协议NCP</li></ol></li></ol><h3 id="PPP协议的帧格式">PPP协议的帧格式</h3><ol><li>各字段的意义<ol><li>标志字段F：0x7E，首部的第一个字段和尾部的第二个字段，标志一个帧的开始或结束，连续两帧之间只需要用一个标志字段</li><li>地址字段A：0xFF</li><li>控制字段C：0x03</li><li>协议字段<ol><li>0x00221：PPP帧的信息字段为IP数据报</li><li>0xC021：信息字段是PPP链路控制协议LCP的数据</li><li>0x8021：网络层控制数据</li></ol></li><li>尾部第一个字段：使用CRC的帧检测序列FCS</li></ol></li><li>字节填充<ol><li>当PPP使用异步传输时，把转义字符定义为0x7D，使用字节填充</li><li>把每个0x7E字节转变为2字节序列（0x7D，0x5E）</li><li>把每个0x7D字节转变为2字节序列（0x7D，0x5D）</li><li>在每个ASCLL控制字符（数值小于0x20）前加入一个0x7D字节</li></ol></li><li>零比特填充<ol><li>当PPP使用同步传输时，使用零比特填充</li><li>5个连续1后填入0</li></ol></li></ol><h3 id="PPP协议的工作状态">PPP协议的工作状态</h3><h2 id="使用广播信道的数据链路层">使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层">局域网的数据链路层</h3><ol><li>局域网的主要特点<ol><li>网络为一个单位所拥有</li><li>地理范围和站点数目均有限</li></ol></li><li>局域网的主要优点<ol><li>具有广播功能，从一个站点可很方便地访问全网</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变</li><li>提高了系统的可靠性、可用性和生存性</li></ol></li><li>局域网按网络拓扑分类<ol><li>星形网：由于集线器的出现和双绞线大量用于局域网中，星形以太网/多级星形结构的以太网获得广泛应用</li><li>环形网</li><li>总线网</li></ol></li><li>媒体共享技术<ol><li>静态划分信道<ol><li>频分复用、时分复用、波分复用、码分复用</li></ol></li><li>动态媒体接入控制（多点接入）<ol><li>随机接入：所有用户可随机地发送信息</li><li>受控接入：用户必须服从一定的控制，如探询（轮询）</li></ol></li></ol></li><li>以太网的两个主要标准<ol><li>DIX Ethernet V2：世界上第一个局域网产品的规约</li><li>IEEE 802.3：第一个IEEE的以太网标准</li><li>局域网数据链路层<ol><li>逻辑链路控制LLC：与传输媒体无关</li><li>媒体接入控制MAC：与传输媒体有关</li></ol></li></ol></li><li>适配器的作用<ol><li>计算机与外界局域网的连接是通过适配器</li><li>重要功能<ol><li>进行串行/并行转换</li><li>对数据进行缓存</li><li>在计算机的操作系统安装设备驱动程序</li><li>实现以太网协议</li></ol></li></ol></li></ol><h3 id="CSMA-CD协议">CSMA/CD协议</h3><ol><li>最早的以太网：计算机连接到一根总线上</li><li>总线<ol><li>优点：易于实现广播通信，简单、可靠</li><li>缺点：多个站点同时发送时，会产生发送碰撞或冲突，导致发送失败</li></ol></li><li>为通信的方便，以太网采取了两种措施<ol><li>采用较为灵活的无连接的工作方式<ol><li>不必先建立连接就可以直接发送数据</li><li>对发送的数据帧不进行编号，也不要求对方发回确认</li></ol></li><li>以太网发送的数据都使用曼彻斯特编码的信号<ol><li>缺点：所占的频带宽度比原始的基带信号增加了一倍</li></ol></li></ol></li><li>CSMA/CD协议（载波监听多点接入/碰撞检测）<ol><li>多点接入：总线型网络</li><li>载波监听：即“边发送边监听”。不管在想要发送数据之前，还是在发送数据之中，每个站都必须不停地检测信道</li><li>碰撞检测：适配器边发送数据，边检测信道上的信号电压的变化情况。电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞（或冲突）</li><li>电磁波在1km的电缆的传播时延约为5μs</li><li>争用期（碰撞窗口）<ol><li>以太网的端到端往返时延 2τ（τ为单程端到端的传播时延）</li><li>具体争用期时间为51.2μs<ol><li>10Mbit/s的以太网</li><li>以太网最大端到端单程时延必须小于争用期的一半 (即 25.6 μs)，相当于以太网的最大端到端长度约为 5 km</li></ol></li></ol></li><li>碰撞后的重传机制<ol><li>采用截断二进制指数退避确定</li><li>发生碰撞的站停止发送数据后，要退避一个随机时间后再发送数据</li><li>基本退避时间2τ</li><li>从整数集合<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 1, … , (2^k - 1)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span></span></span></span> 中随机地取出一个数，记为 r</li><li>重传所需的时延 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>∗</mo><mtext>基本退避时间</mtext></mrow><annotation encoding="application/x-tex">r*基本退避时间</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">基本退避时间</span></span></span></span></li><li>参数 k = Min[重传次数, 10]</li><li>当重传达 16 次仍不能成功时即丢弃该帧，并向高层报告</li></ol></li><li>强化碰撞：人为干扰信号<ol><li>发送站检测到冲突后，立即停止发送数据帧，接着就发送 32 或 48 比特的人为干扰信号</li><li>以太网还规定了帧间最小间隔为 9.6 μs</li></ol></li></ol></li></ol><h3 id="使用集线器的星形拓扑">使用集线器的星形拓扑</h3><ol><li>每个站到集线器的距离不超过100 m</li><li>特点<ol><li>使用电子器件来模拟实际电缆线的工作，因此整个系统仍然像一个传统的以太网那样运行，使用集线器的以太网在逻辑上仍是一个总线网，各工作站使用的还是 CSMA/CD 协议，并共享逻辑上的总线，同一时刻至多只允许一个站发送数据</li><li>很像一个多端口的转发器</li><li>工作在物理层，每个端口仅仅简单地转发比特，不进行碰撞检测</li><li>采用了专门芯片，进行自适应串音回波抵消，减少了近端串音</li></ol></li></ol><h3 id="以太网的信道利用率">以太网的信道利用率</h3><ol><li>成功发送一个帧需要占用信道的时间是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>0</mn></msub><mo>+</mo><mi>τ</mi></mrow><annotation encoding="application/x-tex">T_0 + τ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> ，比帧的发送时间要多一个单程端到端时延 τ</li><li>要提高以太网的信道利用率，就必须减小 τ  与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">T_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 之比</li><li>在以太网中定义了参数 a 以太网单程端到端时延  τ 与帧的发送时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">T_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 之比：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mi>τ</mi><mi mathvariant="normal">/</mi><msub><mi>T</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a=τ/T_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a \to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，表示一发生碰撞就立即可以检测出来， 并立即停止发送，因而信道利用率很高</li><li>a 越大，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得信道利用率明显降低</li><li>为提高利用率，以太网的参数 a 的值应当尽可能小些</li><li>当数据率一定时，以太网的连线的长度受到限制，否则 t  的数值会太大</li><li>以太网的帧长不能太短，否则 T0 的值会太小，使 a 值太大</li></ol></li><li>极限信道利用率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mfrac><msub><mi>T</mi><mn>0</mn></msub><mrow><msub><mi>T</mi><mn>0</mn></msub><mo>+</mo><mi>τ</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_{max}=\frac{T_0}{T_0+τ}=\frac{1}{1+a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3335em;vertical-align:-0.4451em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.1132em;">τ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><ol><li>只有当参数 a 远小于 1 才能得到尽可能高的极限信道利用率</li></ol></li></ol><h3 id="以太网的MAC层">以太网的MAC层</h3><ol><li>MAC层的硬件地址<ol><li>硬件地址又称物理地址，或MAC地址</li><li>IEEE 802 标准为局域网规定了一种 48 位的全球地址（简称为地址）<ol><li>IEEE 注册管理机构 RA 负责向厂家分配前 3 个字节 (即高 24 位)，称为组织唯一标识符 OUI（公司标识符）</li><li>厂家自行指派后 3 个字节 (即低 24 位)，称为扩展标识符</li><li>必须保证生产出的适配器没有重复地址</li><li>地址被固化在适配器的 ROM 中</li></ol></li><li>IEEE 规定地址字段的第 1 字节的最低位为 I/G 位<ol><li>单个站地址：I/G 位 = 0</li><li>组地址：I/G 位 = 1，用来进行多播</li><li>广播地址：所有 48 位都为 1（全 1）。只能作为目的地址使用</li></ol></li><li>IEEE 把地址字段第 1 字节的最低第 2 位规定为 G/L  位<ol><li>全球管理：G/L 位 = 0，厂商向 IEEE 购买的 OUI 都属于全球管理</li><li>本地管理：G/L 位 = 1，这时用户可任意分配网络上的地址</li></ol></li><li>适配器具有过滤功能<ol><li>每收到一个 MAC 帧，先用硬件检查帧中的 MAC 地址</li><li>如果是发往本站的帧则收下，然后再进行其他的处理<ol><li>发往本站的帧<ol><li>单播帧（一对一）</li><li>广播帧（一对全体）</li><li>多播帧（一对多）</li></ol></li></ol></li><li>否则就将此帧丢弃，不再进行其他的处理</li><li>以混杂方式工作的以太网适配器只要“听到”有帧在以太网上传输就都接收下来</li></ol></li></ol></li><li>MAC帧的格式<ol><li>常用的以太网 MAC 帧格式<ol><li>DIX Ethernet V2 标准</li><li>IEEE 的 802.3 标准</li></ol></li><li><img src="https://raw.githubusercontent.com/ZhouBinxin/picture/main/202305071756129.png" alt=""><ol><li>目的地址：6字节</li><li>源地址：6字节</li><li>类型：2字节，用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据上交给上一层的这个协议</li><li>数据（MAC 客户数据）：46-1500字节<ol><li>当数据字段的长度小于 46 字节时，应在数据字段的后面加入整数字节的填充字段，以保证以太网的 MAC 帧长不小于 64 字节</li></ol></li><li>FCS：4字节</li><li>由硬件在帧的前面插入 8 字节。第一个字段共 7 个字节，是前同步码，用来迅速实现 MAC 帧的比特同步。第二个字段 1 个字节是帧开始定界符，表示后面的信息就是 MAC 帧</li></ol></li><li>无效的MAC帧<ol><li>数据字段的长度与长度字段的值不一致</li><li>帧的长度不是整数个字节</li><li>用收到的帧检验序列 FCS 查出有差错</li><li>数据字段的长度不在 46 ~ 1500 字节之间</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间</li></ol><ul><li>对于检查出的无效 MAC 帧就简单地丢弃</li><li>以太网不负责重传丢弃的帧</li></ul></li><li>IEEE 802.3 MAC 与以太网 V2 MAC 帧格式的区别<ol><li><img src="https://raw.githubusercontent.com/ZhouBinxin/picture/main/202305071806831.png" alt=""></li><li>当“长度/类型”字段值大于 0x0600 时，表示“类型”；小于 0x0600 时，表示“长度”</li><li>当“长度/类型”字段值小于 0x0600 时，数据字段必须装入逻辑链路控制 LLC 子层的 LLC 帧</li><li>在 802.3 标准的文档中，MAC 帧格式包括了 8 字节的前同步码和帧开始定界符</li></ol></li></ol></li></ol><h2 id="扩展的以太网">扩展的以太网</h2><h3 id="在物理层扩展以太网">在物理层扩展以太网</h3><ol><li>使用光纤扩展<ol><li>主机使用光纤和一对光纤解调器连接到集线器</li></ol></li><li>使用集线器扩展<ol><li>用多个集线器连成更大的以太网</li><li>优点<ol><li>使原来属于不同碰撞域（冲突域）的计算机能够跨碰撞域通信</li><li>扩大了以太网覆盖的地理范围</li></ol></li><li>缺点<ol><li>碰撞域增大了，总的吞吐量未提高</li><li>如果使用不同的以太网技术（如数据率不同），那么就不能用集线器将它们互连起来</li></ol></li></ol></li></ol><h3 id="在数据链路层扩展以太网">在数据链路层扩展以太网</h3><ul><li>早期使用网桥，现在使用以太网交换机<ol><li>网桥：根据 MAC 帧的目的地址对收到的帧进行转发和过滤。或者转发，或者丢弃</li><li>以太网交换机：多端口的网桥；可明显地提高以太网的性能</li></ol></li></ul><ol><li>以太网交换机的特点<ol><li>实质上是一个多接口网桥：通常有十几个或更多的接口</li><li>每个接口都直接与一个单台主机或另一个以太网交换机相连，并且一般都工作在全双工方式</li><li>以太网交换机具有并行性<ol><li>能同时连通多对接口，使多对主机能同时通信</li><li>相互通信的主机都独占传输媒体，无碰撞地传输数据</li><li>每一个端口和连接到端口的主机构成了一个碰撞域</li></ol></li><li>接口有存储器，能在输出端口繁忙时把到来的帧进行缓存</li><li>即插即用。其内部的帧交换表（又称为地址表）是通过自学习算法自动地逐渐建立起来的。这种交换表就是一个内容可寻址存储器CAM</li><li>使用专用的交换结构芯片，用硬件转发，其转发速率要比使用软件转发的网桥快很多</li></ol></li><li>以太网交换机的自学习功能<br>2. 消除回路：生成树协议STP<br>1. 不改变网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而消除了兜圈子现象</li><li>从总线以太网到星形以太网<ol><li>早期<ol><li>采用无源的总线结构</li><li>使用CSMA/CD协议，以半双工方式工作</li></ol></li><li>现在<ol><li>以太网交换机为中心的星形结构</li><li>不使用共享总线，没有碰撞问题，不使用 CSMA/CD 协议，以全双工方式工作。但仍然采用以太网的帧结构</li></ol></li></ol></li></ol><h3 id="虚拟局域网">虚拟局域网</h3><ol><li>以太网存在的问题<ol><li>广播风暴：一个以太网是一个广播域，交换机之间的冗余链路形成广播风暴</li><li>安全问题：交换机每个接口都处于一个独立的碰撞域（或冲突域）中，但所有计算机都处于同一个广播域中</li><li>管理困难</li></ol></li><li>虚拟局域网VLAN<ol><li>利用以太网交换机可以很方便地实现虚拟局域网 VLAN</li><li>IEEE 802.1Q 对虚拟局域网 VLAN 的定义：虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN</li><li>虚拟局域网其实只是局域网给用户提供的一种服务，并不是一种新型局域网</li></ol></li><li>虚拟局域网优点<ol><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ol></li><li>划分虚拟局域网的方法<ol><li>基于交换机端口<ol><li>最简单、也是最常用的方法</li><li>属于在第 1 层划分虚拟局域网的方法</li><li>缺点：不允许用户移动</li></ol></li><li>基于计算机网卡的 MAC 地址<ol><li>根据用户计算机的 MAC 地址划分虚拟局域网</li><li>属于在第 2 层划分虚拟局域网的方法</li><li>允许用户移</li><li>缺点：需要输入和管理大量的 MAC 地址。如果用户的 MAC 地址改变了，则需要管理员重新配置VLAN</li></ol></li><li>基于协议类型<ol><li>根据以太网帧的第三个字段“类型”确定该类型的协议属于哪一个虚拟局域网</li><li>属于在第 2 层划分虚拟局域网的方法</li></ol></li><li>基于 IP 子网地址<ol><li>根据以太网帧的第三个字段“类型”和 IP 分组首部中的源 IP 地址字段确定该 IP 分组属于哪一个虚拟局域网</li><li>属于在第 3 层划分虚拟局域网的方法</li></ol></li><li>基于高层应用或服务<ol><li>根据高层应用或服务、或者它们的组合划分虚拟局域网</li><li>更加灵活，但更加复杂</li></ol></li></ol></li></ol><h2 id="高速以太网">高速以太网</h2><h3 id="100BASE-T-以太网（快速以太网）">100BASE-T 以太网（快速以太网）</h3><ol><li>在双绞线上传送 100 Mbit/s 基带信号的星形拓扑以太网</li><li>仍使用 IEEE 802.3 的 CSMA/CD 协议</li><li>1995 定为正式标准：IEEE 802.3u</li><li>特点<ol><li>可在全双工方式下工作而无冲突发生</li><li>在全双工方式下工作时，不使用 CSMA/CD 协议</li><li>使用 IEEE 802.3 协议规定的 MAC 帧格式</li><li>保持最短帧长不变，但将一个网段的最大电缆长度减小到 100 米</li><li>帧间时间间隔从原来的 9.6 ms 改为现在的 0.96 ms</li></ol></li></ol><h3 id="吉比特以太网">吉比特以太网</h3><ol><li>特点<ol><li>允许在 1 Gbit/s 下以全双工和半双工 2 种方式工作</li><li>使用 IEEE 802.3 协议规定的 MAC 帧格式</li><li>在半双工方式下使用 CSMA/CD 协议，而在全双工方式不使用 CSMA/CD 协议</li><li>与 10BASE-T 和 100BASE-T 技术向后兼容</li></ol></li><li>吉比特以太网的物理层<ol><li>自有以太网</li><li>美国国家标准协会ANSI制定的光纤通道FC</li></ol></li><li>半双工方式工作的吉比特以太网<ol><li>半双工时采用 CSMA/CD，必须进行碰撞检测</li><li>为保持 64 字节最小帧长度，以及 100 米的网段的最大长度，增加了 2 个功能<ol><li>载波延伸：将争用时间增大为 512 字节。凡发送的 MAC 帧长不足 512 字节时，就用一些特殊字符填充在帧的后面</li><li>分组突发：当很多短帧要发送时，第 1 个短帧采用载波延伸方法进行填充，随后的一些短帧则可一个接一个地发送，只需留有必要的帧间最小间隔即可。这样就形成可一串分组的突发，直到达到 1500 字节或稍多一些为止</li></ol></li></ol></li></ol><h3 id="10吉比特以太网（10GbE）和更快的以太网">10吉比特以太网（10GbE）和更快的以太网</h3><ol><li>特点<ol><li>万兆比特</li><li>与 10、100 Mbit/s 和 1 Gbit/s 以太网的帧格式完全相同</li><li>保留了 IEEE 802.3 标准规定的以太网最小和最大帧长</li><li>只使用光纤作为传输媒体</li><li>只工作在全双工方式，没有争用问题，不使用 CSMA/CD 协议</li></ol></li><li>端到端的以太网传输<ol><li>以太网的工作范围已经扩大到城域网和广域网，实现了端到端的以太网传输</li><li>好处<ol><li>技术成熟</li><li>互操作性很好</li><li>在广域网中使用以太网时价格便宜</li><li>采用统一的以太网帧格式，简化了操作和管理</li></ol></li></ol></li></ol><h3 id="使用以太网进行宽带接入">使用以太网进行宽带接入</h3><ol><li>特点<ol><li>可以提供双向的宽带通信</li><li>可以根据用户对带宽的需求灵活地进行带宽升级</li><li>可以实现端到端的以太网传输，中间不需要再进行帧格式的转换</li><li>不支持用户身份鉴别</li></ol></li><li>PPPoE<ol><li>在以太网上运行 PPP</li><li>将 PPP 帧封装到以太网中来传输</li><li>现在的光纤宽带接入 FTTx 都要使用 PPPoE 的方式进行接入</li><li>利用 ADSL 进行宽带上网时，从用户个人电脑到家中的 ADSL 调制解调器之间的连接也使用 RJ-45 和 5 类线，也使用 PPPoE</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「计算机网络」物理层</title>
      <link href="/0040b9d7fa53.html"/>
      <url>/0040b9d7fa53.html</url>
      
        <content type="html"><![CDATA[<h2 id="物理层的基本概念">物理层的基本概念</h2><ol><li>物理层的作用：尽可能屏蔽掉不同传输媒体和通信手段的差异</li><li>物理层规程：用于物理层的协议</li><li>主要任务：确定与传输媒体的接口有关的一些特性<ol><li>机械特性</li><li>电器特性</li><li>功能特性</li><li>过程特性</li></ol></li></ol><h2 id="数据通信的基础知识">数据通信的基础知识</h2><h3 id="数据通信系统的模型">数据通信系统的模型</h3><ol><li>划分为三大部分<ol><li>源系统（发送端、发送方）<ol><li>源点（源站或信源）：源点设备产生要传输的数据</li><li>发送器：调制器</li></ol></li><li>传输系统（传输网络）</li><li>目的系统（接收端、接收方）<ol><li>接收器：解调器</li><li>终点（目的站或信宿）</li></ol></li></ol></li><li>常用术语<ol><li>消息：语音、文字、图像、视频等</li><li>数据：运送消息的实体，通常是有意义的符号序列</li><li>信号：数据的电气或电磁的表现<ol><li>模拟信号（连续信号）：代表消息的参数的取值是连续的</li><li>数字信号（离散信号）：代表消息的参数的取值是离散的</li></ol></li><li>码元：在使用时间域（简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形</li></ol></li></ol><h3 id="有关信道的几个基本概念">有关信道的几个基本概念</h3><ol><li>信道：一般用来表示向某一个方向传送信息的媒体</li><li>单向通信（单工通信）：只能有一个方向的通信而没有反方向的交互</li><li>双向交替通信（半双工通信）：通信的双方都可以发送信息，但不能双方同时发送（接收）</li><li>双向同时通信（全双工通信）：通信的双方可以同时发送和接收信息</li><li>基带信号（基本频带信号）<ol><li>来自信源的信号</li><li>包含较多的低频分量，甚至有直流分量</li></ol></li><li>调制<ol><li>基带调制：仅对基带信号的波形进行变换，把数字信号转换为另一种形式的数字信号。把这种过程称为编码</li><li>带通调制：使用载波进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号。经过载波调制后的信号称为带通信号（即仅在一段频率范围内能够通过信道）</li></ol></li><li>常用编码方式<ol><li>不归零制：正电平代表 1，负电平代表 0</li><li>归零制：正脉冲代表 1，负脉冲代表 0</li><li>曼彻斯特编码：位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义</li><li>差分曼彻斯特编码：在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1</li></ol></li><li>基本的带通调制方式<ol><li>调幅（AM）</li><li>调频（FM）</li><li>调相（PM）</li></ol></li></ol><h3 id="信道的极限容量">信道的极限容量</h3><ol><li>信道能够通过的频率范围<ol><li>奈氏准则：码元传输的最高速率 = 2W （码元/秒）</li></ol></li><li>信噪比<ol><li>信噪比就是信号的平均功率和噪声的平均功率之比。常记为 S/N，并用分贝 (dB) 作为度量单位。即：<ol><li>信噪比(dB) = 10 log10(S/N ) (dB)</li></ol></li><li>香农公式<ol><li>信道的极限信息传输速率 C  可表达为：C = W log2(1+S/N)  (bit/s)<ol><li>W 信道的带宽 (Hz)</li><li>S  为信道内所传信号的平均功率</li><li>N 为信道内部的高斯噪声功率</li></ol></li></ol></li></ol></li></ol><h2 id="物理层下面的传输媒体">物理层下面的传输媒体</h2><ul><li>传输媒体是数据传输系统中在发送器和接收器之间的物理通路</li></ul><h3 id="导引型传输媒体">导引型传输媒体</h3><ul><li>电磁波被导引沿着固体媒体（铜线或光纤）传播</li></ul><ol><li>双绞线<ol><li>绞合度越高，可用的数据传输率越高</li><li>分类<ol><li>无屏蔽双绞线UTP</li><li>屏蔽双绞线STP<ul><li>必须有接地线</li></ul></li></ol></li></ol></li><li>同轴电缆<ol><li>具有很好的抗干扰特性，被广泛用于传输较高速率的数据</li></ol></li><li>光缆<ol><li>发送端：要有光源，在电脉冲的作用下能产生出光脉冲<ol><li>光源：发光二极管，半导体激光器等。</li></ol></li><li>接收端：要有光检测器，利用光电二极管做成，在检测到光脉冲时还原出电脉冲</li></ol></li></ol><h3 id="非导引型传输媒体">非导引型传输媒体</h3><ul><li>指自由空间。非导引型传输媒体中电磁波的传输常称为无线传输</li></ul><ol><li>无线电信微波通信<ol><li>占有特殊的重要地位</li><li>微波再空间中主要是直线传播</li></ol></li><li>多径效应：基站发出的信号可以经过多个障碍物的数次反射，从多条路径、按不同时间等到达接收方。多条路径的信号叠加后一般都会产生很大的失真</li><li>微波接力：中继站把前一站送来的信号放大后再发送到下一站。</li></ol><h2 id="信道复用技术">信道复用技术</h2><h3 id="频分复用、时分复用和统计时分复用">频分复用、时分复用和统计时分复用</h3><ul><li>复用：允许用户使用一个共享信道进行通信</li></ul><ol><li>频分复用FDM<ol><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带</li><li>所有用户在同样的时间占用不同的带宽（即频带）资源</li></ol></li><li>时分复用TDM<ol><li>将时间划分为一段段等长的时分复用帧（TDM帧）</li><li>每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙</li><li>每一个用户所占用的时隙是周期性地出现（其周期就是TDM帧的长度）</li><li>TDM 信号也称为等时信号</li><li>所有用户在不同的时间占用同样的频带宽度</li><li>时分复用会导致信道利用率不高</li></ol></li><li>频分多址和时分多址<ol><li>可让 N 个用户各使用一个频带，或让更多的用户轮流使用这 N 个频带。这种方式称为频分多址接入 FDMA，简称为频分多址</li><li>可让 N 个用户各使用一个时隙，或让更多的用户轮流使用这 N 个时隙。这种方式称为时分多址接入 TDMA ，简称为时分多址</li></ol></li><li>复用器和分用器<ol><li>成对使用</li></ol></li><li>统计时分复用STDM<ol><li>STDM 帧不是固定分配时隙，而是按需动态地分配时隙，因此可以提高线路的利用率。</li></ol></li></ol><h3 id="波分复用">波分复用</h3><ol><li>波分复用WDM<ol><li>光的频分复用。使用一根光纤来同时传输多个光载波信号</li><li>在一根光线上复用两路光载波信号</li></ol></li><li>密集波分复用DWDM<ol><li>在一根光线上复用更多的光载波信号</li></ol></li></ol><h3 id="码分复用">码分复用</h3><ol><li>码分复用<ol><li>每一个用户可以在同样的时间使用同样的频带进行通信</li><li>各用户使用经过特殊挑选的不同码型，因此不会造成干扰</li><li>当码分复用 CDM 信道为多个不同地址的用户所共享时，就称为码分多址 CDMA</li></ol></li><li>CMDA工作原理<ol><li>将每一个比特时间划分为 m 个短的间隔，称为码片</li><li>为每个站指派一个唯一的 m bit 码片序列<ol><li>发送比特 1：发送自己的 m bit 码片序列</li><li>发送比特 0：发送该码片序列的二进制反码</li></ol></li></ol></li><li>码片序列实现了扩频<ol><li>要发送信息的数据率 = b bit/s，实际发送的数据率 = mb bit/s，同时，所占用频带宽度也提高到原来的 m 倍。</li><li>扩频通常有 2 大类<ol><li>直接序列扩频 DSSS</li><li>跳频扩频 FHSS</li></ol></li></ol></li><li>CMDA重要特点<ol><li>每个站分配的码片序列：各不相同，且必须互相正交</li><li>正交：向量 S 和 T 的规格化内积 (inner product) 等于 0<ol><li>S表示站S的码片向量</li><li>T表示其他任何站的码片向量</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>∗</mo><mi>T</mi><mo>≡</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>m</mi></mfrac></mstyle><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>S</mi><mi>i</mi></msub><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S*T≡\dfrac{1}{m}\sum_{i=1}^mS_iT_i=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></li></ol></li><li>任何一个码片向量和该码片向量自己的规格化内积都是 1<ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>∗</mo><mi>S</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S*S=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ol></li><li>一个码片向量和该码片反码的向量的规格化内积值是 –1<ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>∗</mo><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S*\overline S=-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span></li></ol></li></ol></li></ol><h2 id="数字传输系统">数字传输系统</h2><ol><li>早期电话网长途干线采用频分复用 FDM 的模拟传输方式，目前大都采用时分复用 PCM 的数字传输方式</li><li>早期数字传输系统的缺点<ol><li>速率标准不统一</li><li>不是同步传输<ol><li>采用准同步方式</li></ol></li></ol></li><li>同步光纤网SONET<ol><li>整个网络的各级时钟来自一个非常精确的时钟</li><li>定义了同步传输的线路速率等级结构<ol><li>传输速率以51.840Mbit/s为基础。对电信号称为第1级同步传送信号（STS-1），对光信号称为第1级光载波（OC-1）</li><li>现已定义了从 51.84 Mbit/s (即 OC-1) 到 9953.280 Mbit/s (即 OC-192/STS-192) 的标准</li></ol></li></ol></li><li>同步数字系列SDH’<ol><li>由ITU-T(国际电联电信标准化部门)以美国标准SONET制定</li><li>SDH的基本速率大概为155.520Mbit/s，称为第1级同步传递模块（STM-1）</li></ol></li><li>SONET/SDH标准的意义<ol><li>定义了标准光信号</li><li>再物理层定义了帧结构</li><li>使北美、日本和欧洲这三个地区三种不同的数字传输体制在 STM-1 等级上获得了统一</li><li>已成为公认的新一代理想的传输网体制</li><li>SDH 标准也适合于微波和卫星传输的技术体制</li></ol></li></ol><h2 id="宽带接入技术">宽带接入技术</h2><h3 id="ADSL技术">ADSL技术</h3><ol><li>非对称数字用户线ADSL技术：用数字技术对现有模拟电话的用户线进行改造，使它能够承载宽带数字业务</li><li>ADSL调制解调器<ol><li>离散多音调DMT调制技术：采用频分复用的方法</li><li>ADSL不能保证固定的数据率</li></ol></li><li>组成<ol><li>数字用户接入复用器DSLAM、用户线、用户家中的一些设施</li><li>ADSL调制解调器又称接入端接单元ATU<ol><li>电话端局所用的称为ATU-C（C代表端局）</li><li>用户家中所用的称为ATU-R（R代表远端）</li></ol></li><li>用户电话通过电话分离器和ATU-R连接在一起</li></ol></li><li>优点：可以利用现有电话网中的用户线（铜线），而不需要重新布线</li><li>xDSL<ol><li>对称数字用户线DSL（SDSL）：适合企业使用</li><li>高速数字用户线HDSL：使用一对线或两对线的对称DSL</li><li>甚高速数字用户线（VDSL）：用于短距离传送</li><li>超高速数字用户线（Giga DSL）：使用时分双工 TDD 和 OFDM 技术</li></ol></li></ol><h3 id="光纤同轴混合网（HFC网）">光纤同轴混合网（HFC网）</h3><ol><li>机顶盒<ol><li>连接在同轴电缆和用户的电视机之间</li><li>使现有的模拟电视机能够接收数字电视信号</li></ol></li><li>电缆调制解调器<ol><li>将用户计算机接入互联网</li><li>在上行信道中传送交互数字电视所需的一些信息</li><li>不需要成对使用，而只需安装在用户端</li><li>复杂，必须解决共享信道中可能出现的冲突问题</li></ol></li></ol><h3 id="FTTx技术">FTTx技术</h3><ol><li>光配线网ODN<ol><li>使若干用户共享一根光纤干线</li><li>l采用波分复用 WDM，上行和下行分别使用不同的波长</li></ol></li><li>无源光网络PON：无源光配线网<ol><li>以太网无源光网络 EPON<ol><li>在链路层使用以太网协议，利用 PON 的拓扑结构实现以太网的接入</li><li>与现有以太网的兼容性好，并且成本低，扩展性强，管理方便</li></ol></li><li>吉比特无源光网络 GPON<ol><li>采用通用封装方法 GEM，可承载多业务，且对各种业务类型都能够提供服务质量保证，总体性能比EPON好</li><li>成本稍高</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「计算机网络」概论</title>
      <link href="/cd6b801fb65d.html"/>
      <url>/cd6b801fb65d.html</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络在信息时代中的作用">计算机网络在信息时代中的作用</h2><h3 id="计算机网络的定义">计算机网络的定义</h3><ol><li>21世纪的一些重要特征就是数字化、网络化和信息化，是一个以网络为核心的信息时代</li><li>互连网（internet）：仅在局部范围互联起来的计算机网络，多个网络通过一些路由器相互连接，互连网≠互联网</li><li>互联网（Internet）：指全球最大的、开放的、由众多网络相互连接而成的特定互连网，采用TCP/IP协议族作为通信的规则，前身是美国的ARPANET</li></ol><h3 id="计算机网络的特点">计算机网络的特点</h3><ol><li>连通性<ul><li>使上网用户之间可以非常便捷、非常经济地交换各种信息</li><li>好像这些用户终端都彼此直接连通一样</li></ul></li><li>共享（资源共享）<ul><li>实现信息共享、软件共享、硬件共享</li><li>由于网络的存在，这些资源好像就在用户身边一样地方便使用</li></ul></li></ol><h2 id="互联网概述">互联网概述</h2><h3 id="网络的网络">网络的网络</h3><ol><li>计算机网络（简称网络）：由若干节点和连接这些节点的链路组成</li><li>节点：计算机、集线器、交换机或路由器等</li></ol><h3 id="互联网基础结构发展的三个阶段">互联网基础结构发展的三个阶段</h3><ol><li>1969-1990<ol><li>ARPANET：最初只是一个单个的任务交换网，不是一个互联网</li><li>1983年TCP/IP协议成为ARPANET上的标准协议，使得所有使用TCP/IP协议的计算机都能利用互连网相互通信。人们把1983年作为互联网的诞生时间</li><li>1990年ARPANET正式宣布关闭</li></ol></li><li>1985-1993<ol><li>建成了三级结构的互联网：主干网、地区网和校园网（或企业网）</li></ol></li><li>1933-现在<ol><li>形成了全球范围的多层次ISP结构的互联网<ul><li>主干ISP</li><li>地区ISP</li><li>本地ISP</li></ul></li><li>互联网服务提供者ISP<ul><li>提供接入互联网的服务</li><li>需要收取一定的费用</li></ul></li><li>互联网交换点IXP<ul><li>允许两个网络直接相连并交换分组</li><li>常采用工作在数据链路层的网络交换机</li></ul></li><li>内容提供者<ul><li>在互联网上向所有用户提供视频文件的公司</li><li>不向用户提供互联网的转接服务</li></ul></li><li>万维网（WWW）<ul><li>由欧洲原子核研究组织开发</li><li>成为互联网指数级增长的主要驱动力</li></ul></li></ol></li></ol><h3 id="互联网的标准化工作">互联网的标准化工作</h3><ol><li>RFC：请求评论</li><li>制定互联网的正式标准的阶段<ol><li>互联网草案：有效期6个月</li><li>建议标准：开始成为RFC文档</li><li>互联网标准</li></ol></li></ol><h2 id="互联网的组成">互联网的组成</h2><h3 id="互联网边缘部分">互联网边缘部分</h3><ol><li>由用户直接使用</li><li>端系统：连接在互联网上的所有主机</li><li>端系统之间的两种通信方式<ul><li>客户-服务器方式（C/S方式）</li><li>对等连接方式（P2P）</li></ul></li></ol><h3 id="核心部分">核心部分</h3><ol><li>为边缘部分提供服务</li><li>典型的交换技术<ul><li>电路交换</li><li>分组交换</li><li>报文交换</li></ul></li><li>互联网的核心部分采用分组交换技术</li></ol><h2 id="计算机网络在我国的发展">计算机网络在我国的发展</h2><h2 id="计算机网络的类别">计算机网络的类别</h2><h3 id="计算机网络的定义-2">计算机网络的定义</h3><ol><li>按照网络的作用范围进行分类<ol><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li><li>个人区域网PAN</li></ol></li><li>按照网络的使用者进行分类<ol><li>公用网</li><li>专用网</li></ol></li><li>用来把用户接入到互联网的网络<ol><li>接入网AN：又叫本地接入网或居民接入网</li></ol></li></ol><h3 id="几种不同类别的计算机网络">几种不同类别的计算机网络</h3><h2 id="计算机网络的性能">计算机网络的性能</h2><h3 id="计算机网络的性能指标">计算机网络的性能指标</h3><ol><li>速率<ol><li>千 = K = 2¹⁰ = 1024</li><li>兆 = M = 2²⁰ = 1024 K</li><li>吉 = G = 2³⁰ = 1024 M</li><li>1 字节 (Byte) =  8 比特 (bit）</li></ol></li><li>宽带<ol><li>频域<ol><li>单位：赫•（或千赫、兆赫、吉赫等）</li></ol></li><li>时域<ol><li>单位：bit/s</li></ol></li></ol></li><li>吞吐量</li><li>时延<ol><li>发送时延（传输时延）<ol><li>发送时延=数据帧长度(bit)/发送速率(bit/s)</li></ol></li><li>传播时延<ol><li>传播时延=信道长度(米)/信号在信道上的传播速率(米/秒)</li></ol></li><li>处理时延</li><li>排队时延</li><li>总时延=发送时延+传播时延+处理时延+排队时延</li></ol></li><li>时延带宽积<ol><li>时延带宽积=传播时延 * 带宽</li></ol></li><li>往返时间 RTT<ol><li>从发送方发送完数据，到发送方收到来自接收方的确认总共经历的时间</li></ol></li><li>利用率<ol><li>D=D₀/(1-U)<ol><li>D₀表示网络空闲的时延</li><li>D表示网络当前的时延</li><li>U表示现在网络的利用率</li></ol></li></ol></li></ol><h3 id="计算机网络的非性能指标">计算机网络的非性能指标</h3><ol><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可扩展性和可升级性</li><li>易于管理和维护</li></ol><h2 id="计算机网络体系结构">计算机网络体系结构</h2><h3 id="计算机网络体系结构的形成">计算机网络体系结构的形成</h3><ol><li>在ARPANET设计时提出了分层的方法</li><li>1974 年，IBM 按照分层的方法制定并提出了系统网络体系结构 SNA</li><li>ISO (国际标准化组织) 提出的 OSI/RM 是使各种计算机在世界范围内互连成网的标准框架</li><li>1983年，形成了著名的 ISO 7498 国际标准，即七层协议的体系结构</li></ol><h3 id="协议与层次划分">协议与层次划分</h3><ol><li>网络协议的三个组成要素<ol><li>语法：数据与控制信息的结构或格式</li><li>语义：需要发出何种控制信息，完成何种动作以及做出何种响应</li><li>同步：事件实现顺序的详细说明</li></ol></li><li>各层完成的主要功能<ol><li>差错控制</li><li>流量控制</li><li>分段和重装</li><li>复用和分用</li><li>连接建立和释放</li></ol></li></ol><h3 id="具有五层协议的体系结构">具有五层协议的体系结构</h3><ol><li>物理层<ol><li>任务：实现比特（0 或 1）的传输</li><li>确定连接电缆的插头应当有多少根引脚，以及各引脚应如何连接</li><li>注意：传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆、无线信道等，并不在物理层协议之内，而是在物理层协议的下面</li></ol></li><li>数据链路层<ol><li>常简称为链路层</li><li>任务：实现两个相邻节点之间的可靠通信</li><li>在两个相邻节点间的链路上传送帧</li><li>如发现有差错，就简单地丢弃出错帧</li><li>如果需要改正出现的差错，就要采用可靠传输协议来纠正出现的差错。这种方法会使数据链路层协议复杂</li></ol></li><li>网络层<ol><li>为分组交换网上的不同主机提供通信服务</li><li>两个具体任务<ol><li>路由选择：通过一定的算法，在互联网中的每一个路由器上，生成一个用来转发分组的转发表</li><li>转发：每一个路由器在接收到一个分组时，要依据转发表中指明的路径把分组转发到下一个路由器</li></ol></li><li>互联网使用的网络层协议是无连接的网际协议 IP 和许多种路由选择协议，因此互联网的网络层也叫做网际层或 IP 层</li><li>IP 协议分组也叫做 IP 数据报，或简称为数据报</li></ol></li><li>运输层<ol><li>任务：负责向两台主机中进程之间的通信提供通用的数据传输服务</li><li>具有复用和分用的功能</li><li>主要使用两种协议<ol><li>传输控制协议 TCP<ol><li>提供面向连接的、可靠的数据传输服务</li><li>数据传输的单位是报文段</li></ol></li><li>用户数据报协议 UDP<ol><li>提供无连接的尽最大努力的数据传输服务（不保证数据传输的可靠性）</li><li>数据传输的单位是用户数据报</li></ol></li></ol></li></ol></li><li>应用层<ol><li>任务：通过应用进程间的交互来完成特定网络应用</li><li>协议：定义的是应用进程间通信和交互的规则</li><li>把应用层交互的数据单元称为报文</li><li>例如：DNS，HTTP，SMTP</li></ol></li></ol><h3 id="实体、协议、服务和服务访问点">实体、协议、服务和服务访问点</h3><ol><li>实体：表示任何可发送或接收信息的硬件或软件进程</li><li>协议：控制两个对等实体进行通信的规则的集合</li><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务</li><li>要实现本层协议，还需要使用下层所提供的服务</li><li>l、在同一系统中相邻两层的实体进行交互（即交换信息） 的地方，通常称为服务访问点 SAP</li><li>SAP 是一个抽象的概念，它实际上就是一个逻辑接口</li><li>OSI 把层与层之间交换的数据的单位称为服务数据单元 SDU</li><li>SDU 可以与 PDU 不一样<ol><li>例如：可以是多个 SDU 合成为一个 PDU，也可以是一个 SDU 划分为几个 PDU</li></ol></li></ol><h3 id="TCP-IP的体系结构">TCP/IP的体系结构</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「软件设计师」数据库系统</title>
      <link href="/a3dd2bea7772.html"/>
      <url>/a3dd2bea7772.html</url>
      
        <content type="html"><![CDATA[<h2 id="三级模式—两级映射">三级模式—两级映射</h2><ol><li>三级模式<ol><li>内模式(物理数据库模式)；它是和物理层次数据库直接关联的，负责管理存储数据的方式，即数据应以什么格式存放在物理文件上面，以及如何优化这些存储方式；该模式的关注点在于数据如何存放上面</li><li>概念模式：即数据库中的“表”，在该模式中，根据业务以及应用，数据被分成了若干张“表”，表之间会有相应的关联</li><li>外模式：处于用户的应用层次，即数据库中的“视图”，使用户在对数据的控制上有了更多的手段，有了更为灵活的处置方式</li></ol></li><li>两级映射<ol><li>外模式—概念模式映射：外模式和概念模式具有映射关系，该关系即“视图”和“表”之间的映射关系</li><li>概念模式—内模式映射：即用户想要改变存储结构，我们只需要调整这种映射关系，而不需要去修改用户的应用程序</li></ol></li><li>关系图示<br><img src="pic/2023120118.jpg" alt=""></li></ol><h2 id="数据库设计过程">数据库设计过程</h2><ol><li>数据流图，数据字典以及需求说明书都是需求分析阶段的产物</li><li>ER模型为概念结构设计层次的产物</li><li>关系模式为逻辑结构设计层次的产物<br><img src="pic/2023120119.jpg" alt=""></li></ol><h2 id="ER模型">ER模型</h2><ol><li><p>在ER模型中，矩形表示实体(如学生,课程)，椭圆表示属性(如学号，姓名，性别，年龄)，菱形表示联系(如选课)；其中学生和课程之间具有多对多关系<br><img src="pic/2023120120.jpg" alt=""></p></li><li><p>ER模型由局部到全局的合成方式</p><ol><li>逐步集成即首先将两个局部图集成在一起，然后与第三个合并在一起……;</li><li>一次集成即将所有ER图一次集成</li></ol></li></ol><blockquote><p>集成产生的冲突，即局部ER模型在继承时的冲突，如属性冲突、命名冲突(如一名多意)、结构冲突(不同抽象级别的冲突)</p></blockquote><ol><li>ER模型转换为关系模型<ol><li>一个实体型转换为一个关系模式</li><li>1:1联系：即一一对应的关系中，一个实体型转换为一个关系模式，再把这种联系放在任意一个其他实体中，因此在此种转换中需要两个实体的参与</li><li>1:n联系：即一对多的关系中，如部门实体与和员工实体之间，仍然是一个实体型转换为一个关系模型，但这种联系只能记录在多这边，如员工</li><li>m:n联系：即多对多的关系中，此种关系至少需要三个实体参与</li></ol></li></ol><h2 id="关系代数">关系代数</h2><ol><li><p>差运算（-）：得到A集合中B所没有的元素，如A-B即得到B在A中所没有的元素</p></li><li><p>笛卡尔积（×）：若AXB，则将A第一行记录写下，然后将其重复记录三次，然后将B的三行记录与A重写的记录一一对应的写下，然后对A的第二行记录进行同样的重写，以及将B对应的记录重写……<br><strong>例</strong>：求S1和S2的笛卡尔积<br><img src="pic/2023120121.jpg" alt=""><br><img src="pic/2023120122.jpg" alt=""></p></li><li><p>投影（π）：将所选的“列”记录下来</p></li><li><p>选择（σ）：将所选的“行”记录下来</p></li><li><p>自然联接（∞）：自然连接的结果以左侧关系为主，右侧关系去除重复列，如R(A,B,C,D,E)和E(C,D,E,F)进行自然连接的结果为：(A,B,R.C,R.D,R.E,F)</p></li></ol><h2 id="规范化理论">规范化理论</h2><p><strong>函数依赖</strong></p><ol><li>函数依赖：即函数关系，如学号对应姓名，姓名可以重复，但学号是唯一的，且唯一的学号对应相应了可重复的姓名</li><li>部分函数依赖(部分依赖)：主键是两个属性的组合键，若主键中的一部分可以确定某个属性，则为部分函数依赖</li><li>传递函数依赖(传递依赖)：若A可以确定B，B可以确定C，则A可以确定C(注意:B不能确定A，因为此时二者即为等价)</li></ol><p><strong>价值与用途</strong></p><ol><li>在非规范化的关系模式中，可能存在的问题包括：数据冗余、更新异常、插入异常、删除异常</li><li>价值包括：解决数据冗余，如在记录大学生所属系别时，记录为计算机系就比计算机科学系更为简便，在大量数据的处理中，这一点的改进极为重要</li></ol><p><strong>键</strong></p><ol><li>数据库系统中的键包括：超键，候选键，主键，外键</li><li>元组：在关系中，记录称为元组。元组对应表中的一行；表示一个实体</li><li>键：属性的集合</li><li>超键：唯一能够标识元组(实体，即数据库的一行)的键，可以是单个的属性，也可以是属性的组合</li><li>候选键：是一种特殊的超键，它是在超键的基础上消除多余属性后的键，可以有多个<ol><li>求解候选键步骤<ol><li>将关系模式的函数依赖关系用“有向图”的方式表示</li><li>找入度为0的属性，并以该属性集合为起点，尝试遍历有向图，若能遍历图中所有结点，则该属性集即为关系模式的候选键<ol><li>入度即为第一个只有指向箭头，没有被指箭头的属性</li></ol></li><li>若入度为0的属性集不能遍历图中所有结点(或没有入度为0的属性)，则需要尝试性的将一些中间结点(既有入度，也有出度的结点)并入入度为0的属性集中，直至该集合能遍历所有结点，该集合即为候选键</li></ol></li></ol></li><li>主键：只能有一个，如学号和身份证号都能标识一个学生，而主键则是在两个属性集合之中则其一</li><li>外键：外键是其他关系的主键，因为许多时候我们需要对表做关联</li></ol><p><strong>范式</strong></p><ol><li>概念：范式符号为NF；范式分为一级范式。二级范式，三级范式…….；随着范式等级的提高，规范程度就会越高，数据表的拆分也将越来越细，而数据表拆分过细会造成性能方面的问题，因此，我们通常对范式的等级采取折中的方式，即做到三级范式</li><li>第一范式：在关系模式R中，当且仅当所有域(列的取值范围，如性别的取值范围就是男和女)列的取值范围只包含原子值，即每个分量都是不可再分的数据项，则称R是第一范式</li><li>第二范式：当且仅当R是1NF，且每一个非主属性完全依赖(主键中的所有属性共同作用才能决定该属性)主键(且不存在部分依赖)时，则称R是第二范式</li><li>第三范式：当且仅当R是2NF，且E中没有非主属性传递依赖于码时，则称R是第三范式</li><li>BC范式：设R是一个关系模式，F是它的依赖集，R属于BCNF当且仅当其F中每一个依赖的决定因素必定包含R的某个候选码</li></ol><p><img src="pic/2023120123.jpg" alt=""></p><ol><li><p>主属性：主属性即为构成候选键的属性，在以下关系图中，ST和SJ都是候选键，因此，S,J,T三个属性都属于主属性<br><img src="pic/2023120124.jpg" alt=""></p></li><li><p>关系模式：关系模式实际上就是记录类型。它的定义包括：模式名、属性名、值域名以及模式的主键。关系模式不涉及到物理存储方面的描述，仅仅是对数据特性的描述</p></li></ol><p><strong>模式分解</strong></p><ol><li>范式级别不够时我们采取模式的拆分</li><li>模式拆分时要保持的原则<ol><li>保持函数依赖分解(不需要保持冗余的函数依赖)</li><li>无损分解：有损即不能还原；无损即可以还原</li></ol></li></ol><blockquote><p>无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的模式</p></blockquote><ol><li>判断是否满足无损分解的方法<ol><li>表格法：当有任意一行全为a时，该关系模式的分解即为无损分解<br><img src="pic/2023120125.png" alt=""><br><img src="pic/2023120126.png" alt=""><br>2.计算法：第一个p1是无损分解，第二个p2是有损分解<br><img src="pic/2023120127.jpg" alt=""></li></ol></li></ol><h2 id="数据库的并发控制">数据库的并发控制</h2><ol><li><p>事务</p><ol><li>概念：把多个操作封装起来，将其看成一个整体来进行操作，可以便于并行并发的处理一些事情</li><li>特性<ol><li>原子性：即事务的内容操作要么全部做，要么全不做</li><li>一致性：在事务执行之前，数据保持一致的状态，执行之后数据也是一致的状态</li><li>隔离性：事务之间的执行是独立进行的</li><li>持续性：事务执行之后，其结果造成的影响是持续的，即使数据库崩溃，其对数据库的更新操作也永久有效</li></ol></li></ol></li><li><p>并发并行带来的问题</p><ol><li><p>丢失更新<br><img src="pic/2023120128.jpg" alt=""></p><blockquote><p>在这两个事务中，T1执行的结果为5，T2执行的结果为2，我们想要得到的是A减去5再减去8的结果，但最终结果为2，因为下一个执行的事务结果会覆盖上一个事务执行的结果</p></blockquote></li><li><p>不可重复读<br><img src="pic/2023120129.jpg" alt=""></p><blockquote><p>在T1运算中，求A与B的和时，为了提高准确率，程序会再次进行验算，但在第一次运算和第二次运算的间隙，将进行T2运算，T2运算的结果会将A与B的值进行覆盖，这将会产生死锁问题</p></blockquote></li><li><p>读“脏”数据：脏数据不是真正的数据，不是我们执行过程中真的产生的数据，只是一个临时值<br><img src="pic/2023120130.jpg" alt=""></p><blockquote><p>值70是计算过程产生的数据，属于临时数据，该数据被恢复为了20，使得T2操作将会出错</p></blockquote></li></ol></li><li><p>解决并发并行带来的问题的方法——封锁协议</p><ol><li>一级封锁协议：事务T在修改数据R之前必须先对其加X(写锁或排他锁)锁，直到事务结束才释放。可防止丢失修改，该锁可以使得除了T以外的所有事务将不能访问R，而事务T则可以阅读或者修改R</li><li>二级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S(读锁或共享锁)锁，读完后即可释放S锁。可防止丢失修改，还可防止读“脏”数据，该锁的作用是所有的事务都可以访问R，但包括T在内的所有事务都不能修改R</li><li>三级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S锁，直到事务结束才释放。可防止丢失修改，防止读“脏”数据与防止数据重复读</li><li>两段锁协议：可串行化(通过加锁解锁两个阶段使并发事务排队进行)的。可能发生死锁</li></ol></li></ol><blockquote><ul><li>如果事物T对数据加上X锁后，就只允许事务T读取和修改数据，其他事务对数据A不能再加任何锁，从而也不能读取和修改数据，直到事务T释放数据上的锁</li><li>如果事务T对数据加上了S锁后，事务T就只能读数据但不可以修改，其他事务可以再对数据A加S锁来读取，只要数据上有S锁，任何事务都只能再对其加S锁，而不能加X锁</li></ul></blockquote><h2 id="数据库完整性约束">数据库完整性约束</h2><ol><li>约束的作用是提高数据的可靠性</li><li>实体完整性约束：给数据表定义主键</li><li>参照完整性约束：外键中的约束，如：我们设置了一个员工表，其中含有部门号，若部门号设置了参照完整性约束，则在设置部门号时，其内容必须是主键中的内容，若不是，则会报错</li><li>用户自定义完整性约束：用户可以设置属性的值的要求，如属性“年龄”：用户可以自行设置“不能输入负数”限定</li><li>触发器：写脚本来约束数据库，用来设置更为复杂的约束</li></ol><h2 id="数据库安全">数据库安全</h2><p><img src="pic/2023120131.jpg" alt=""></p><h2 id="数据库备份与恢复">数据库备份与恢复</h2><ol><li>按备份方式分类<ol><li>冷备份（静态备份）：将数据库正常关闭，在停止状态下，将数据库的文件全部备份(复制)下来<ol><li>优点：非常快速的备份方法(只需要复制文件)；容易归档(简单复制即可)；容易恢复到某个时间点上(只需将文件再复制回去)；能与归档方法结合，做数据库“最佳状态”的恢复；低度维护，高度安全</li><li>缺点：单独使用时，只能提供到某一时间点上的恢复；在实施备份的全过程中，数据库必须要作备份而不能做其他工作；若磁盘空间有限，只能复制到磁带等其他外部存储设备上，速度会很慢；不能按表或按用户恢复</li></ol></li><li>热备份（动态备份）：利用备份软件，在数据库正常运行的状态下，将数据库中的数据文件备份出来<ol><li>优点：可在表空间或数据库文件级备份，备份的时间短；备份时数据库仍然可以使用；可达到秒级恢复(恢复到某一时间节点上)；可对几乎所有数据库实体做恢复；恢复是快速的</li><li>缺点：不能出错，否则后果严重；若热备份不成功所得结果不可用于时间点的恢复；因难于维护，所以要特别小心，不允许“以失败告终”</li></ol></li></ol></li><li>按备份的量分类<ol><li>完全备份：备份整个数据库的内容</li><li>差量备份：仅备份上一次完全备份之后变化的数据(可以解决增量备份可能出现的错误)</li><li>增量备份：备份上一次备份之后变化的数据</li></ol></li><li>四种转储方式<ol><li>静态海量转储：在系统中无事务运行时进行，每次转储全部数据库</li><li>静态增量转储：在系统无运行事务时进行，每次只转储上一次转储后更新过的数据</li><li>动态海量转储：转储期间允许对数据库进行存取或修改，每次转储全部数据库</li><li>动态增量转储：转储期间允许对数据库进行存取或修改，每次只转储上一次转储后更新的内容</li></ol></li><li>日志文件：事务日志是针对数据库改变所做的记录，它可以针对数据库的任何操作(如插入，更新)，并将记录结果保存在独立的文件中</li><li>数据库可能的故障与解决办法<br><img src="pic/2023120132.jpg" alt=""></li></ol><h2 id="数据仓库与数据挖掘">数据仓库与数据挖掘</h2><ol><li>数据仓库：数据仓库是一种特殊的数据库；数据库系统在刚刚建立时运行速度很快，但随着时间的推移，其存储的数据量越来越大，速度也将逐步下降，而为了提高速度，人们会优化存储，通常采用删除较久远历史数据来进行优化，而这些数据仍然具有部分价值，因此我们会专门用一个数据库来对其进行存放，而用来存放这种数据的数据库并不需要插入，添加，修改等操作，更多的操作是查询，因此我们将这种特殊用途的数据库称之为数据仓库</li><li>数据仓库的特点<ol><li>面向主题：不同与一般数据库的面向业务，数据仓库的数据是面向主题的</li><li>集成性：数据仓库会存储诸如月报表，周报表等集成式的数据，而普通数据库并不会这么干</li><li>相对稳定性：进去的数据将不会进行修改，删除等操作</li><li>反映历史变化(随着时间变化)：隔一段时间会将数据导入进来</li></ol></li><li>数据仓库的建立过程：首先是从数据源中抽取，清理(使数据格式一致)，装载(放到数据仓库中)，刷新(定期向仓库中添加数据)；数据集市即部门级的数据仓库，因为数据仓库的建立从企业全局的战略上讲具有非常大的风险，因此只建立部分数据库最后再将其整合则会降低风险，而其中部门级的数据库则称为数据集市<br><img src="pic/2023120133.jpg" alt=""></li><li>OLAP服务器（联机分析处理服务器）：专门做分析处理工作的，最表层是数据的前端工具，前端工具最普通的如查询工具，报表工具，分析工具以及比较独特的数据挖掘工具</li><li>数据挖掘方法分类<ol><li>关联分析：挖掘出隐藏在数据间的相互关系</li><li>序列模式分析：侧重点是分析数据间的前后关系(因果关系)</li><li>分类分析：为每一个记录赋予一个标记再按标记分类</li><li>聚类分析：分类分析法的逆过程</li></ol></li><li>数据挖掘方法：决策树、神经网络、关联规则挖掘算法</li></ol><h2 id="反规范化">反规范化</h2><ol><li>反规范化的提出：数据库规范化程度不高会有过多的数据冗余，插入异常，删除异常但规范化程度过高会造成数据表过多，查询时的效率会极大的降低，因此提出了反规范化</li><li>反规范化的技术<ol><li>增加派生性冗余：增加冗余</li><li>增加冗余列</li><li>重新组表</li><li>分割表：包括垂直分割和水平分割</li></ol></li></ol><h2 id="分布式数据库相关概念">分布式数据库相关概念</h2><ol><li>分片透明：是指用户不必知道数据是如何分片的，它们对数据的操作在全局关系上进行，即关系如何分片对用户是透明的，因此当分片改变时，应用程序可以不变。分片透明性是最高层次的透明性，如果用户能在全局关系一级操作，则数据如何分布，如何存储等细节不必关心，其应用程序的编写与集中式数据库相同</li><li>复制透明：用户不用关心数据库在网络中各个结点的复制情况，被复制的数据的更新都由系统自动完成。在分布式数据库系统中，可以把一个场地的数据复制到其他场地存放，应用程序可以使用复制到本地的数据在本地完成分布式操作，避免通过网络传输数据，提高了系统的运行和查询效率，但是对于复制数据的更新操作，就要涉及到对所有复制数据的更新</li><li>位置透明：是指用户不必知道所操作的数据放在何处，即数据分配到哪个或哪些站点存储对用户是透明的</li><li>逻辑透明：是最低层次的透明性，该透明性提供数据到局部数据库的映像，即用户不必关心局部DBMS支持哪种数据模型、使用哪种数据操纵语言，数据模型和操纵语言的转换是由系统完成的。因此，逻辑透明对异构型和同构异构的分布式数据库是非常重要的</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件设计师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「软件设计师」操作系统基本原理</title>
      <link href="/493e4e68c515.html"/>
      <url>/493e4e68c515.html</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统概述">操作系统概述</h2><ol><li>操作系统与计算机体系结构之间的关系<br><img src="pic/2023120101.jpg" alt=""></li><li>操作系统具备的管理职能<ol><li>进程管理<ol><li>进程的状态</li><li>前趋图</li><li>pv操作</li><li>死锁问题</li></ol></li><li>存储管理<ol><li>段页式存储</li><li>页面置换算法</li></ol></li><li>文件管理<ol><li>索引文件</li><li>位示图</li></ol></li><li>作业管理</li><li>设备管理<ol><li>数据传输控制方式</li></ol></li><li>微内核操作系统<ol><li>虚设备与SPOOLING技术</li></ol></li></ol></li></ol><h2 id="进程管理">进程管理</h2><p><strong>进程的状态</strong><br><img src="pic/2023120102.png" alt=""></p><p><strong>进程的同步与互斥</strong></p><ol><li>互斥：千军外马过独木桥</li><li>同步：速度有差异，在一定情况停下等待</li></ol><p><strong>PV操作</strong></p><ol><li>临界资源：诸程序间需要互斥方式对其进行共享的资源，如打印机、磁带机等</li><li>临界区：每个进程中访问临界资源的那段代码称为临界区</li><li>信息量：是一种特殊的变量<br><img src="pic/2023120103.png" alt=""></li></ol><ul><li>解题技巧<ul><li>每一个箭头看成一个资源</li><li>箭头的起点是V操作</li><li>箭头的终点是P操作</li></ul></li></ul><p><strong>死锁问题</strong></p><ol><li>如果一个进程在等待一件不可能发生的事，则进程就死锁了。而如果一个或多个进程产生死锁，就会造成系统死锁</li></ol><blockquote><p>假设有k个进程，每个进程需要n个资源<br>则不发生死锁所需要的最小资源为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k*(n-1)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p></blockquote><ol><li>死锁的条件<ol><li>互斥</li><li>保持和等待</li><li>不剥夺</li><li>环路等待</li></ol></li><li>死锁的避免<ol><li>有序的资源分配：资源利用率较低</li><li>银行家算法<ol><li>当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程</li><li>进程可以分期请求资源，但请求的总数不能超过最大需求量</li><li>当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配但总能使进程在有限的时间里得到资源</li></ol></li></ol></li></ol><h2 id="存储管理">存储管理</h2><p><strong>分区存储组织</strong><br><strong>例</strong>：某计算机系统的内存大小为128k，采用可变分区分配方式进行内存分配，现有作业4申请内存9k，几种不同的存储分配算法在分配中，会产生什么样的结果呢?</p><ol><li>首次适应法：把即将执行的作业安排在第一个能够容纳它的空间<br><img src="pic/2023120104.jpg" alt=""></li><li>最佳适应法：把即将执行的作业安排在内存空间与它最接近的空间进行存放，如该例子中，作业4占据空间9k，通过该算法，计算机就将其存放在了空间为10的地址中；由于在每次存放作业以后内存空间剩余量极低，长期以后该算法会造成内存空间碎片化，降低内存地址的利用率<br><img src="pic/2023120105.jpg" alt=""></li><li>最差适应法：该算法能够解决内存空间碎片化的问题，如图所示:该算法优先将作业存放至内存空间最大的地址<br><img src="pic/2023120106.jpg" alt=""></li><li>循环首次适应法：该算法是将空闲的区域连成环状，将作业在环状区域内顺次进行分配(从第二个空闲区域开始分配)<br><img src="pic/2023120107.jpg" alt=""></li></ol><p><strong>页式存储</strong></p><ol><li>提出背景：为了解决碎片化的存储</li><li>概念：把用户程序分成等分大小的n个“页”(并将其编号)，再在地址空间中以nk为基数划分等大小的块(同样将其编号，块号又称页帧号)，运行用户程序时不再将整个程序进行运行，而是根据需要分批次将页调入到块中运行，而页和块之间的对应关系用页表来记录</li><li>优点：利用率高，碎片小，分配及管理简单</li><li>缺点：增加了系统开销(系统每次读取程序都需要先读取页表将其定位，再进行程序的读取)；可能产生抖动现象</li><li>页号与页帧号的关系必须通过表来进行查询<br><img src="pic/2023120108.jpg" alt=""></li><li>逻辑地址和物理地址：要求物理地址，先把逻辑地址(逻辑地址由页号和页内地址组成)当中的页号和页内地址分开，要把它们分开，首先将页面大小写成二进制的形式，等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>；则说明一个页的页内地址有n位，而在逻辑地址中高于(从右往左)n位的部分就是页号,得到页号之后进行查表，得到相应的页帧号，而物理地址=页帧号+页内地址(该式子中的“+“是拼接，并非做加法)<br><img src="pic/2023120109.jpg" alt=""></li></ol><p><strong>段式存储</strong></p><ol><li>概念：按逻辑结构进行内存的划分，划分为n个段，每一个段的大小无要求，可以相等也可以不等，包括段号和段内地址，例如：可以将main主函数作为一个段，然后将第一个子函数作为一个段，然后将第二个子函数作为一个段……</li><li>段式存储按函数之间的逻辑对内存进行划分，大小差异较大，存在段表，段表的内容包括段号，段长以及基址<ol><li>基址：就是该段在地址的起始位置</li><li>优点：多道程序共享内存，各段程序修改互不影响</li><li>缺点：内存利用率低，内存碎片浪费大<br><img src="pic/2023120111.jpg" alt=""></li></ol></li></ol><p><strong>段页式存储</strong></p><ol><li><p>段页式存储是结合了段式和页式的一种存储组织，将内存先分段，再分页</p><ol><li>优点：空间浪费小，存储共享容易，存储保护容易，能够动态连接</li><li>缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降(程序在执行时要先查段表，再查页表，使得系统资源消耗增加)<br><img src="pic/2023120112.jpg" alt=""></li></ol></li><li><p>快表：快表是一块小容量的相联存储器，由高速缓存器(放在cache之中)组成，速度快，并且可以从硬件上保证按内容并行查找，一般用来存放当前访问最频繁的少数活动页面的页号</p></li></ol><p><strong>页面置换算法</strong></p><ol><li>产生背景：当程序的需要与系统资源的供给发生矛盾时的一种解决方案，即将不用的页面淘汰掉，置换为需要执行的页面</li><li>页面置换算法的四种算法<ol><li>最优算法：尚处于理论层面</li><li>随机算法：随机淘汰一个页面</li><li>先进先出算法(FIFO)：即淘汰时按照之前执行的先后顺序进行淘汰，有可能产生“抖动”<ol><li>抖动：把经常用到的页置换出去，要用的时候发现没有内存了，造成进程中断</li></ol></li><li>最近最少使用算法(LRU)：在保证最近使用的页面不被中断的情况下，将最少使用的页面淘汰，不会产生“抖动”</li></ol></li></ol><p><strong>例</strong>：<img src="pic/2023120113.jpg" alt=""></p><p>“没有使用快表”即表示每读一次程序的块，需要先在内存上面查表，才能读取相应的内存块，所以每一个块需要两次内存的访问，所以6个块(在页式存储结构中，每一个页面对应一个块)总共会产生12次对内存的访问;一个内存单元占据1b的内存，所有的指令(无论占据了几个页面)都只产生一次缺页中断，而操作数A和操作数B则各自产生两次缺页中断，因此总共产生了5次缺页中断</p><h2 id="文件管理">文件管理</h2><p><strong>索引文件结构</strong><br><img src="pic/2023120112.jpg" alt=""></p><p>索引一般会有13个节点(默认情况下)，从0开始编号，其中索引0到9这十个索引称为直接索引，直接对应物理盘块，每一个物理盘块都对应了索引文件的内容，而索引10则称为间接索引，里面只存储地址，如一个物理盘块的地址大小为4个字节，而一个物理盘块的大小为4k，则4k/4字节等于1024，代表着1024个物理盘块的地址，因此该索引内可以存储的文件大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mi>k</mi><mo>∗</mo><mn>1024</mn></mrow><annotation encoding="application/x-tex">4k*1024</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1024</span></span></span></span>；该10号索引称之为一级间接索引；索引11则是二级间接索引，即索引的内容还是索引，再索引的内容才是物理盘块，二级简介索引存储的文件大小即为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mi>k</mi><mo>∗</mo><mn>1024</mn><mo>∗</mo><mn>1024</mn></mrow><annotation encoding="application/x-tex">4k*1024*1024</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1024</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1024</span></span></span></span>；虽然分级越多存储的内容越多，但相应的，效率也会更低</p><p><strong>文件和树型目录结构</strong></p><ol><li>绝对路径：是从盘符开始的路径</li><li>相对路径：是从当前路径开始的路径</li></ol><p><strong>例</strong>：在该文件树型图中，若文件目录的位置是D1，若要求f2的路径，则绝对路径：/D1/W2/F2；相对路径：W2/F2<br><img src="pic/2023120113.jpg" alt=""></p><ol><li>文件属性<ol><li>R：只读文件属性</li><li>A：存档属性</li><li>S：系统文件</li><li>H：隐藏文件</li></ol></li><li>文件名的组成<ol><li>驱动器号</li><li>路径</li><li>主文件名</li><li>扩展名</li></ol></li></ol><p><strong>空闲存储空间的管理</strong></p><ol><li>空闲区表法：用一个表来记录哪些地方是空闲的，以便将其管理起来</li><li>空闲链表法：把空闲区域都链起来，链成一条链表，然后需要空间分配的时候，从这条链表中划出一部分出来即可</li><li>位示图法：将所有存储区域分成无数个物理块，然后以1表示被占用，0表示空闲，将所有空间进行标记</li></ol><p><strong>例</strong>：4195号是第4196个位，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4196</mn><mi mathvariant="normal">/</mi><mn>32</mn><mo>=</mo><mn>131.125</mn></mrow><annotation encoding="application/x-tex">4196/32=131.125</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4196/32</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">131.125</span></span></span></span>，因此物理块的使用情况应该在第132个字中描述<br><img src="pic/2023120115.jpg" alt=""></p><ol><li>成组链接法</li></ol><h2 id="设备管理——数据传输控制方式">设备管理——数据传输控制方式</h2><blockquote><p>主要是指内存和外设之间的数据传输控制问题</p></blockquote><ol><li>程序控制方式（程序查询方式）：这种方式是最为低级的，也是CPU介入最多的一种机制，即整个数据的传输控制很多时候都要CPU的介入，此时外设会处于非常被动的位置，即不会主动的去返回信息，如是否完成等信息，而是由CPU主动发出查询指令，进而对信息进行查询</li><li>程序中断方式：大部分与程序控制方式相同，但相较于程序控制方式，增加了中断方式，主动性更强，即如果外设完成了数据的传输等操作，外设会发出中断指令，效率比程序控制方式更高</li><li>DMA方式（直接存储器存取方式）：有专门的DMA控制器，只要是外设和内存之间的数据交换过程，就由这个控制器进行管控，CPU只需要在开头的时候做一些介入，如初始化等操作</li><li>设备管理的五个层次<ol><li>由上到下依次是：用户进程、与设备无关的系统软件、设备驱动程序、中断处理程序、硬件</li></ol></li></ol><h2 id="SPOOLING技术">SPOOLING技术</h2><ol><li>概念：例如：四个人通过远程手段准备使用一台打印机，而这台打印机在同一段时间内只能让一个用户使用，若一个用户正在使用该打印机，另一名用户试图使用该打印机时就会提示该打印机被占用，事实上这样做使得打印机的效率非常的低，而面对这个问题，采用了SPOOLING技术的打印机会进行如下操作：给打印机创建一个缓存区，每一个用户在打印时都会进入缓存区，而从缓存区到真正打印则需要挨个排队，即打印机在打印时不再排斥其他用户的打印操作，而是将其缓存起来，在将当前操作完成后立即进行第二个操作，这样做不仅使得用户的操作界面变得更为友好，也极大的提高了打印机的打印效率</li></ol><h2 id="微内核操作系统">微内核操作系统</h2><ol><li><p>概念：把内核做的更小具有许多好处与优势，如提高了可靠性，稳定性，安全性；因为操作系统作为核心的系统软件，如果操作系统出现故障，就会影响整个系统的运行，将内核做的更小就会降低故障的发生率</p></li><li><p>单体内核和微内核的区别及优缺点<br><img src="pic/2023120116.jpg" alt=""></p></li><li><p>Linux系统的常用命令</p><ol><li>attrib：声明</li><li>modify：修改</li><li>chmod：修改文件权限</li><li>change：改变</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件设计师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「HTML4」HTML入门</title>
      <link href="/36db32395856.html"/>
      <url>/36db32395856.html</url>
      
        <content type="html"><![CDATA[<h2 id="标签">标签</h2><ol><li>标签：又称元素，是HTML的基本组成单位<ol><li>双标签（绝大多数都是双标签）：<code>&lt;标签名&gt;标签体&lt;/标签名&gt;</code><ol><li>第一个标签叫起始标签，第二个标签叫结束标签</li><li>例：<code>&lt;marquee&gt;尚硅谷，让天下没有难学的技术！&lt;/marquee&gt;</code></li></ol></li><li>单标签：<code>&lt;标签名/&gt;</code><ol><li><code>/</code>可以省略</li><li>例：<code>&lt;input&gt;</code></li></ol></li></ol></li><li>标签名不区分大小写，但推荐小写，因为小写更规范</li><li>标签之间的关系：并列关系、嵌套关系，可以使用 tab 键进行缩进 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span></span><br><span class="line">尚硅谷，让天下没有难学的技术！</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="标签属性">标签属性</h2><ol><li>用于给标签提供附加信息</li><li>可以写在起始标签或单标签中，形式如下：<code>&lt;标签名 属性名=&quot;属性值&quot; 属性名=&quot;属性值&quot;&gt;</code> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">loop</span>=<span class="string">&quot;1&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>尚硅谷，让天下没有难学的技术！<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>有些特殊的属性，没有属性名，只有属性值，如：<code>&lt;input disabled&gt;</code></li></ol><blockquote><ol><li>不同的标签，有不同的属性；也有一些通用属性（在任何标签内都能写）</li><li>属性名、属性值不能乱写，都是W3C规定好的</li><li>属性名、属性值，都不区分大小写，但推荐小写</li><li>双引号，也可以写成单引号，甚至不写，但推荐写双引号</li><li>标签中不要出现同名属性，否则后写的会失效，例如：<code> &lt;input type=&quot;text&quot; type=&quot;password&quot;&gt;</code></li></ol></blockquote><h2 id="基本结构">基本结构</h2><ol><li>想要呈现在网页中的内容写在body标签中</li><li>head标签中的内容不会出现在网页中</li><li>head标签中的title标签可以指定网页的标题</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注释">注释</h2><ol><li>特点：注释的内容会被浏览器所忽略，不会呈现到页面中，但源代码中依然可见</li><li>作用：对代码进行解释和说明</li><li>写法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面的文字只能滚动一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">loop</span>=<span class="string">&quot;1&quot;</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下面的文字可以无限滚动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span>尚硅谷123<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>注释不可以嵌套</li></ol><h2 id="文档声明">文档声明</h2><ol><li><p>作用：告诉浏览器当前网页的版本</p></li><li><p>写法</p><ol><li>旧写法：要依网页所用的HTML版本而定，写法有很多<ol><li>参考：<a href="https://www.w3.org/QA/2002/04/valid-dtd-list.html">W3C QA - 可在 Web 文档中使用的 Doctype 声明的推荐列表</a></li></ol></li><li>新写法：W3C 推荐使用 HTML 5 的写法</li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line">或  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line">或  </span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>文档声明必须在网页的第一行，且在<code>html</code>标签的外侧</p></li></ol><h2 id="字符编码">字符编码</h2><ol><li>计算机对数据的操作<ol><li>存储时，对数据进行：编码</li><li>读取时，对数据进行：解码</li></ol></li><li>编码、解码，会遵循一定的规范 —— 字符集</li><li>常见的字符集<ol><li>ASCII：大写字母、小写字母、数字、一些符号，共计128个</li><li>ISO 8859-1：在 ASCII 基础上，扩充了一些希腊字符等，共计是256个</li><li>GB2312：继续扩充，收录了 6763 个常用汉字、682个字符</li><li>GBK：收录了的汉字和符号达到 20000+ ，支持繁体中文</li><li>UTF-8 ：包含世界上所有文字与符号</li></ol></li><li>为了让浏览器在渲染html文件时，不犯错误，可以通过meta标签配合charset属性指定字符编码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置语言">设置语言</h2><ol><li>主要作用<ol><li>让浏览器显示对应的翻译提示</li><li>有利于搜索引擎优化</li></ol></li><li>具体写法：<code> &lt;html lang=&quot;zh-CN&quot;&gt;</code></li><li>lang属性的编写规则<ol><li><ol><li>语言-国家/地区</li><li>zh-CN ：中文-中国大陆（简体中文）</li><li>zh-TW ：中文-中国台湾（繁体中文）</li><li>zh ：中文</li><li>en-US ：英语-美国</li><li>en-GB ：英语-英国</li></ol></li><li>语言—具体种类（已不推荐使用）<ol><li>zh-Hans ：中文—简体</li><li>zh-Hant ：中文—繁体</li></ol></li><li>W3School 上的说明：<a href="https://www.w3school.com.cn/tags/html_ref_language_codes.asp">《语言代码参考手册》</a>、<a href="https://www.w3school.com.cn/tags/html_ref_country_codes.asp">《国家/地区代码参考手册》</a></li><li>W3C官网上的说明：<a href="https://www.w3.org/International/articles/language-tags/">《Language tags in HTML》</a></li></ol></li></ol><h2 id="标准结构">标准结构</h2><ol><li>HTML标准结构如下</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>VSCode 删除行快捷键：Ctrl+Shift+K</p></blockquote><ol><li>输入!，随后回车即可快速生成标准结构</li><li>配置VScode 的内置插件 emmet ，可以对生成结构的属性进行定制</li><li>在存放代码的文件夹中，存放一个 favicon.ico 图片，可配置网站图标</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Python」Selenium</title>
      <link href="/59eb164e57d2.html"/>
      <url>/59eb164e57d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用">基本使用</h2><ol><li>导入：<code>from selenium import webdriver</code></li><li>创建浏览器操作对象：<code>browser = webdriver.Chrome()</code></li><li>访问网站</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.jd.com&#x27;</span></span><br><span class="line">browser.get(url)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">selenium基本使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/29 14:42</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器操作对象</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.jd.com&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># page_source获取网页源码</span></span><br><span class="line">content = browser.page_source</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="元素定位">元素定位</h2><ol><li>导入：<code>from selenium.webdriver.common.by import By</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element(By.ID, <span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line">inputTag = driver.find_element(By.CLASS_NAME, <span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line">inputTag = driver.find_element(By.NAME, <span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line">inputTag = driver.find_element(By.TAG_NAME, <span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line">inputTag = driver.find_element(By.XPATH, <span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line">inputTag = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;value&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">selenium 元素定位</span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/29 15:05</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素定位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据ID找到对象</span></span><br><span class="line"><span class="comment"># button = browser.find_element(By.ID,&#x27;su&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签属性的属性值获取对象</span></span><br><span class="line"><span class="comment"># button = browser.find_element(By.NAME, &#x27;wd&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据xpath语句获取对象</span></span><br><span class="line"><span class="comment"># button = browser.find_element(By.XPATH, &#x27;//input[@id=&quot;su&quot;]&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签名获取对象</span></span><br><span class="line"><span class="comment"># button = browser.find_element(By.TAG_NAME, &#x27;input&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用bs4的语法获取对象</span></span><br><span class="line"><span class="comment"># button = browser.find_element(By.CSS_SELECTOR, &#x27;#su&#x27;)</span></span><br><span class="line"></span><br><span class="line">button = browser.find_element(By.LINK_TEXT, <span class="string">&#x27;新闻&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(button)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="元素信息">元素信息</h2><ol><li>获取元素属性：<code>.get_attribute('class')</code></li><li>获取元素文本：<code>.txt</code></li><li>获取标签名：<code>.tag_name</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">元素信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/29 16:31</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = browser.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签的属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.get_attribute(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line"><span class="comment"># 获取标签名</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.tag_name)</span><br><span class="line"></span><br><span class="line">a = browser.find_element(By.LINK_TEXT, <span class="string">&#x27;新闻&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取元素文本</span></span><br><span class="line"><span class="built_in">print</span>(a.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="交互">交互</h2><ol><li>点击：<code>click()</code></li><li>输入：<code>send_keys()</code></li><li>后退操作：<code>browser.back()</code></li><li>前进操作：<code>browser.forward()</code></li><li>模拟JS滚动：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js=<span class="string">&#x27;document.documentElement.scrollTop=100000&#x27;</span></span><br><span class="line">browser.execute_script(js)  <span class="comment"># 执行js代码</span></span><br></pre></td></tr></table></figure><ol start="6"><li>获取网页代码：<code>page_source</code></li><li>退出：<code>browser.quit()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">selenium交互</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/29 16:47</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文本框对象</span></span><br><span class="line"><span class="built_in">input</span> = browser.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文本框中输入周杰伦</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&#x27;周杰伦&#x27;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取百度一下按钮</span></span><br><span class="line">button = browser.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击按钮</span></span><br><span class="line">button.click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑动窗口到底部</span></span><br><span class="line">js_bottom = <span class="string">&#x27;document.documentElement.scrollTop=100000&#x27;</span></span><br><span class="line">browser.execute_script(js_bottom)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取下一页按钮</span></span><br><span class="line"><span class="built_in">next</span> = browser.find_element(By.XPATH, <span class="string">&#x27;//a[@class=&quot;n&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment"># 点击下一页</span></span><br><span class="line"><span class="built_in">next</span>.click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回上一页</span></span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新回到上一页</span></span><br><span class="line">browser.forward()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">browser.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Chrome-handless">Chrome handless</h2><ol><li>基本代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=chrome_options)</span><br></pre></td></tr></table></figure><ol start="2"><li>封装配置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    browser = webdriver.Chrome(options=chrome_options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> browser</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Chrome handless</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/30 11:06</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    browser = webdriver.Chrome(options=chrome_options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> browser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装调用</span></span><br><span class="line">browser = share_browser()</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/&#x27;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Python」解析</title>
      <link href="/17d53c4946c6.html"/>
      <url>/17d53c4946c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="xpath">xpath</h2><ol><li>xpath使用<ol><li>安装lxml库 <code>pip install lxml -i https://pypi.douban.com/simple</code></li><li>导入lxml.etree <code>from lxml import etree</code></li><li>解析本地文件 <code>html_tree=etree.parse('XX.html')</code></li><li>服务器响应文件 <code>html_tree=etree.HTML(response.read().decode('utf‐8')</code></li><li>html_tree.xpath(xpath路径</li></ol></li><li>xpath基本语法<ol><li>路径查询<ol><li>//：查找所有子孙节点，不考虑层级关系</li><li>/：找直接子节点</li></ol></li><li>谓词查询<ol><li>//div[@id]</li><li>//div[@id=“maincontent”]</li></ol></li><li>属性查询<ol><li>//@class</li></ol></li><li>模糊查询<ol><li>//div[contains(@id, “he”)]</li><li>//div[starts‐with(@id, “he”)]</li></ol></li><li>内容查询<ol><li>//div/h1/text()</li></ol></li><li>逻辑运算<ol><li>//div[@id=“head” and @class=“s_down”]</li><li>//title | //price</li></ol></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xpath</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/26 11:12</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地文件</span></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;demo1.html&#x27;</span>)</span><br><span class="line"><span class="comment"># 查找ul下的li</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//body/ul/li&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找有id属性的li标签</span></span><br><span class="line"><span class="comment"># text()获取标签内容</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[@id]/text()&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到id为l1的li标签</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[@id=&quot;l1&quot;]/text()&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找id为l1的li标签的class的属性值</span></span><br><span class="line"><span class="comment"># li=tree.xpath(&#x27;//ul/li[@id=&quot;l1&quot;]/@class&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id中包含l的li标签</span></span><br><span class="line"><span class="comment"># li_list=tree.xpath(&#x27;//ul/li[contains(@id,&quot;l&quot;)]/text()&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id的值以l开头的li标签</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[starts-with(@id,&quot;l&quot;)]/text()&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id为l1和class为c1的li标签</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[@id=&quot;l1&quot; and @class=&quot;c1&quot;]/text()&#x27;)</span></span><br><span class="line"></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text() | //ul/li[@id=&quot;l2&quot;]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="comment"># 判断列表长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器响应文件 response.read().decode(&#x27;utf-8&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xpath实践——百度一下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/26 19:52</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">result = tree.xpath(<span class="string">&#x27;//input[@id=&quot;su&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">下载图片</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/26 20:06</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://sc.chinaz.com/tupian/renwutupian.html</span></span><br><span class="line"><span class="comment"># https://sc.chinaz.com/tupian/renwutupian_2.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&quot;https://sc.chinaz.com/tupian/renwutupian&quot;</span></span><br><span class="line">    <span class="keyword">if</span> page == <span class="number">1</span>:</span><br><span class="line">        url = base_url + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>_<span class="subst">&#123;page&#125;</span>.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">content</span>):</span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    src_list = tree.xpath(<span class="string">&quot;//img[@class=&#x27;lazy&#x27;]/@data-original&quot;</span>)</span><br><span class="line">    name_list = tree.xpath(<span class="string">&quot;//img[@class=&#x27;lazy&#x27;]/@alt&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> src, name <span class="keyword">in</span> <span class="built_in">zip</span>(src_list, name_list):</span><br><span class="line">        urllib.request.urlretrieve(<span class="string">f&#x27;https:<span class="subst">&#123;src&#125;</span>&#x27;</span>, <span class="string">f&#x27;./demo3/<span class="subst">&#123;name&#125;</span>.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;起始页码：&quot;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;结束页码：&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line"></span><br><span class="line">        content = get_content(request)</span><br><span class="line"></span><br><span class="line">        down_load(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JsonPath">JsonPath</h2><p><a href="http://blog.csdn.net/luxideyao/article/details/77802389">语法参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">jsonpath</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/27 15:07</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line">obj = json.load(<span class="built_in">open</span>(<span class="string">&#x27;demo4.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书店所有的书</span></span><br><span class="line"><span class="comment"># author_list = jsonpath.jsonpath(obj, &#x27;$.store.book[*].author&#x27;)</span></span><br><span class="line"><span class="comment"># print(author_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的作者</span></span><br><span class="line"><span class="comment"># author_list = jsonpath.jsonpath(obj, &#x27;$..author&#x27;)</span></span><br><span class="line"><span class="comment"># print(author_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># store下的所有元素</span></span><br><span class="line"><span class="comment"># tag_list = jsonpath.jsonpath(obj, &#x27;$.store.*&#x27;)</span></span><br><span class="line"><span class="comment"># print(tag_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># store下所有的price</span></span><br><span class="line"><span class="comment"># price_list = jsonpath.jsonpath(obj, &#x27;$.store..price&#x27;)</span></span><br><span class="line"><span class="comment"># print(price_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个书</span></span><br><span class="line"><span class="comment"># book_3 = jsonpath.jsonpath(obj, &#x27;$.store.book[2&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一本书</span></span><br><span class="line"><span class="comment"># book_end = jsonpath.jsonpath(obj, &#x27;$..book[(@.length-1)]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_end)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前面的两本书</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj, &#x27;$..book[0,1]&#x27;)</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj, &#x27;$..book[:2]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤出所有的包含isbn的书</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj, &#x27;$..book[?(@.isbn)]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤出价格低于10的书</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj, &#x27;$..book[?(@.price&lt;10)]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有元素</span></span><br><span class="line">e_list = jsonpath.jsonpath(obj, <span class="string">&#x27;$..*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(e_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">jsonpath 解析淘票票</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/27 15:26</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://dianying.taobao.com/cityAction.json?activityId&amp;_ksTS=1701070258998_104&amp;jsoncallback=jsonp105&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># &#x27;:authority&#x27;: &#x27;dianying.taobao.com&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:method&#x27;: &#x27;GET&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:path&#x27;: &#x27;/cityAction.json?activityId&amp;_ksTS=1701071322520_104&amp;jsoncallback=jsonp105&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:scheme&#x27;: &#x27;https&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bx-V&#x27;</span>: <span class="string">&#x27;2.5.5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;_m_h5_tk=5e975e3548c9d6e5d6463f91db59a4d9_1700975872462; _m_h5_tk_enc=7710ed77e01a9cbbd33dbdb7d9c6360e; v=0; _samesite_flag_=true; cookie2=1ad7f9fcf9cdcd8634cb10379c879543; t=27f6a6a05aebe181481642298dfaec21; _tb_token_=5d73533e7793; tfstk=dYHvnyfjjUYDU8BxYZdkbqWZ76Kktxn2mqoCIP4c143-8qK4sscm6NU-AnzD_IutwVgzirMtbOEsfV-4SnRo0myaCeYnWpmq01lw-ef7E98uQRTH-_X_gpeZJAmVTGKRNQYkutMjLoOLunMot1oYDSUOIz6tQY63Mys0PO6_PoBwWvDdhvb3JlfX23CN_SZyCgciV; l=fBEg8NVPPJmjWMJhBO5IFurza779nIRb4PVzaNbMiIEGa6I5tFGDCNCT2DwkSdtjgTCxVeKyMAhYGdLHR3AgCc0c07kqm0S-3xvtaQtJe; isg=BJ-foZ6wBjK0UgIolxPukyW5LvMpBPOmsIAYtDHsuc6VwL9CONQn9iWeglC-3cse&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://dianying.taobao.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;119&quot;, &quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = content.split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;)&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo5.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=json.load(<span class="built_in">open</span>(<span class="string">&#x27;demo5.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">city_list=jsonpath.jsonpath(obj,<span class="string">&#x27;$..regionName&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(city_list)</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup">BeautifulSoup</h2><ol><li>导入 <code>from bs4 import BeautifulSoup</code></li><li>创建对象<ol><li>服务器响应的文件生成对象 <code>soup = Beautifulsoup(response.read().decode(),'lxml')</code></li><li>本地文件生成对象 <code>soup = Beautifulsoup(open('1.html'),'lxml')</code></li></ol></li></ol><blockquote><p>默认打开文件的编码格式gbk所以需要指定打开编码格式</p></blockquote><ol><li>节点定位<ol><li>根据标签名查找节点<ol><li>soup.a：只能找到第一个a</li><li><a href="http://soup.a.name">soup.a.name</a></li><li>soup.a.attrs：获取标签的属性和属性值</li></ol></li><li>函数<ol><li>find：返回一个对象<ol><li>find(‘a’)：只找到第一个a标签</li><li>find(‘a’,title=‘名字’)</li><li>find(‘a’,class_='名字&quot;)：class需要添加下划线</li></ol></li><li>find_all：返回一个列表<ol><li>find_all(‘a’)：查找到所有的a</li><li>find_all([‘a’，‘span’])：返回所有的a和span</li><li>find_all(‘a’,limit=2)：只找前两个a</li></ol></li><li>select：根据选择器得到节点对象<ol><li>element<ol><li>p</li></ol></li><li>.class<ol><li>firstname</li></ol></li><li>#id<ol><li>#firstname</li></ol></li><li>属性选择器<ol><li>[attribute]<ol><li>li = soup.select(‘li[class]’)</li></ol></li><li>[attribute=value]<ol><li>li = soup.select(‘li[class=“hengheng1”]’)</li></ol></li></ol></li><li>层级选择器<ol><li>element element<ol><li>div p</li></ol></li><li>element &gt; element<ol><li>div &gt; p</li></ol></li><li>element,element<ol><li>div,p</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>节点信息<ol><li>获取节点内容：适用于标签中嵌套标签的结构<ol><li>obj.string</li><li>obj.get_text()</li></ol></li><li>节点的属性<ol><li><a href="http://tag.name">tag.name</a>：获取标签名</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag=find(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tag.name)</span><br></pre></td></tr></table></figure><ol start="2"><li>tag.attrs：将属性值作为一个字典返回</li></ol></li><li>获取节点属性<ol><li>obj.attrs.get(‘title’)</li><li>obj.get(‘title’)</li><li>obj[‘title’]</li></ol></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">bs4基本使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/27 18:23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析本地文件</span></span><br><span class="line"><span class="comment"># 默认打开文件的编码格式为gbk</span></span><br><span class="line">soup = BeautifulSoup(<span class="built_in">open</span>(<span class="string">&#x27;demo6.html&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>), <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签名查找节点</span></span><br><span class="line"><span class="comment"># 找到的是第一个符合条件的数据</span></span><br><span class="line"><span class="comment"># print(soup.a)</span></span><br><span class="line"><span class="comment"># 获取标签的属性和属性值</span></span><br><span class="line"><span class="comment"># print(soup.a.attrs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bs4的函数</span></span><br><span class="line"><span class="comment"># find</span></span><br><span class="line"><span class="comment"># 返回第一个符合条件的数据</span></span><br><span class="line"><span class="comment"># print(soup.find(&#x27;a&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据title的值来找到对应的标签对象</span></span><br><span class="line"><span class="comment"># print(soup.find(&#x27;a&#x27;,title=&#x27;a2&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据class的值来找到对应的标签对象 注意的是class需要添加下划线</span></span><br><span class="line"><span class="comment"># print(soup.find(&#x27;a&#x27;, class_=&quot;a1&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find_all</span></span><br><span class="line"><span class="comment"># 返回所有a标签，返回的是一个列表</span></span><br><span class="line"><span class="comment"># print(soup.find_all(&#x27;a&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有的a和span</span></span><br><span class="line"><span class="comment"># print(soup.find_all([&#x27;a&#x27;, &#x27;span&#x27;]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找前几个数据</span></span><br><span class="line"><span class="comment"># print(soup.find_all(&#x27;li&#x27;,limit=2))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select</span></span><br><span class="line"><span class="comment"># 返回一个列表，多个数据</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;a&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过.代表class</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;.a2&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;#l1&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性选择器</span></span><br><span class="line"><span class="comment"># li标签中包含id标签</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;li[id]&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找li标签中id=l2</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;li[id=&quot;l2&quot;]&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 层级选择器</span></span><br><span class="line"><span class="comment"># 后代选择器</span></span><br><span class="line"><span class="comment"># div下的li</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;div li&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子代选择器 第一级子标签</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;div &gt; ul &gt; li&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到a标签和li标签</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;a,li&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点信息</span></span><br><span class="line"><span class="comment"># 获取节点内容</span></span><br><span class="line"><span class="comment"># obj = soup.select(&#x27;#d1&#x27;)[0]</span></span><br><span class="line"><span class="comment"># 如果标签对象中，除了内容还有标签，那么string获取不到内容，但是get_text()可以</span></span><br><span class="line"><span class="comment"># print(obj.get_text())</span></span><br><span class="line"><span class="comment"># print(obj.string)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点属性</span></span><br><span class="line">obj = soup.select(<span class="string">&#x27;#p1&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># name是标签名</span></span><br><span class="line"><span class="comment"># print(obj.name)</span></span><br><span class="line"><span class="comment"># 将属性值作为一个字典返回</span></span><br><span class="line"><span class="comment"># print(obj.attrs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取节点属性</span></span><br><span class="line">obj = soup.select(<span class="string">&#x27;#p1&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.attrs.get(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(obj.get(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(obj[<span class="string">&#x27;class&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">bs4解析</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/28 10:37</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://ssr1.scrape.center/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># //h2[@class=&#x27;m-b-sm&#x27;]/text()</span></span><br><span class="line">name_list = soup.select(<span class="string">&#x27;h2[class=&quot;m-b-sm&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(name.get_text())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Python」Urllib</title>
      <link href="/b532494fed59.html"/>
      <url>/b532494fed59.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用">基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://ssr1.scrape.center/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应中的页面的源码</span></span><br><span class="line"><span class="comment"># read() 返回的是字节形式的二进制数</span></span><br><span class="line"><span class="comment"># 将二进制数据转换为字符串——解码 decode(&#x27;编码的格式&#x27;)</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数据</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h2 id="一个类型和三个方法">一个类型和三个方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">一个类型和三个方法  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Author：binxin  </span></span><br><span class="line"><span class="string">Date：2023/11/19 18:41  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> urllib.request  </span><br><span class="line">  </span><br><span class="line">url = <span class="string">&quot;https://ssr1.scrape.center/&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求  </span></span><br><span class="line">response = urllib.request.urlopen(url)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># response类型为HTTPResponse  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 一个字节一个字节读取  </span></span><br><span class="line"><span class="comment"># content=response.read()  </span></span><br><span class="line"><span class="comment"># print(content)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 返回5个字节  </span></span><br><span class="line"><span class="comment"># content = response.read(5)  </span></span><br><span class="line"><span class="comment"># print(content)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取一行  </span></span><br><span class="line"><span class="comment"># content = response.readline()  </span></span><br><span class="line"><span class="comment"># print(content)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 按行读取所有内容  </span></span><br><span class="line"><span class="comment"># content=response.readlines()  </span></span><br><span class="line"><span class="comment"># print(content)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 返回状态码  </span></span><br><span class="line"><span class="comment"># print(response.getcode())  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 返回url地址  </span></span><br><span class="line"><span class="comment"># print(response.geturl())  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取状态信息  </span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders())</span><br></pre></td></tr></table></figure><h2 id="下载">下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">下载</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/20 20:19</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载网页</span></span><br><span class="line"><span class="comment"># url_page = &quot;https://ssr1.scrape.center/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url代表下载路径 filename文件名</span></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url_page, &#x27;scrape.html&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="comment"># url_img = &#x27;https://p0.meituan.net/movie/ce4da3e03e655b5b88ed31b5cd7896cf62472.jpg@464w_644h_1e_1c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># urllib.request.urlretrieve(url_img,&#x27;scrape.png&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line">url_video = <span class="string">&#x27;https://vd2.bdstatic.com/mda-pkjg3j1629re4z2h/720p/h264/1700480141426778560/mda-pkjg3j1629re4z2h.mp4?v_from_s=hkapp-haokan-hbe&amp;auth_key=1700494480-0-0-98fb46f2a2d69b62592d1344d6ee60b0&amp;bcevod_channel=searchbox_feed&amp;pd=1&amp;cr=2&amp;cd=0&amp;pt=3&amp;logid=2080435259&amp;vid=15565599946852966896&amp;klogid=2080435259&amp;abtest=&#x27;</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url_video,<span class="string">&#x27;bilibili.mp4&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="请求对象的定制">请求对象的定制</h2><ol><li>UA：User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统 及版本、CPU 类型、浏览器及版本。浏览器内核、浏览器渲染引擎、浏览器语言、浏览器插件等</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">请求对象的定制  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Author：binxin  </span></span><br><span class="line"><span class="string">Date：2023/11/20 20:37  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> urllib.request  </span><br><span class="line">  </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span>  </span><br><span class="line">  </span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 请求对象的定制  </span></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)  </span><br><span class="line">  </span><br><span class="line">response = urllib.request.urlopen(request)  </span><br><span class="line">  </span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><h2 id="编解码">编解码</h2><ol><li>get请求方式：urllib.parse.quote()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">get请求的quote方法  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Author：binxin  </span></span><br><span class="line"><span class="string">Date：2023/11/21 11:10  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> urllib.request  </span><br><span class="line"><span class="keyword">import</span> urllib.parse  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取 https://www.bing.com/search?q=周杰伦 网页源码  </span></span><br><span class="line">url = <span class="string">&#x27;https://www.bing.com/search?q=&#x27;</span>  </span><br><span class="line">  </span><br><span class="line">headers = &#123;  </span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将 周杰伦 变为unicode编码格式  </span></span><br><span class="line"><span class="comment"># 依赖于 urllib.prasename = urllib.parse.quote(&#x27;周杰伦&#x27;)  </span></span><br><span class="line">  </span><br><span class="line">url = url + name  </span><br><span class="line">  </span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)  </span><br><span class="line">response = urllib.request.urlopen(request)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取响应内容  </span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><ol start="2"><li>get请求方式：urllib.parse.urlencode()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">get请求urlencode方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/21 11:26</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用场景:多个参数</span></span><br><span class="line"><span class="comment"># https://www.baidu.com/s?wd=周杰伦&amp;sex=男</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;wd&#x27;: &#x27;周杰伦&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;sex&#x27;: &#x27;男&#x27;,</span></span><br><span class="line"><span class="comment">#     &#x27;location&#x27;: &#x27;中国台湾省&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># a = urllib.parse.urlencode(data)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页源码</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;中国台湾省&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">url = url + data</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>post请求方式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">post请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/21 16:26</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>: <span class="string">&#x27;spider&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数 必须要编码</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的参数需要放在请求对象定制的参数中</span></span><br><span class="line">request = urllib.request.Request(url=url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串 --&gt; json</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">obj = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">百度详细翻译</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/21 16:40</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># &#x27;Accept&#x27;: &#x27;*/*&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该行必须注释</span></span><br><span class="line">    <span class="comment"># &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Acs-Token&#x27;: &#x27;1700554896797_1700555095251_haVFbhHVYodef+ABK34At5fE26z1GIBgK/5G/9f1yFzBA9YZ1QBKmV3/5uvNRmnNbLoH37UeOdciaPkcXzg5nmb1SdilOIoDEuDPRQ2slMYnAf3HxoiAcNv87L9UmtSu32wpt1gf6xcHChw9O+cWpCvdMwz7i/VaxfVqHVw48APnJ3YDedj4kLU2Jb2zKS82NpTXClm9oWXH0KQKQCjFl/91IfozQPxc6FWDsbnlmYi53NwunPzGIbuKLED+FcoLVE5yHDnClCH4SpyoC1oy03PPeEPUPxjP4ZBnaIro9NVDwqkcbWs1zuaMjwtXtQjXfKBDQtFoH3+a1KQgm2Z1BskaL1D85Z8FmrQvl+p8fjm9FZc/TM49BFjN3vrgzy+orf1Bk5PtTZFpYqMQ/qyEkLFNF5NV/BTdOzXhYB5If++Zth5IdGEiewM8xmLbikmnHuQG/2MFze06MR2wTNLM1ddbsHGXduBL1SZT1BH3Nhs=&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Connection&#x27;: &#x27;keep-alive&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Content-Length&#x27;: &#x27;153&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; PSTM=1690027568; ZFY=hJHsAJcm:BzM1AXD9a0vLfFZGJrzgW2kpVMqv0v6Ps1o:C; H_WISE_SIDS=234020_216844_213353_214793_110085_244716_257731_257015_260234_253022_259300_261715_236312_256419_265302_265881_266361_265776_267288_267371_266846_267421_265615_267405_265986_256302_266188_267898_259033_266713_268406_268593_268030_268842_259643_269232_269388_268766_188333_269730_269832_269904_269803_269049_267066_256739_270460_270534_267528_270625_270664_270548_270922_270966_271039_268874_270793_271169_271175_271193_268728_269771_267782_268987_269034_271229_269621_267659_271319_265032_269892_266027_270482_269609_270102_271608_270876_270443_269785_270157_271671_271985_271813_271957_271954_271943_256151_269211_234295_234207_266324_271187_272225_270055_272279_263618_267596_272055_272366_272008_272337_267559_272460_271145_8000076_8000108_8000124_8000136_8000159_8000164_8000168_8000177_8000179_8000186_8000203; BAIDU_WISE_UID=wapp_1692517164729_638; __bid_n=18a11e266418064ed3a010; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1692497260,1692755924,1693024343,1693128438; H_WISE_SIDS_BFESS=234020_216844_213353_214793_110085_244716_257731_257015_260234_253022_259300_261715_236312_256419_265302_265881_266361_265776_267288_267371_266846_267421_265615_267405_265986_256302_266188_267898_259033_266713_268406_268593_268030_268842_259643_269232_269388_268766_188333_269730_269832_269904_269803_269049_267066_256739_270460_270534_267528_270625_270664_270548_270922_270966_271039_268874_270793_271169_271175_271193_268728_269771_267782_268987_269034_271229_269621_267659_271319_265032_269892_266027_270482_269609_270102_271608_270876_270443_269785_270157_271671_271985_271813_271957_271954_271943_256151_269211_234295_234207_266324_271187_272225_270055_272279_263618_267596_272055_272366_272008_272337_267559_272460_271145_8000076_8000108_8000124_8000136_8000159_8000164_8000168_8000177_8000179_8000186_8000203; APPGUIDE_10_6_5=1; APPGUIDE_10_6_6=1; BAIDUID_BFESS=EBC2B0F02DE54CA945DEC2A522C58DC0:FG=1; APPGUIDE_10_6_7=1; APPGUIDE_10_6_9=1; BDUSS=VBqWS16dlBxNHBaQjA4c04yM2Z3S1hJVEp2MGY4YWpCenZ0flZMVnZwSlZobjFsRVFBQUFBJCQAAAAAAQAAAAEAAAA1wVhn1r3Uwsz9xM~J-QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFX5VWVV-VVlU; BDUSS_BFESS=VBqWS16dlBxNHBaQjA4c04yM2Z3S1hJVEp2MGY4YWpCenZ0flZMVnZwSlZobjFsRVFBQUFBJCQAAAAAAQAAAAEAAAA1wVhn1r3Uwsz9xM~J-QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFX5VWVV-VVlU; BIDUPSID=EBC2B0F02DE54CA945DEC2A522C58DC0; H_PS_PSSID=39669_39663_39676_39678_39710_39713_39749_39674_39785_39703_39793_39682; BA_HECTOR=248l252k80ak00240l2080051ilmkii1r; RT=&quot;z=1&amp;dm=baidu.com&amp;si=82643ae1-aaab-49e1-b3e4-a3c61e4bb037&amp;ss=lp6w2pjo&amp;sl=1&amp;tt=1s7&amp;bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&amp;ld=2ui&amp;ul=smo&amp;hd=sn6&quot;; ab_sr=1.0.1_YTNiYWUxNWM0YmU5MWRlMDdjNWY2MThlOTA0NDEzNmEwM2FhNTFkNzRiYzVkMjI4YTdjNjI5MTU5OWZlNzk4ZDU3NmViNmMzMjhlNTk2ZTI0ZDUzMTQzMTQzZTJiYWNiODBmOTVkYzVkOGQ1NWY1MGY2NDNlNTBmYzk4Njg1OWU5Y2IyZTA2OWRmYjQ4MjRhYWM2MWFiN2FkYTRhYjM5Y2NjMmE1NmYwMzFiMTgxNGQ1YjdjMGEwYzczZWU2NWMy&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Dnt&#x27;: &#x27;1&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Host&#x27;: &#x27;fanyi.baidu.com&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Origin&#x27;: &#x27;https://fanyi.baidu.com&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Referer&#x27;: &#x27;https://fanyi.baidu.com/&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sec-Ch-Ua&#x27;: &#x27;&quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Microsoft Edge&quot;;v=&quot;120&quot;&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sec-Ch-Ua-Mobile&#x27;: &#x27;?0&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sec-Ch-Ua-Platform&#x27;: &#x27;Windows&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sec-Fetch-Dest&#x27;: &#x27;empty&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sec-Fetch-Mode&#x27;: &#x27;cors&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sec-Fetch-Site&#x27;: &#x27;same-origin&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sec-Gpc&#x27;: &#x27;1&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;spider&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;realtime&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;63766.268839&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;ae16933c30637316aa2381165ae3e29a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ts&#x27;</span>: <span class="string">&#x27;1700555095216&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">obj = json.loads(content)</span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ajax的get请求">ajax的get请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax get请求</span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/23 19:16</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取豆瓣电影第一页的数据，并且保存起来</span></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据下载到本地</span></span><br><span class="line"><span class="comment"># fp = open(&#x27;douban.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># fp.write(content)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;douban1.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">豆瓣电影前十页</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/23 19:30</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载豆瓣电影前十页</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;&quot;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: (page - <span class="number">1</span>) * <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data)</span><br><span class="line"></span><br><span class="line">    url = base_url + data</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page, content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;douban<span class="subst">&#123;page&#125;</span>.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;起始页码：&quot;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;结束页码：&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">        <span class="comment">#         每一页都有自己的请求</span></span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line">        down_load(page, content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ajax的post请求">ajax的post请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ajax post</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/23 20:15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    base_url = <span class="string">&quot;https://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&quot;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: page,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url=base_url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">page, content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;kfc<span class="subst">&#123;page&#125;</span>.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;起始页码：&quot;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;结束页码：&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page, end_page + <span class="number">1</span>):</span><br><span class="line">        request = create_request(page)</span><br><span class="line">        content = get_content(request)</span><br><span class="line"></span><br><span class="line">        down_load(page, content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="URLError-HTTPError">URLError\HTTPError</h2><ol><li>HTTPError类是URLError类的子类</li><li>导入的包<code>urllib.error.HTTPError</code> <code>urllib.error.URLError</code></li><li>http错误：http错误是针对浏览器无法连接到服务器而增加出来的错误提示。引导并告诉浏览者该页是哪里出了问题</li><li>通过urllib发送请求的时候，有可能会发送失败，这个时候如果想让你的代码更加的健壮，可以通过try-except进行捕获异常，异常有两类，URLError\HTTPError</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">URLError/HTTPError</span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/23 20:40</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &quot;https://blog.csdn.net/qq_43546721/article/details/1340030121&quot;</span></span><br><span class="line">url = <span class="string">&#x27;https://www.goudan111.com&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;系统正在升级...&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;系统升级&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Cooking登录">Cooking登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">cooking登录</span></span><br><span class="line"><span class="string">在数据采集需要绕过登录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/23 20:51</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://m.weibo.cn/profile/7844546355&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;WEIBOCN_FROM=1110006030; SUB=_2A25IWztpDeRhGeFG71YU9CjPzjmIHXVrGTKhrDV6PUJbkdANLUHckW1NeW0UMmSkDnXteuMWZ6_P3Hrnm486Vsys; MLOGIN=1; _T_WM=60448710269; M_WEIBOCN_PARAMS=lfid%3D102803%26luicode%3D20000174%26uicode%3D20000174; XSRF-TOKEN=fd466d; mweibo_short_token=5c3125a1a8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mweibo-Pwa&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://m.weibo.cn/profile/7844546355&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;119&quot;, &quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;Windows&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;weibo.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Handler处理器">Handler处理器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Handler处理器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/24 14:16</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取handler对象</span></span><br><span class="line">handler = urllib.request.HTTPSHandler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取opener对象</span></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用open方法</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代理服务器">代理服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">代理服务器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/24 14:25</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(request)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可在快代理使用免费ip</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;121.226.89.230:20516&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=proxies)</span><br><span class="line"></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代理池">代理池</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">代理池</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/24 14:47</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">proxies_pool = [</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;42.249.189.41:17666&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;27.154.221.103:19542&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">proxies = random.choice(proxies_pool)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=proxies)</span><br><span class="line"></span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;daili.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」其他</title>
      <link href="/681ae77c920d.html"/>
      <url>/681ae77c920d.html</url>
      
        <content type="html"><![CDATA[<h2 id="memset函数"><code>memset</code>函数</h2><p><code>memset</code> 函数是C语言标准库中的一个函数，它用于将一段内存区域的每个字节设置为指定的值。其主要作用是初始化内存，将一块内存区域的内容设置为相同的值。</p><p><code>memset</code> 函数的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">memset</span><span class="params">(<span class="type">void</span> *s, <span class="type">int</span> c, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li><code>s</code>：指向要设置的内存区域的指针。</li><li><code>c</code>：要设置的值，通常是一个整数。<code>c</code> 被转换为无符号字符，然后复制到内存中。</li><li><code>n</code>：要设置的字节数，即要初始化的内存区域的大小。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」文件</title>
      <link href="/14dcc4940e41.html"/>
      <url>/14dcc4940e41.html</url>
      
        <content type="html"><![CDATA[<h2 id="C语言文件的概念">C语言文件的概念</h2><ol><li>顺序存取<ol><li>进行读或写操作时，总是从文件的开头开始，从头到尾顺序地读或写</li></ol></li><li>直接存取（随机存取）<ol><li>通过调用C语言的函数库去指定开始读或写的字节号，然后直接对此位置上的数据进行读，或把数据写到此位置上</li></ol></li></ol><h2 id="文件指针">文件指针</h2><ol><li>一般形式：<code>FILE *指针变量名</code></li></ol><h2 id="打开文件">打开文件</h2><ol><li>fopen函数的一般调用形式：<code>fopen(文件名，文件使用方式);</code><ol><li>若调用成功，函数返回一个FILE类型的指针，赋给文件指针变量fp，从而把指针fp与文件file_a联系起来</li><li>若打开文件失败，返回NULL</li></ol></li><li>文件使用方式<ol><li>“r”：为读打开文本文件，对打开文件只能进行“读”操作</li><li>“rb”：为读打开二进制文件，其余功能与“r”相同</li><li>“w”：为写打开文本文件。如果指定文件不存在，系统将用在fopen调用中指定的文件名建立一个新文件；如果指定文件存在，则从文件的起始位置开始写，文件中原有的内容将全部消失</li><li>“wb”：为写打开一个二进制文件。可以在指定文件位置进行写操作，其余功能与“w”相似</li><li>“a”：为在文件后面添加数据而打开文本文件。如果指定文件不存在，系统将用在fopen调用中指定的文件名建立一个新文件；如果指定文件存在，则文件中原有的内容将保存，新的数据写在原有内容之后</li><li>“ab”：为在文件后面添加数据而打开二进制文件。其余功能与“a”相同</li><li>“r+”：为读和写打开文本文件。指定文件应当已经存在，读和写总是从文件的起始位置开始；在写新数据时，只覆盖新数据所占的空间，其后的老数据并不丢失</li><li>“rb+”：为读和写打开二进制文件。功能与“r+”相同，只是在读和写时，可以由位置函数设置读和写的起始位置</li><li>“w+”：首先建立一个新文件，进行写操作，随后可以从头开始读。如果指定文件已存在，则原有的内容将全部消失</li><li>“wb+”：功能与“w+”相同，只是在随后的读和写时，可以由位置函数设置读和写的起始位置</li><li>“a+”：功能与“a”相同，只是在文件尾部添加新的数据后，可以从头开始读</li><li>“ab+”：功能与“a+”相同，只是在文件尾部添加新的数据后，可以由位置函数设置开始读的起始位置</li></ol></li></ol><h2 id="关闭文件">关闭文件</h2><ol><li>fclose函数的调用形式：<code>fclose(文件指针);</code></li><li>当成功执行了关闭操作后，函数返回0，否则返回非0</li></ol><h2 id="调用getc-fgetc-和putc-fputc-函数进行输入和输出">调用getc(fgetc)和putc(fputc)函数进行输入和输出</h2><h3 id="一、调用putc（或fputc）函数输出一个字符">一、调用putc（或fputc）函数输出一个字符</h3><ol><li>putc函数调用形式：<code>putc(ch,fp);</code><ol><li>ch是待输出的某个字符，它可以是一个字符常量，也允许是一个字符变量</li><li>fp是文件指针</li><li>将字符ch写到文件指针fp文件所指的文件中去</li><li>如果输出成功，putc函数返回所输出的字符；如果输出失败，则返回一个EOF值。EOF是在stdio.h库函数文件中定义的符号常量，其值等于-1</li></ol></li><li>fputc函数的调用形式和功能与putc函数完全相同</li></ol><h3 id="二、调用getc（或fgetc）函数输出一个字符">二、调用getc（或fgetc）函数输出一个字符</h3><ol><li>getc函数的调用形式：<code>ch=getc(pf);</code><ol><li>pf指文件指针</li><li>从pf指定的文件中读入一个字符，并把它作为函数值返回</li></ol></li><li>fgetc函数的调用形式和功能与getc函数完全相同</li></ol><h2 id="判断文件结束函数feof">判断文件结束函数feof</h2><ol><li>如果遇到文件结束，函数feof(fp)的值为1，否则为0</li></ol><h2 id="fscanf函数和fprintf函数">fscanf函数和fprintf函数</h2><ol><li>fsacnf函数：<code>fscanf(文件指针，格式控制字符串，输入项表);</code><ol><li>fscanf函数只能从文本文件中按格式输入</li></ol></li><li>fprintf函数：<code>fprint(文件指针，格式控制字符串，输入项表);</code><ol><li>fprintf函数按格式将内存中的数据转换成对应的字符，并以ASCII代码形式输出到文本文件中</li></ol></li></ol><h2 id="fgets函数和fputs函数">fgets函数和fputs函数</h2><ol><li>fgets函数：<code>fgets(str,n,fp);</code><ol><li>fp是文件指针，str是存放字符串的起始地址，n是一个int型变量</li><li>从fp所指文件中读入n-1个字符放入以str为起始地址的空间内。如果在未读满n-1个字符时，已读到一个换行符或一个EOF（文件结束标志），则结束本次读操作，读入字符串的最后包含读到的换行符</li><li>读入结束后，系统将自动在最后加 <code>\0</code> ，并以str作为函数值返回</li></ol></li><li>fputs函数：<code>fputs(str,fp);</code><ol><li>fp是文件指针；str是待输出的字符串，可以是字符串常量，指向字符串的指针或存放字符串的字符数组名等</li><li>最后的 <code>\0</code> 并不输出，也不自动加 <code>\n</code></li><li>输出成功函数值为正整数，否则为-1（EOF）</li><li>调用函数输出字符时，文件中各字符串将首尾相连，它们之间将不存在任何间隔符</li></ol></li></ol><h2 id="fread函数和fwrite函数">fread函数和fwrite函数</h2><ol><li>fread函数：<code>fread(buffer,size,count,fp);</code><ol><li>buffer是数据块的指针，内存块的首地址，输入的数据存入此内存块中</li></ol></li><li>fwrite函数：<code>fwrite(buffer,size,count,fp);</code><ol><li>buffer是数据块的指针，准备输出的内存块的起始地址</li></ol></li><li>size表示每个数据块的字节数</li><li>count用来指定每读、写一次，输入或输出数据块的个数（每个数据块具有size字节）</li></ol><h2 id="文件定位函数">文件定位函数</h2><h3 id="fseek函数">fseek函数</h3><ol><li>调用形式：<code>fseek(fp,offset,origin);</code><ol><li>pf是文件指针</li><li>offset是以字节为单位的位移量，为长整型</li><li>origin是起始点，用以指定位移量是以哪个位置为基准，起始点既可以用标识符来表示，也可以用数字来表示</li></ol></li></ol><table><thead><tr><th style="text-align:left">标识符</th><th style="text-align:left">数字</th><th style="text-align:left">代表的起始点</th></tr></thead><tbody><tr><td style="text-align:left">SEEK_SET</td><td style="text-align:left">0</td><td style="text-align:left">文件开始</td></tr><tr><td style="text-align:left">SEEK_END</td><td style="text-align:left">2</td><td style="text-align:left">文件末尾</td></tr><tr><td style="text-align:left">SEEK_CUR</td><td style="text-align:left">1</td><td style="text-align:left">文件的当前位置</td></tr></tbody></table><ol start="2"><li>对于二进制文件，当位移量为正整数时，表示位置指针从指定的起始点向文件尾部方向移动；当位移量为负整数时，表示位置指针从指定的起始点向文件首部方向移动</li><li>对于文本文件，位移量必须是0</li></ol><h3 id="ftell函数">ftell函数</h3><ol><li>ftell函数用以获得文件当前位置指针的位置，函数给出当前位置指针相对于文件开头的字节数</li><li>调用形式：<code>long t = ftell(fp);</code><ol><li>当函数调用出错时，函数返回-1L</li></ol></li></ol><h3 id="rewind函数">rewind函数</h3><ol><li>调用形式：<code>rewind(pf);</code></li><li>函数没有返回值，函数的功能是使文件的位置指针回到文件的开头</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」位运算</title>
      <link href="/1352fcc57e40.html"/>
      <url>/1352fcc57e40.html</url>
      
        <content type="html"><![CDATA[<h2 id="位运算符">位运算符</h2><ol><li>只有 <code>~</code> 为单目运算符，其余均为双目运算符</li></ol><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">含义</th><th style="text-align:left">优先级</th></tr></thead><tbody><tr><td style="text-align:left"><code>~</code></td><td style="text-align:left">按位求反</td><td style="text-align:left">1（高）</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或</td><td style="text-align:left">5（低）</td></tr></tbody></table><h2 id="位运算符的运算功能">位运算符的运算功能</h2><h3 id="“按位取反”运算">“按位取反”运算</h3><ol><li>把运算对象的内容按位取反</li></ol><blockquote><p><code>~0115</code> 将八进制数115按位取反<br><code>~ 0 1 0 0 1 1 0 1</code> 把运算对象用二进制来表示<br>————————<br>1 0 1 1 0 0 1 0</p></blockquote><h3 id="“左移”运算">“左移”运算</h3><ol><li>运算符左边是移位运算符，右边是整型表达式，代表移位位数</li><li>左移时，右端（低位）补0；左端（高位）移出的部分舍弃</li></ol><blockquote><p>char a=6,b;<br>b=a&lt;&lt;2;<br>用二进制来表示运算过程如下：<br>a:0 0 0 0 0 1 1 0<br>b=a&lt;&lt;2:0 0 0 1 1 0 0 0</p></blockquote><h3 id="“右移”运算">“右移”运算</h3><ol><li>右移时，右端（低位）移出的二进制数舍弃，左端（高位）移入的二进制数分两种情况：对于无符号整数和正整数，高位补0；对于负整数，高位补1</li></ol><h3 id="“按位与”运算">“按位与”运算</h3><ol><li>把参与运算的两个运算数按对应的二进制位分别进行“与”运算，当两个相应的位数都为1时，该位的结果为1；否则为0</li></ol><h3 id="“按位异或”运算">“按位异或”运算</h3><ol><li>参与运算的两个运算数中相对应的二进制位上，若数相同，则该位的结果为0；若数不同，则该位的结果为1</li></ol><h3 id="“按位或”运算">“按位或”运算</h3><ol><li>参与运算的两个运算数中，只要两个相应的二进制位中有一个为1，该位的运算结果即为1；只有当两个相应位的数都为0时，该位的运算结果才为0</li></ol><h3 id="位数不同的运算数之间的运算规则">位数不同的运算数之间的运算规则</h3><ol><li>位运算的对象可以是整型（long int或int或short）和字符型（char）数据</li><li>当两个运算数类型不同时位数也会不同，系统将进行以下处理<ol><li>先将两个运算数右端对齐</li><li>再将位数短的一个运算数往高位扩充，即无符号和正整数左侧用0补全，负数左侧用1补全，然后对位数相等的这两个运算数按位进行位运算</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」结构体、共用体和用户定义类型</title>
      <link href="/4a32bc901820.html"/>
      <url>/4a32bc901820.html</url>
      
        <content type="html"><![CDATA[<h2 id="用typedef说明一种新类型名">用typedef说明一种新类型名</h2><ol><li>一般形式：<code>typedef 类型名 标识符;</code></li><li>“类型名”必须是在此语句之前已有定义的类型标识符</li><li>“标识符”是一个用户定义标识符，用作新的类型名</li><li>typedef语句的作用仅仅是用“标识符”来代表已存在的“类型名”，并未产生新的数据类型，原有类型名依然有效</li></ol><h2 id="结构体类型">结构体类型</h2><h3 id="结构体类型的说明">结构体类型的说明</h3><ol><li>一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体标识名&#123;</span></span><br><span class="line">类型名<span class="number">1</span> 结构成员名表<span class="number">1</span>;</span><br><span class="line">类型名<span class="number">2</span> 结构成员名表<span class="number">2</span>;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">类型名n 结构成员名表n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>struct是关键字，是结构体类型的标志</li><li>“结构体标识名”和“结构成员名”都是用户定义的标识符，其中“结构体标识符”是可选项，在说明中可以不出现</li><li>每个“结构成员名表”中都可以含有多个同类型的成员名，它们之间以逗号分隔</li><li>结构体中的成员名可以和程序中的其他变量同名；不同结构体中的成员也可以同名</li><li>结构体类型说明中的“类型名1”~“类型名n”不仅可以是简单数据类型，也可以是构造类型、某种结构体类型</li><li>ANSI C标准规定结构体至少允许嵌套15层，并且允许内嵌结构体成员的名字与外层成员的名字相同</li></ol><h3 id="结构体类型的变量、数组和指针变量的定义">结构体类型的变量、数组和指针变量的定义</h3><ol><li>紧跟在结构体类型说明之后进行定义<ol><li>std只能存放1组数据；pers可以存放3组；pstd可以指向具有struct student类型的存储单元，但目前还没有具体的指向</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">birthday</span>;</span></span><br><span class="line"><span class="type">float</span> sc[<span class="number">4</span>];</span><br><span class="line">&#125; <span class="built_in">std</span>,pers[<span class="number">3</span>],*pstd;</span><br></pre></td></tr></table></figure><ol start="2"><li>在说明一个无名结构体类型的同时，直接进行定义</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">···</span><br><span class="line">&#125; <span class="built_in">std</span>,pers[<span class="number">3</span>],*pstd;</span><br></pre></td></tr></table></figure><ol start="3"><li>先说明结构体类型，再单独进行变量定义<ol><li>这种定义方法不能只使用struct而不写结构体标识符student</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">···</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">std</span>,<span class="title">pers</span>[3],*<span class="title">pstd</span>;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用typedef说明一个结构体类型名，再用新类型名来定义变量</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">birthday</span>;</span></span><br><span class="line"><span class="type">float</span> sc[<span class="number">4</span>];</span><br><span class="line">&#125; STREC;</span><br><span class="line">STREC <span class="built_in">std</span>,pers[<span class="number">4</span>],*pstd;</span><br></pre></td></tr></table></figure><h3 id="给结构体变量、数组赋初值">给结构体变量、数组赋初值</h3><ol><li>给结构体变量赋初值：所赋初值顺序放在一对花括号中<ol><li>不允许跳过前面的成员给后面的成员赋初值，可以只给前面的若干个成员赋初值，对于后面未赋初值的成员，系统将自动为数值型和字符型数据赋初值零</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">birthday</span>;</span></span><br><span class="line"><span class="type">float</span> sc[<span class="number">4</span>];</span><br><span class="line">&#125; <span class="built_in">std</span>=&#123;<span class="string">&quot;Li Ming&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1962</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">88</span>,<span class="number">76</span>,<span class="number">86.5</span>,<span class="number">90</span>&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>给结构体数组赋初值：通常将其成员的值依次放在一对花括号中</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookcard</span>&#123;</span></span><br><span class="line"><span class="type">char</span> num[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> money;</span><br><span class="line">&#125; bk[<span class="number">3</span>]=&#123;&#123;<span class="string">&quot;No.1&quot;</span>,<span class="number">35.5</span>&#125;,&#123;<span class="string">&quot;No.2&quot;</span>,<span class="number">25.0</span>&#125;,&#123;<span class="string">&quot;No.3&quot;</span>,<span class="number">66.7</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="引用结构体变量中的数据">引用结构体变量中的数据</h3><h4 id="对结构体变量成员的引用">对结构体变量成员的引用</h4><ol><li>引用形式<ol><li>结构体变量名.成员名</li><li>指针变量名-&gt;成员名</li><li>(*指针变量名).成员名</li></ol></li><li>“.”称为运算成员符；“-&gt;”称为结构指向运算符，之间没有空格</li><li>访问结构体变量中哥内嵌结构体成员时，必须逐层使用成员名定位</li></ol><h4 id="相同类型结构体变量之间的整体赋值">相同类型结构体变量之间的整体赋值</h4><ol><li>ANSI C标准允许相同类型的结构体变量之间进行整体赋值</li></ol><h3 id="函数之间结构体变量的数据传递">函数之间结构体变量的数据传递</h3><ol><li>向函数传递结构体变量中单个成员的数据</li><li>向函数传递整个结构体变量中的数据</li><li>传递结构体变量的地址</li><li>向函数传递结构体数组名</li><li>函数返回值是结构体类型</li><li>函数返回值可以是指向结构体变量的指针类型</li></ol><h3 id="利用结构体变量构成链表">利用结构体变量构成链表</h3><ol><li>结构体中含有可以指向本结构体的指针成员</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个简单的链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">NODETYPE</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    NODETYPE a, b, c, *h, *p;</span><br><span class="line">    a.data = <span class="number">10</span>;</span><br><span class="line">    b.data = <span class="number">20</span>;</span><br><span class="line">    c.data = <span class="number">30</span>;    <span class="comment">/*给变量中的data域赋值*/</span></span><br><span class="line">    h = &amp;a; <span class="comment">/*将结点相连*/</span></span><br><span class="line">    a.next = &amp;b;</span><br><span class="line">    b.next = &amp;c;</span><br><span class="line">    c.next = <span class="literal">NULL</span>;</span><br><span class="line">    p = h;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;   <span class="comment">/*移动p，使之依次指向a、b、c,输出它们data域中的值*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;    <span class="comment">/*p顺序后移*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>单向链表<ol><li>每个结点应该由两个成员组成：一个是整型的成员；一个是指向自身结构的指针类型成员</li></ol></li></ol><h2 id="共用体">共用体</h2><blockquote><p>结构体变量中的成员各自占有自己的存储空间，而共用体变量中的所有成员占有同一个存储空间</p></blockquote><h3 id="共用体类型的说明和变量定义">共用体类型的说明和变量定义</h3><ol><li>一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> 共用体标识名&#123;</span></span><br><span class="line">类型名<span class="number">1</span> 共用体成员名<span class="number">1</span>;</span><br><span class="line">类型名<span class="number">2</span> 共用体成员名<span class="number">2</span>;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">类型名n 共用体成员名n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>union是关键字，是共用体类型的标志</li><li>共用体标识名是可选项，在说明中可以不出现</li><li>共用体成员可以是简单变量，也可以是数组、指针、结构体和共用体（结构体成员也可以是共用体）</li><li>共用体变量的定义与结构体变量的定义类似</li></ol><blockquote><p>(1) 共用体变量在定义的同时只能用第一个成员的类型的值进行初始化<br>(2) 由于共用体变量中的所有成员共享存储空间，因此变量中的所有成员的首地址相同，而且变量的首地址也就是该成员变量的首地址</p></blockquote><h3 id="共用体变量的引用">共用体变量的引用</h3><ol><li>共用体变量中成员的引用<ol><li>一般形式</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">共用体变量名.成员名</span><br><span class="line">指针变量名-&gt;成员名</span><br><span class="line">(*指针变量名).成员名</span><br></pre></td></tr></table></figure><ol start="2"><li>共用体变量中起作用的是最近一次存入的成员变量的值，原有成员变量的值将被覆盖</li></ol></li><li>共用体变量的整体赋值<ol><li>ANSI C标准允许在两个类型相同的共用体变量之间进行赋值操作</li></ol></li><li>向函数传递共用体变量的值<ol><li>共用体类型的变量可以作为实参进行传递，也可以传送共用体变量的地址</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」编译预处理和动态存储分配</title>
      <link href="/01c591089b48.html"/>
      <url>/01c591089b48.html</url>
      
        <content type="html"><![CDATA[<h2 id="编译预处理">编译预处理</h2><blockquote><p>C语言中，凡是以“#”开头的行，都被称为“编译预处理”命令行</p></blockquote><h3 id="宏替换">宏替换</h3><ol><li>不带参数的宏定义<ol><li>命令行形式</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 替换文本</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名</span></span><br></pre></td></tr></table></figure><ol start="2"><li>替换文本可以包含已定义过的宏名</li><li>当宏定义在一行中写不下，只需要在最后一个字符后紧接着加一个反斜线“\”<ol><li>如果在“\”前或在下一行的开头留有许多空格，则在宏替换时也加入这些空格</li></ol></li><li>同一个宏名不能重复定义，除非两个宏定义命令行完全一致</li><li>替换文本不能替换双引号中与宏名相同的字符串</li><li>替换文本并不替换用户标识符中的成分</li><li>用作宏名的标识符通常用大写字母表示</li><li>宏定义的定义位置一般写在程序的开头</li></ol></li><li>带参数的宏定义<ol><li>命令行形式：<code>#define 宏名(形参表) 替换文本</code></li><li>同一个宏名不能重复定义，除非两个宏定义命令行完全一致</li><li>在调用带参数的宏名时，一对圆括号必不可少，圆括号中实参的个数应该与形参个数相同，若有多个参数，它们之间用逗号隔开</li><li>在“替换文本”中的形参和整个表达式应该用括号括起来</li><li>在宏替换中，对参数没有类型的要求</li><li>宏替换中，实参不能替换括在双引号中的形参</li></ol></li><li>终止宏定义<ol><li>可以用 <code>#undef</code> 提前终止宏定义的作用域</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line">main()&#123;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件包含">文件包含</h3><ol><li>一般形式：<code>#include &lt;文件名&gt;</code> 或 <code>#include &quot;文件名&quot;</code></li></ol><h2 id="动态存储分配">动态存储分配</h2><h3 id="malloc函数和free函数">malloc函数和free函数</h3><h4 id="malloc函数">malloc函数</h4><ol><li>malloc函数返回值类型为void *，函数的调用形式为 <code>malloc(size)</code> ，要求size的类型为unsigned int</li><li>malloc函数用来分配size个字节的存储区，返回一个指向存储区首地址的基类型为void的地址。若没有足够的内存单元供分配，函数返回空(NULL)</li><li>在动态申请存储空间时，若不能确定数据类型所占字节数，可以使用sizeof运算符来求得 <code>pi=(int *)malloc(sizeof(int));</code></li></ol><h4 id="free函数">free函数</h4><ol><li>函数的调用形式：<code>free(p);</code></li><li>指针变量p必须指向有动态分配函数malloc或calloc分配的地址</li><li>free函数将指针p所指的存储空间释放</li><li>此函数没有返回值</li></ol><h3 id="calloc函数">calloc函数</h3><ol><li>函数的返回值类型为void *</li><li>调用形式：<code>calloc(n,size);</code> ，要求n和size的类型都为unsigned int</li><li>calloc函数用来给n个同一类型的数据项分配连续的存储空间，每个数据项的长度为size个字节。若分配成功，函数返回存储空间的首地址；否则返回空</li><li>通过调用calloc函数所分配的存储单元，系统自动置初值0</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」对函数的进一步讨论</title>
      <link href="/a8b3854293c7.html"/>
      <url>/a8b3854293c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="传给main函数的参数">传给main函数的参数</h2><ol><li>main函数通常可用两个参数<ol><li>第一个参数argc必须是整型</li><li>第二个参数argv是一个指向字符型的指针数组指针，每个指针都指向一个字符串</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="type">int</span> argc, <span class="type">char</span> **argv)&#123;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过实参向函数传递函数名或指向函数的指针变量">通过实参向函数传递函数名或指向函数的指针变量</h2><ol><li>指向函数指针变量的定义：C语言中函数名代表该函数的入口地址，因此可以定义一种指向函数的指针来存放这种地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> *p)</span>&#123;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="type">double</span> (*fp)(<span class="type">int</span>, <span class="type">int</span> *),y;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">fp = fun;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">y = (*fp)(<span class="number">56</span>, &amp;n);    <span class="comment">/* 此处通过指向函数的指针调用fun函数 */</span></span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>函数名或指向函数的指针变量作为实参：函数名或指向函数的指针变量可以作为实参传送给函数</li></ol><h2 id="函数的递归调用">函数的递归调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用递归的方法求n!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d!=%d&quot;</span>, n, fac(n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> f;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        f = n * fac(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」用户标识符的作用域和存储类</title>
      <link href="/23a7ed07467c.html"/>
      <url>/23a7ed07467c.html</url>
      
        <content type="html"><![CDATA[<h2 id="局部变量">局部变量</h2><ol><li>局部变量（内部变量）：在函数内部或符合语句内部定义的变量<ol><li>函数的形参也属于局部变量</li></ol></li><li>全局变量（外部变量）：在函数外部定义的变量</li><li>C语言中，由两种存储类别：一种是自动类，一种是静态类。局部变量既可以说明成自动类，也可以说明成静态类；局部变量只能是静态类<ol><li>四个与两个存储类别相关的说明符：auto（自动）、register（寄存器）、static（静态）、extern（外部）。它们可以放在类型名的左边，也可以放在类型名的右边</li><li>动态存储区用来保存函数调用时的返回地址、自动类别的局部变量等。静态存储区用以存放局部变量及静态类别的局部变量</li></ol></li></ol><h2 id="局部变量及其作用域和生存期">局部变量及其作用域和生存期</h2><h3 id="auto变量">auto变量</h3><ol><li>当在函数内部或复合语句内定义变量时，如果没有指定存储类，或使用了auto说明符，系统就认为所定义的变量具有自动类别</li><li>auto变量的存储单元被分配在内存的动态存储区。每当进入函数体（或复合语句）时，系统自动为auto变量分配存储单元；退出时自动释放这些存储单元另作他用</li></ol><h3 id="register变量">register变量</h3><ol><li>寄存器变量也是自动类变量。它与auto变量的区别在于用register说明的变量建议编译程序将变量的值保留在CPU寄存器中，而不是像一般变量一样，占存储单元</li><li>CPU中寄存器的数目是有限的，因此只能说明少数的寄存器变量</li><li>register变量没有地址，不能进行求地址运算</li><li>register变量的说明应尽量靠近其使用的地方，用完之后尽快释放</li></ol><h3 id="静态存储类的局部变量">静态存储类的局部变量</h3><ol><li>当在函数体（或复合函数）内部使用static来说明一个变量时，称该变量为静态局部变量</li><li>在程序运行期间，静态局部变量在内存的静态存储区中占据着永久性的存储单元</li><li>静态局部变量的初值是在编译时赋予的，不是在程序执行期间赋予的。对未赋初值的静态局部变量，C编译程序自动给它赋初值0</li></ol><h2 id="全局变量及其作用域和生存期">全局变量及其作用域和生存期</h2><p>全局变量只有静态一种类别。对于全局变量可使用extern和static两种说明符</p><h3 id="全局变量的作用域和生存期">全局变量的作用域和生存期</h3><ol><li>全局变量是在函数外部任意位置上定义的变量，它的作用域是从变量定义的位置开始，到整个源文件结束</li><li>全局变量的生存期是整个程序的运行期间</li><li>若全局变量和某个函数中的局部变量同名，则在该函数中，此全局变量被屏蔽</li></ol><h3 id="在同一编译单位内使用extern说明扩展全局变量的作用域">在同一编译单位内使用extern说明扩展全局变量的作用域</h3><ol><li>当全局变量定义在后，引用它的函数在前时，应该在引用它的函数中用extern对此全局变量进行说明：该变量是一个已在外部定义了的全局变量，已经分配了存储单元，不需再为它另外开辟存储单元。</li></ol><h3 id="在不同编译单位内用extern说明符扩展全局变量的作用域">在不同编译单位内用extern说明符扩展全局变量的作用域</h3><ol><li>在其中一个文件中定义所有全局变量，而在其他用到这些全局变量的文件中用extern对这些变量进行说明</li></ol><h3 id="静态全局变量">静态全局变量</h3><ol><li>静态全局变量只限于本编译单位使用，不能被其他编译单位所引用</li></ol><h2 id="函数的存储分类">函数的存储分类</h2><h3 id="用extern说明函数">用extern说明函数</h3><ol><li>若在函数返回值的类型前加上说明符extern，称此函数为“外部”函数</li><li>extern说明可以省略，一般函数都隐含说明为extern</li><li>外部函数的特征为可以被其他编译单位中的函数调用</li></ol><h3 id="用static说明函数">用static说明函数</h3><ol><li>若在函数返回值的类型前加上说明符static，称此函数为“静态”函数</li><li>静态函数的特征是只限于本编译单位的其他函数调用它，而不允许其他编译单位中的函数对它进行调用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」字符串</title>
      <link href="/3930558c6af5.html"/>
      <url>/3930558c6af5.html</url>
      
        <content type="html"><![CDATA[<h2 id="用一维字符数组存放字符串">用一维字符数组存放字符串</h2><ol><li>C语言对字符串的约定<ol><li>字符串是借助与字符型一维数组来存放的，并规定以字符 <code>\0</code> 作为“字符串结束标志”</li><li><code>\0</code> 作为标志占用存储空间，但不计入串的实际长度</li></ol></li><li>C语言中表示字符串常量的约定<ol><li>字符串常量是由双引号括起来的一串字符，系统将自动在末尾添加字符 <code>\0</code></li></ol></li><li>C语言中字符串常量给出的是地址值</li><li>字符数组与字符串的区别<ol><li>仅可以在字符数组内存放字符串，不能通过赋值语句将字符串常量或其他字符数组中的字符串直接赋给字符串变量</li><li>字符串是字符数组的一种具体应用</li></ol></li></ol><h3 id="通过赋初值的方式给一维字符数组赋字符串">通过赋初值的方式给一维字符数组赋字符串</h3><ol><li>用给一般数组赋初值的相同方式给一维字符数组赋初值<ol><li>所赋初值的字符个数少于数组的元素个数时，系统都将自动在其后的元素中加入 <code>\0</code></li></ol></li><li>在赋初值时直接赋字符串常量</li></ol><h3 id="在C程序执行过程中给一维字符数组赋字符串">在C程序执行过程中给一维字符数组赋字符串</h3><ol><li>不可以用赋值语句给字符数组整体赋一串字符</li><li>给数组元素逐个赋字符值，最后人为加入串结束标志</li></ol><h2 id="使指针指向一个字符串">使指针指向一个字符串</h2><ol><li>通过赋初值的方式使指针指向一个字符串<ol><li>可以在定义字符指针变量的同时，将存放字符串的存储单元起始地址赋给指针变量</li></ol></li><li>通过赋值运算使指针指向一个字符串</li></ol><h2 id="字符串的输入和输出">字符串的输入和输出</h2><h3 id="输入和输出字符串时的必要条件">输入和输出字符串时的必要条件</h3><ol><li>对字符串进行输出时，输出项既可以是字符串常量或字符数组名，也可以是已指向字符串的字符指针变量</li><li>对字符串进行输入时，输入项可以是字符数组名，也可以是字符指针变量</li></ol><h3 id="用格式说明符-s-进行整串输入和输出">用格式说明符 <code>%s</code> 进行整串输入和输出</h3><ol><li>在scanf函数中使用可以实现字符串的整体输入<ol><li>空格和回车符都作为输入数据的分隔符而不能被读入</li><li>若输入字符串的长度超过字符数组所能容纳的字符个数时，系统不报错。相当于下标越界</li><li>当输入项是数组元素的地址时，输入的字符将从这一元素开始依次存放在该数组中</li><li>当输入项为字符指针变量时，该指针变量必须已指向确定的由足够空间的连续存储单元</li></ol></li><li>在printf函数中使用可以实现字符串的整体输出<ol><li>依次输出存储单元中的字符，直到遇到第一个 <code>\0</code> 为止</li><li><code>\0</code> 是结束标志，不在输出字符之列</li><li>输出结束后不自动换行</li></ol></li></ol><h3 id="调用gets、puts函数在终端输入或输出一行字符串">调用gets、puts函数在终端输入或输出一行字符串</h3><ol><li>gets函数：<code>gets(str_adr)</code><ol><li>gets函数从终端键盘读入字符串（包括空格符），直到读入一个换行符为止</li><li>换行符读入后，不作为字符串的内容，系统将自动用 <code>\0</code> 代替</li></ol></li><li>puts函数：<code>puts(str_adr)</code><ol><li>依次输出存储单元中的字符，遇到第一个 <code>\0</code> 即结束输出，并自动输出一个换行符</li></ol></li></ol><h2 id="用于字符串处理的函数">用于字符串处理的函数</h2><blockquote><p>使用以下函数时，需添加头文件<code>&lt;string.h&gt;</code></p></blockquote><ol><li>字符串赋值（拷贝）函数strcpy：<code>strcpy(s1,s2)</code><ol><li>把s2所指字符串（源）的内容复制到s1所指存储空间（目的）中，函数返回s1的值，即目的字符串的首地址</li><li>s1必须指向一个足够容纳s2串的存储空间</li></ol></li><li>字符串连接函数strcat：<code>stract(s1,s2)</code><ol><li>将s2所指字符串的内容连接到s1所指的字符串后，并自动覆盖s1串末尾的<code>\0</code>，函数返回s1所指的地址值</li><li>s1所指字符串应由足够的空间容纳两串合并后的内容</li></ol></li><li>求字符串长度函数strlen：<code>strlen(s)</code><ol><li>计算以s为起始地址的字符串长度，并作为函数值返回。不包括串尾的结束标志<code>\0</code></li></ol></li><li>字符串比较函数strcmp：<code>strcmp(s1,s2)</code><ol><li>依次对s1和s2中对应位置上的字符两两比较，字符大小依据是其ASCII码值</li></ol></li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写函数slenth(char *s)，函数返回指针s所指字符串的长度，即相当于库函数strlen的功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">slenth</span><span class="params">(<span class="type">char</span> *s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    length = slenth(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">slenth</span><span class="params">(<span class="type">char</span> *s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*(s + i) != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」数组</title>
      <link href="/29c505056f3a.html"/>
      <url>/29c505056f3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一维数组的定义和一维数组元素的引用">一维数组的定义和一维数组元素的引用</h2><h3 id="一维数组的定义">一维数组的定义</h3><ol><li>定义：数组中的每个元素只带一个下标</li><li>一般形式：<code>类型名 数组名[整型常量表达式],······</code></li><li>数组说明符和普通变量名可同时出现在一个类型定义语句中</li></ol><h3 id="一维数组的引用">一维数组的引用</h3><ol><li>引用形式：<code>数组名[下标表达式]</code></li></ol><h3 id="一维数组的初始化">一维数组的初始化</h3><ol><li>当所赋初值少于所定义数组的元素个数时，将自动给后面的元素补以初值0</li><li>对于字符型数组同样补以初值0，即 <code>\0</code></li></ol><h3 id="通过赋初值定义数组大小">通过赋初值定义数组大小</h3><ol><li>C语言规定可以通过赋初值来定义数组的大小，这时数组说明符的一对方括号中可以不指定数组的大小</li></ol><h3 id="一维数组的定义和数组元素引用举例">一维数组的定义和数组元素引用举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个含有30个元素的int类型数组，依次给数组元素赋奇数1、3、5、···，然后按每行10个数顺序输出，最后再按每行10个数逆序输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i ++)&#123;</span><br><span class="line">        a[i] = k;</span><br><span class="line">        k = k + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i+<span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i]);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维数组和指针">一维数组和指针</h2><ol><li>在函数体中或在函数外部定义的数组名可以认为是一个存放地址值的指针变量名，其中的地址值是数组第一个元素的地址，也就是数组所占一串连续存储单元的起始地址，定义数组时的类型即是此指针变量的基类型<ol><li>这个指针变量中的地址值不可改变，即不可以给数组名重新赋值</li></ol></li><li>可以对数组名加一个整数的办法，来依次表达该数组中不同元素的地址</li></ol><h2 id="函数之间对一维数组和数组元素的引用">函数之间对一维数组和数组元素的引用</h2><h3 id="数组元素作实参">数组元素作实参</h3><ol><li>每个数组元素实际上代表内存中的一个存储单元，数组元素的值可以传送给该变量，在函数中只能对该变量进行操作，而不能直接引用对应的数组元素，不可能在函数中改变对应数组元素中的值</li></ol><h3 id="数组名作实参">数组名作实参</h3><ol><li>数组名本身是一个地址值，对应的形参应当是一个指针变量，此指针变量的基类型必须与数组的类型一致。在函数中，可以通过此指针变量来引用调用函数中的对应的数组元素，从而达到对调用函数中对应的数组元素进行操作而改变其中的值</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过一个函数给主函数中定义的数组输入若干大于或等于0的整数，用负数作为输入结束标志；调用另一个函数输出该数组中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 100</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">input</span><span class="params">(<span class="type">int</span> *a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[M],n;</span><br><span class="line">    n = input(a);</span><br><span class="line">    output(a,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">input</span><span class="params">(<span class="type">int</span> *a)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        a[i] = n;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素地址作为实参">数组元素地址作为实参</h3><ol><li>当用数组元素作为实参时，因为是地址值，所以对应的形参也应当是基类型相同的指针变量</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对具有10个元素的char类型数组，从下标为4的元素开始，全部设置星号，保持前四个元素不变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B 4</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setstar</span><span class="params">(<span class="type">char</span> *c)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c[M] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>&#125;;</span><br><span class="line">    setstar(c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setstar</span><span class="params">(<span class="type">char</span> *c)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = B; i &lt; M; i++)&#123;</span><br><span class="line">        c[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维数组应用举例">一维数组应用举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个含有15个元素的数组，并编写函数分别完成以下操作：</span></span><br><span class="line"><span class="comment">1. 调用C库函数中的随机函数给所有元素赋以0~49的随机数</span></span><br><span class="line"><span class="comment">2. 输出数组元素中的值</span></span><br><span class="line"><span class="comment">3. 按顺序对每三个数求一个和数，并传回主函数</span></span><br><span class="line"><span class="comment">4. 最后输出所有求出的和值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> *a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrout</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getsum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n,<span class="type">int</span> *sum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[M],sum[M/N];</span><br><span class="line">    getrand(a);</span><br><span class="line">    arrout(a,M);</span><br><span class="line">    getsum(a, N,sum);</span><br><span class="line">    arrout(sum,M/N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> *a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">        a[i] = rand() % <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arrout</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getsum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n,<span class="type">int</span> *sum)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M/N; i++)&#123;</span><br><span class="line">        sum[i] = a[i * N] + a[i * N + <span class="number">1</span>] + a[i * N + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组的定义和二维数组元素的引用">二维数组的定义和二维数组元素的引用</h2><h3 id="二维数组的定义">二维数组的定义</h3><ol><li>定义语句形式：<code>类型名 数组名[常量表达式1][常量表达式2]，······</code></li></ol><h3 id="二维数组的引用">二维数组的引用</h3><ol><li>引用形式：<code>数组名[下标表达式1][下标表达式2]</code></li></ol><h3 id="二维数组的初始化">二维数组的初始化</h3><ol><li>所赋初值个数与数组元素的个数相同<ol><li>可以在定义二维数组的同时给二维数组的各元素赋初值 <code>int a[4][3]=&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;,&#123;10,11,12&#125;&#125;;</code></li></ol></li><li>每行所赋初值个数与数组元素的个数不同<ol><li>系统将自动给该行后面元素赋值</li></ol></li><li>所赋初值行数少于数组行数<ol><li>系统将自动给后面各行的元素补初值0</li></ol></li><li>赋初值时省略花括号对<ol><li><code>int a[4,3]=&#123;1,2,4,5&#125;;</code><ol><li>系统将按a数组元素在内存中排列的顺序，将花括号内的数据一一对应地赋给各个元素，若数据不足，系统将给后面的元素自动补初值0</li></ol></li></ol></li></ol><h3 id="通过赋初值定义二维数组的大小">通过赋初值定义二维数组的大小</h3><ol><li>只可以省略第一个方括号中的常量表达式，而不能省略第二个方括号中的常量表达式</li></ol><h3 id="二维数组的定义和数组元素引用举例">二维数组的定义和数组元素引用举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过键盘给出2*3的二维数组输入数据，第一行赋1、2、3，第二行赋10、20、30，然后按行输出此二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组和指针">二维数组和指针</h2><blockquote><p>先给出以下定义：<code>in *p,a[3][4];</code></p></blockquote><ol><li>二维数组a由若干个一维数组组成<ol><li>在以上二维数组中，a[0],a[1],a[2]都是一维数组名，同样也代表一个不可变的地址常量，其值依次为二维数组每行第一个元素的地址，其基类型就是数组元素的类型</li></ol></li><li>二维数组名也是一个地址值常量<ol><li>二维数组名同样也是一个存放地址常量的指针，其值为二维数组中第一个元素的地址</li><li>二维数组名应理解为一个行指针</li></ol></li><li>二维数组元素的地址<ol><li>二维数组元素的地址可以由表达式&amp;a[i][j]求得，也可以通过每行的首地址来表示</li></ol></li></ol><h2 id="二维数组名和指针数组作为实参">二维数组名和指针数组作为实参</h2><h3 id="二维数组名作为实参时实参和形参之间的数据传递">二维数组名作为实参时实参和形参之间的数据传递</h3><ol><li>当二维数组名作为实参时，对应的形参必须是一个行指针变量</li></ol><h3 id="指针数组作为实参时实参和形参之间的数据传递">指针数组作为实参时实参和形参之间的数据传递</h3><ol><li>当指针数组作为实参时，对应的形参应当是一个指向指针的指针</li></ol><h2 id="二维数组程序举例">二维数组程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过调用随机函数给5*6的二维数组元素赋10~40范围内的整数，求出二维数组每行元素的平均值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getave</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>], <span class="type">double</span> *ave)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>][<span class="number">6</span>];</span><br><span class="line">    <span class="type">double</span> ave[<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    getrand(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getave(a, ave);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%f &quot;</span>, ave[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>])</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            a[i][j] = rand() % <span class="number">31</span> + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getave</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>], <span class="type">double</span> *ave)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            ave[i] = ave[i] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        ave[i] = ave[i] / <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」地址和指针</title>
      <link href="/c4b73d27184a.html"/>
      <url>/c4b73d27184a.html</url>
      
        <content type="html"><![CDATA[<h2 id="指针变量的定义和指针变量的基类型">指针变量的定义和指针变量的基类型</h2><ol><li>定义指针变量的一般形式：<code>类型名 *指针变量名1，*指针变量名2，······</code></li><li>指针变量必须区分基类型，基类型不同的指针变量不能混合使用</li></ol><h2 id="给指针变量赋值">给指针变量赋值</h2><h3 id="给指针变量赋地址值">给指针变量赋地址值</h3><ol><li>通过求地址运算符（&amp;）获得地址值<ol><li>求地址运算符只能应用于变量和数组元素，不可以用于表达式、常量或者被说明为register的变量</li><li>&amp;必须放在运算对象的左边，而且运算对象的类型必须与指针变量的基类型相同</li></ol></li><li>通过指针变量获得地址值<ol><li>当进行赋值运算时，赋值号两边指针变量的基类型必须相同</li></ol></li><li>通过标准函数获得地址值<ol><li>可以通过调用库函数malloc和calloc在内存中开辟动态存储单元，并把所开辟的动态存储单元的地址赋值给指针变量</li></ol></li></ol><h3 id="给指针变量赋“空”值">给指针变量赋“空”值</h3><ol><li><code>p=NULL</code></li><li>指针p并不是指向地址为0的存储单元，而是具有一个确定的值——“空”</li></ol><h2 id="对指针变量的操作">对指针变量的操作</h2><h3 id="通过指针来引用一个存储单元">通过指针来引用一个存储单元</h3><ol><li>间接访问运算符（间址运算符）：*<ol><li>当指针变量中存放了一个确切的地址值时，就可以用“*”通过指针来引用该地址的存储单元</li><li>单目运算符，必须出现在运算对象的左边</li></ol></li></ol><h3 id="移动指针">移动指针</h3><ol><li>定义：对指针变量加上或减去一个整数，或通过赋值运算，使指针变量指向相邻的存储单元</li><li>只有当指针指向一串连续的存储单元时，指针的移动才有意义</li></ol><h2 id="函数之间地址值的传递">函数之间地址值的传递</h2><h3 id="形参为指针变量时实参和形参之间的数据传递">形参为指针变量时实参和形参之间的数据传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写函数myadd(int *a,int *b)，函数把指针a和b所指的存储单元中的两个值相加，然后将和值作为函数值返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">myadd</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b,sum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    sum = myadd(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">myadd</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = *a + *b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过传送地址在被调用函数中直接改变调用函数中的变量的值">通过传送地址在被调用函数中直接改变调用函数中的变量的值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用swap函数，交换主函数中变量x和y中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">30</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数返回地址值">函数返回地址值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把主函数中变量i和j中存放较大数的那个地址作为函数值返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">fun</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    i = <span class="number">10</span>;</span><br><span class="line">    j = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%d&quot;</span>,*fun(&amp;i, &amp;j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">fun</span><span class="params">(<span class="type">int</span> *i, <span class="type">int</span> *j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(*i&gt;*j)&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」函数</title>
      <link href="/c302d64e69b2.html"/>
      <url>/c302d64e69b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="库函数">库函数</h2><ol><li>调用C语言库函数时要求的include命令行</li><li>标准库函数的调用的一般形式：<code>函数名(参数表)</code></li></ol><h2 id="函数的定义和返回值">函数的定义和返回值</h2><h3 id="函数定义的语法">函数定义的语法</h3><ol><li>函数定义的一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数返回值的类型名 函数名(类型名 形式参数<span class="number">1</span>，类型名 形式参数<span class="number">2</span>，······)&#123;</span><br><span class="line">说明部分</span><br><span class="line">语句部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>函数名和形式参数都是由用户命名的标识符。在同一程序中，函数名必须唯一，形式参数名只要在同一函数中唯一即可</li><li>不能在函数的内部定义函数</li><li>默认函数返回值的类型是int类型</li><li>除了返回值类型为int类型的函数外，函数必须先定义（或说明）后调用</li><li>若函数只是用于完成某些操作，没有函数值返回，则必须把函数定义成void类型</li></ol><h3 id="函数的返回值">函数的返回值</h3><ol><li>函数的值通过return语句返回，一般形式：<code>return 表达式;</code> 或 <code>return (表达式)</code></li><li>在同一个函数内，return语句只可能执行一次</li></ol><h2 id="函数的调用">函数的调用</h2><h3 id="函数的两种调用方式">函数的两种调用方式</h3><ol><li>函数的一般调用形式：<code>函数名(实际参数表)</code></li><li>两种调用方式<ol><li>当调用的函数用于求出某个值时，函数的调用可作为表达式出现在允许表达式出现的任何地方</li><li>当函数不需要返回值时，函数的调用可作为一条独立的语句</li></ol></li></ol><h3 id="函数调用时的语法要求">函数调用时的语法要求</h3><ol><li>调用函数时，函数名必须与所调用的函数名字完全一致</li><li>实际参数的个数必须与形式参数的个数一致</li><li>函数必须先定义，后调用（函数的返回值为int或char时除外）</li><li>函数可以直接或间接的自己调用自己，称为递归调用</li></ol><h2 id="函数的说明">函数的说明</h2><h3 id="函数说明的形式">函数说明的形式</h3><ol><li>除主函数外，对于用户定义的函数遵循“先定义，后使用”的规则</li><li>一般形式<ol><li><code>类型名 函数名(参数类型1，参数类型2，······)</code></li><li><code>类型名 函数名(参数类型1 参数名1，参数类型2 参数名2，······)</code></li></ol></li></ol><h3 id="函数说明的位置">函数说明的位置</h3><ol><li>当在所有函数的外部、被调用之前说明函数时，在对函数进行说明的语句后面所有位置上都可以对该函数进行调用</li><li>函数说明也可以放在调用函数内的说明部分，如在main函数内部进行说明，则只能在main函数内部才能识别该函数</li></ol><h2 id="调用函数和被调用函数之间的数据传递">调用函数和被调用函数之间的数据传递</h2><ol><li>实际参数和形式参数之间的进行数据传递</li><li>通过return语句把函数值返回调用函数</li><li>通过全局变量（不提倡）</li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写函数isprime(int a)，用来判断自变量a是否为素数。若是素数，返回1，否则返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isprime</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span>(isprime(x))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;素数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isprime</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a / <span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho部署</title>
      <link href="/593dab6c31f1.html"/>
      <url>/593dab6c31f1.html</url>
      
        <content type="html"><![CDATA[<h2 id="01-安装PHP">01 安装PHP</h2><p><strong>步骤 1：更新包列表</strong><br>打开终端并运行以下命令，以确保您的包列表是最新的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p><strong>步骤 2：安装PHP</strong><br>运行以下命令来安装PHP和常用的PHP扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php php-cli php-fpm php-json php-common php-mysql php-zip php-gd php-mbstring php-curl php-xml php-pear php-bcmath</span><br></pre></td></tr></table></figure><p>这将安装PHP以及一些常用扩展，但您可以根据项目需要添加其他扩展。</p><p><strong>步骤 3：检查PHP版本</strong><br>安装完成后，您可以运行以下命令来检查PHP的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure><p>这将显示已安装的PHP版本信息。</p><p><strong>步骤 4：启动PHP-FPM（可选）</strong><br>如果您计划使用PHP-FPM（PHP FastCGI Process Manager），可以运行以下命令启动它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start php7.4-fpm</span><br></pre></td></tr></table></figure><p>确保将 “7.4” 替换为您实际安装的PHP版本号。</p><p><strong>步骤 5：设置PHP-FPM自启动（可选）</strong><br>如果您希望PHP-FPM在系统启动时自动启动，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> php7.4-fpm</span><br></pre></td></tr></table></figure><p>同样，确保将 “7.4” 替换为您实际安装的PHP版本号。</p><p>现在，PHP已成功安装在您的Ubuntu系统上。您可以创建和运行PHP网站或应用程序了。如果需要进一步的配置，可以编辑PHP的配置文件，通常位于 <code>/etc/php/7.4/php.ini</code>（根据您的PHP版本号可能会有所不同）。</p><h2 id="02-安装MySQL">02 安装MySQL</h2><p>要在Ubuntu上安装MySQL，您可以按照以下步骤进行操作：</p><p><strong>步骤 1：更新包列表</strong><br>首先，打开终端并运行以下命令，以确保您的包列表是最新的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p><strong>步骤 2：安装MySQL Server</strong><br>运行以下命令来安装MySQL服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><p>在安装过程中，系统会提示您设置MySQL的root用户密码。请务必选择一个强密码，并在安装完成后妥善保存它。</p><p><strong>步骤 3：启动MySQL服务</strong><br>安装完成后，MySQL服务通常会自动启动。您可以使用以下命令检查MySQL服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure><p>如果MySQL未启动，您可以使用以下命令手动启动它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure><p><strong>步骤 4：设置MySQL自启动（可选）</strong><br>如果您希望MySQL在系统启动时自动启动，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysql</span><br></pre></td></tr></table></figure><p><strong>步骤 5：安全配置MySQL</strong><br>MySQL安装后，建议运行以下命令来执行MySQL安全配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>这个命令会提示您执行一系列安全性配置步骤，包括更改root密码、删除匿名用户、禁用远程root登录等。</p><p><strong>步骤 6：登录MySQL</strong><br>您可以使用以下命令登录到MySQL服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后，输入您在步骤 2 中设置的root密码。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python天翼云盘自动签到脚本</title>
      <link href="/bcc89ac81364.html"/>
      <url>/bcc89ac81364.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置自动执行">配置自动执行</h2><ol><li>打开Cron配置文件 <code>crontab -e</code> ，第一次设置，系统会提示你选择默认编辑器</li><li>添加定时任务，Cron表达式的格式如下</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * * * * command_to_be_executed</span><br><span class="line">- - - - -</span><br><span class="line">| | | | |</span><br><span class="line">| | | | +----- 星期中的某一天 (<span class="number">0</span> - <span class="number">7</span>) (星期天为<span class="number">0</span>或<span class="number">7</span>)</span><br><span class="line">| | | +------- 月份 (<span class="number">1</span> - <span class="number">12</span>)</span><br><span class="line">| | +--------- 一个月中的某一天 (<span class="number">1</span> - <span class="number">31</span>)</span><br><span class="line">| +----------- 小时 (<span class="number">0</span> - <span class="number">23</span>)</span><br><span class="line">+------------- 分钟 (<span class="number">0</span> - <span class="number">59</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>以下Cron表达式表示在每天的午夜（0点）执行Python脚本</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> * * * <span class="regexp">/usr/bin</span><span class="regexp">/python3 /path</span><span class="regexp">/to/your</span><span class="regexp">/script.py</span></span><br></pre></td></tr></table></figure><ol><li>验证定时任务 <code>crontab -l</code></li></ol><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在下面两行的引号内贴上账号（仅支持手机号）和密码</span></span><br><span class="line">username = <span class="string">&quot;&quot;</span></span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> username <span class="keyword">and</span> password, <span class="string">&quot;请在第23、24行填入有效账号和密码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件推送的配置信息</span></span><br><span class="line">smtp_server = <span class="string">&#x27;smtp.163.com&#x27;</span>  <span class="comment"># SMTP 服务器地址</span></span><br><span class="line">smtp_port = <span class="number">25</span>  <span class="comment">#  SMTP 服务器端口号</span></span><br><span class="line">sender_email = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 发件人邮箱</span></span><br><span class="line">sender_password = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 发件人邮箱密码/授权码</span></span><br><span class="line">receiver_email = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 收件人邮箱</span></span><br><span class="line"></span><br><span class="line">BI_RM = <span class="built_in">list</span>(<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>)</span><br><span class="line">B64MAP = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2char</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> BI_RM[a]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64tohex</span>(<span class="params">a</span>):</span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    e = <span class="number">0</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">list</span>(a)[i] != <span class="string">&quot;=&quot;</span>:</span><br><span class="line">            v = B64MAP.index(<span class="built_in">list</span>(a)[i])</span><br><span class="line">            <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">                e = <span class="number">1</span></span><br><span class="line">                d += int2char(v &gt;&gt; <span class="number">2</span>)</span><br><span class="line">                c = <span class="number">3</span> &amp; v</span><br><span class="line">            <span class="keyword">elif</span> e == <span class="number">1</span>:</span><br><span class="line">                e = <span class="number">2</span></span><br><span class="line">                d += int2char(c &lt;&lt; <span class="number">2</span> | v &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                c = <span class="number">15</span> &amp; v</span><br><span class="line">            <span class="keyword">elif</span> e == <span class="number">2</span>:</span><br><span class="line">                e = <span class="number">3</span></span><br><span class="line">                d += int2char(c)</span><br><span class="line">                d += int2char(v &gt;&gt; <span class="number">2</span>)</span><br><span class="line">                c = <span class="number">3</span> &amp; v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                e = <span class="number">0</span></span><br><span class="line">                d += int2char(c &lt;&lt; <span class="number">2</span> | v &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                d += int2char(<span class="number">15</span> &amp; v)</span><br><span class="line">    <span class="keyword">if</span> e == <span class="number">1</span>:</span><br><span class="line">        d += int2char(c &lt;&lt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encode</span>(<span class="params">j_rsakey, string</span>):</span><br><span class="line">    rsa_key = <span class="string">f&quot;-----BEGIN PUBLIC KEY-----\n<span class="subst">&#123;j_rsakey&#125;</span>\n-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1_openssl_pem(rsa_key.encode())</span><br><span class="line">    result = b64tohex((base64.b64encode(rsa.encrypt(<span class="string">f&#x27;<span class="subst">&#123;string&#125;</span>&#x27;</span>.encode(), pubkey))).decode())</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_md5_sign</span>(<span class="params">params</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="string">&#x27;&amp;&#x27;</span>.join(<span class="built_in">sorted</span>(params.split(<span class="string">&#x27;&amp;&#x27;</span>))).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username, password</span>):</span><br><span class="line">    urlToken = <span class="string">&quot;https://m.cloud.189.cn/udb/udb_login.jsp?pageId=1&amp;pageKey=default&amp;clientType=wap&amp;redirectURL=https://m.cloud.189.cn/zhuanti/2021/shakeLottery/index.html&quot;</span></span><br><span class="line">    r = s.get(urlToken)</span><br><span class="line">    pattern = <span class="string">r&quot;https?://[^\s&#x27;\&quot;]+&quot;</span>  <span class="comment"># 匹配以http或https开头的url</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, r.text)  <span class="comment"># 在文本中搜索匹配</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:  <span class="comment"># 如果找到匹配</span></span><br><span class="line">        url = <span class="keyword">match</span>.group()  <span class="comment"># 获取匹配的字符串</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果没有找到匹配</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到url&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    r = s.get(url)</span><br><span class="line">    pattern = <span class="string">r&quot;&lt;a id=\&quot;j-tab-login-link\&quot;[^&gt;]*href=\&quot;([^\&quot;]+)\&quot;&quot;</span>  <span class="comment"># 匹配id为j-tab-login-link的a标签，并捕获href引号内的内容</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, r.text)  <span class="comment"># 在文本中搜索匹配</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:  <span class="comment"># 如果找到匹配</span></span><br><span class="line">        href = <span class="keyword">match</span>.group(<span class="number">1</span>)  <span class="comment"># 获取捕获的内容</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果没有找到匹配</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到href链接&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    r = s.get(href)</span><br><span class="line">    captchaToken = re.findall(<span class="string">r&quot;captchaToken&#x27; value=&#x27;(.+?)&#x27;&quot;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    lt = re.findall(<span class="string">r&#x27;lt = &quot;(.+?)&quot;&#x27;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    returnUrl = re.findall(<span class="string">r&quot;returnUrl= &#x27;(.+?)&#x27;&quot;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    paramId = re.findall(<span class="string">r&#x27;paramId = &quot;(.+?)&quot;&#x27;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    j_rsakey = re.findall(<span class="string">r&#x27;j_rsaKey&quot; value=&quot;(\S+)&quot;&#x27;</span>, r.text, re.M)[<span class="number">0</span>]</span><br><span class="line">    s.headers.update(&#123;<span class="string">&quot;lt&quot;</span>: lt&#125;)</span><br><span class="line"></span><br><span class="line">    username = rsa_encode(j_rsakey, username)</span><br><span class="line">    password = rsa_encode(j_rsakey, password)</span><br><span class="line">    url = <span class="string">&quot;https://open.e.189.cn/api/logbox/oauth2/loginSubmit.do&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/76.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://open.e.189.cn/&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;appKey&quot;</span>: <span class="string">&quot;cloud&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accountType&quot;</span>: <span class="string">&#x27;01&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span>: <span class="string">f&quot;&#123;&#123;RSA&#125;&#125;<span class="subst">&#123;username&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">f&quot;&#123;&#123;RSA&#125;&#125;<span class="subst">&#123;password&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;validateCode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;captchaToken&quot;</span>: captchaToken,</span><br><span class="line">        <span class="string">&quot;returnUrl&quot;</span>: returnUrl,</span><br><span class="line">        <span class="string">&quot;mailSuffix&quot;</span>: <span class="string">&quot;@189.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;paramId&quot;</span>: paramId</span><br><span class="line">    &#125;</span><br><span class="line">    r = s.post(url, data=data, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> r.json()[<span class="string">&#x27;result&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.json()[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.json()[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">    redirect_url = r.json()[<span class="string">&#x27;toUrl&#x27;</span>]</span><br><span class="line">    r = s.get(redirect_url)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">subject, content</span>):</span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = sender_email</span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = receiver_email</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    text_part = MIMEText(content, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg.attach(text_part)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server = smtplib.SMTP(smtp_server, smtp_port)</span><br><span class="line">        server.starttls()  <span class="comment"># 开启安全连接</span></span><br><span class="line">        server.login(sender_email, sender_password)</span><br><span class="line">        server.sendmail(sender_email, receiver_email, msg.as_string())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;邮件发送失败:&quot;</span>, <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;server&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            server.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = login(username, password)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    rand = <span class="built_in">str</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    surl = <span class="string">f&#x27;https://api.cloud.189.cn/mkt/userSign.action?rand=<span class="subst">&#123;rand&#125;</span>&amp;clientType=TELEANDROID&amp;version=8.6.3&amp;model=SM-G930K&#x27;</span></span><br><span class="line">    url = <span class="string">f&#x27;https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_SIGNIN&amp;activityId=ACT_SIGNIN&#x27;</span></span><br><span class="line">    url2 = <span class="string">f&#x27;https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_SIGNIN_PHOTOS&amp;activityId=ACT_SIGNIN&#x27;</span></span><br><span class="line">    url3 = <span class="string">f&#x27;https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_2022_FLDFS_KJ&amp;activityId=ACT_SIGNIN&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 5.1.1; SM-G930K Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36 Ecloud/8.6.3 Android/22 clientId/355325117317828 clientModel/SM-G930K imsi/460071114317824 clientChannelId/qq proVersion/1.0.6&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://m.cloud.189.cn/zhuanti/2016/sign/index.jsp?albumBackupOpened=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;m.cloud.189.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = s.get(surl, headers=headers)</span><br><span class="line">    netdiskBonus = response.json()[<span class="string">&#x27;netdiskBonus&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> response.json()[<span class="string">&#x27;isSign&#x27;</span>] == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;未签到，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span>)</span><br><span class="line">        res1 = <span class="string">f&quot;未签到，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已经签到过了，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span>)</span><br><span class="line">        res1 = <span class="string">f&quot;已经签到过了，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span></span><br><span class="line"></span><br><span class="line">    response = s.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;errorCode&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        res2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        description = response.json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span>)</span><br><span class="line">        res2 = <span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    response = s.get(url2, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;errorCode&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        res3 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        description = response.json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span>)</span><br><span class="line">        res3 = <span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    response = s.get(url3, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;errorCode&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        res4 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        description = response.json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;链接3抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span>)</span><br><span class="line">        res4 = <span class="string">f&quot;链接3抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    title = <span class="string">&quot;天翼云签到&quot;</span></span><br><span class="line">    content = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res1&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res2&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res3&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res4&#125;</span></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这里可以添加发送通知的代码，根据具体的通知服务接口进行实现。</span></span><br><span class="line">    send_email(title, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>源代码来自Github @<a href="https://github.com/aefa6/QinglongScript">QinglongScript</a>，将青龙面板通知修改为邮箱推送</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 天翼云盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian实现百度翻译</title>
      <link href="/ac1aeb19d238.html"/>
      <url>/ac1aeb19d238.html</url>
      
        <content type="html"><![CDATA[<ol><li>在obsidian社区插件市场中安装插件<code>Search on Internet</code></li><li>申请<a href="https://fanyi-api.baidu.com/manage/developer">百度翻译API</a></li><li>填入appid以及appkey后修改插件配置，设置to_lang可以改变翻译的语言，具体查看百度翻译API文档<ol><li><a href="https://api.aweme.top/query?query=">https://api.aweme.top/query?query=</a>&amp;appid={appid}&amp;appkey={appkey}&amp;to_lang=zh</li></ol></li><li>选中文本后右键 <code>Search on 百度翻译</code></li><li>自行部署代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set your own appid/appkey.</span></span><br><span class="line"><span class="comment"># appid = &#x27;20230928001831995&#x27;</span></span><br><span class="line"><span class="comment"># appkey = &#x27;_hD5X0OoZY7jkO5w3D4E&#x27;</span></span><br><span class="line"></span><br><span class="line">from_lang = <span class="string">&#x27;auto&#x27;</span></span><br><span class="line"><span class="comment"># to_lang = &#x27;zh&#x27;</span></span><br><span class="line"></span><br><span class="line">endpoint = <span class="string">&#x27;http://api.fanyi.baidu.com&#x27;</span></span><br><span class="line">path = <span class="string">&#x27;/api/trans/vip/translate&#x27;</span></span><br><span class="line">url = endpoint + path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_md5</span>(<span class="params">s, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode(encoding)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/query&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate_query</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取查询参数</span></span><br><span class="line">        query = request.args.get(<span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        appid = request.args.get(<span class="string">&#x27;appid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        appkey = request.args.get(<span class="string">&#x27;appkey&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        to_lang = request.args.get(<span class="string">&#x27;to_lang&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机生成salt</span></span><br><span class="line">        salt = random.randint(<span class="number">32768</span>, <span class="number">65536</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算md5</span></span><br><span class="line">        sign = make_md5(appid + query + <span class="built_in">str</span>(salt) + appkey)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建请求参数</span></span><br><span class="line">        headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">        payload = &#123;<span class="string">&#x27;appid&#x27;</span>: appid, <span class="string">&#x27;q&#x27;</span>: query, <span class="string">&#x27;from&#x27;</span>: from_lang, <span class="string">&#x27;to&#x27;</span>: to_lang, <span class="string">&#x27;salt&#x27;</span>: salt, <span class="string">&#x27;sign&#x27;</span>: sign&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送请求到翻译API</span></span><br><span class="line">        response = requests.post(url, params=payload, headers=headers)</span><br><span class="line">        result = response.json()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取翻译结果</span></span><br><span class="line">        translations = result.get(<span class="string">&quot;trans_result&quot;</span>, [])</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> translations:</span><br><span class="line">            dst = item.get(<span class="string">&quot;dst&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            src = item.get(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 不再需要手动处理Unicode转义字符</span></span><br><span class="line">            separate = <span class="string">&quot;——————————————————————————————&quot;</span></span><br><span class="line">            output.append(<span class="string">f&quot;<span class="subst">&#123;separate&#125;</span> &lt;br&gt; 译文: &lt;br&gt; <span class="subst">&#123;dst&#125;</span> &lt;br&gt;&lt;br&gt; 原文: &lt;br&gt; <span class="subst">&#123;src&#125;</span> &lt;br&gt;&lt;br&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\n\n&quot;</span>.join(output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8081</span>)</span><br></pre></td></tr></table></figure><blockquote><p>重启服务命令：<code>systemctl restart myflaskapp.service</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
            <tag> 百度翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同花顺转股溢价率中位数获取</title>
      <link href="/bcaf17af67b7.html"/>
      <url>/bcaf17af67b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python环境配置">Python环境配置</h2><p>详细安装步骤参考<a href="https://blog.csdn.net/m0_57081622/article/details/127180996">Python安装与环境配置超详细保姆级教程</a></p><h2 id="iFind-Python-环境配置">iFind Python 环境配置</h2><ol><li><a href="http://ft.10jqka.com.cn/index.php?c=index&amp;a=download">点击下载</a>同花顺数据接口</li><li>第一次下载的用户，请您先打开文件夹内的SuperCommand并登录您的账号</li><li>登录后，系统会要求您修复相关编程语言环境，请按照指示修复相关环境</li><li>或在登录后点击工具中的环境设置选项，选中Python后点击确定按钮</li><li>然后选中安装的Python路径，点击继续</li></ol><h2 id="安装Pycharm">安装Pycharm</h2><p><a href="https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows&amp;code=PCC">点击下载</a></p><p>详细安装步骤<a href="https://blog.csdn.net/qq_44809707/article/details/122501118">pycharm安装教程</a></p><h2 id="运行Python程序">运行Python程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/18 14:44</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> iFinDPy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username, password</span>):</span><br><span class="line">    thsLogin = THS_iFinDLogin(username, password)</span><br><span class="line">    <span class="keyword">if</span> thsLogin != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">edate</span>):</span><br><span class="line">    get_str = <span class="string">&#x27;edate=&#x27;</span> + edate + <span class="string">&#x27;;zqlx=全部&#x27;</span></span><br><span class="line">    data_p00868 = THS_DR(<span class="string">&#x27;p00868&#x27;</span>, get_str, <span class="string">&#x27;p00868_f027:Y,p00868_f022:Y&#x27;</span>, <span class="string">&#x27;format:list&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data_p00868</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到Excel</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_excel</span>(<span class="params">file_name, str_date, premium</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_name):</span><br><span class="line">        data = &#123;<span class="string">&quot;日期&quot;</span>: [str_date], <span class="string">&quot;转股溢价率%&quot;</span>: [premium]&#125;</span><br><span class="line">        df = pd.DataFrame(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_excel(file_name)</span><br><span class="line">        new_data = pd.DataFrame(&#123;<span class="string">&quot;日期&quot;</span>: [str_date], <span class="string">&quot;转股溢价率%&quot;</span>: [premium]&#125;)</span><br><span class="line">        df = pd.concat([df, new_data], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    df.to_excel(file_name, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算中位数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_median</span>(<span class="params">data</span>):</span><br><span class="line"><span class="comment"># 转换价值范围</span></span><br><span class="line">    max_value = <span class="number">101</span></span><br><span class="line">    min_value = <span class="number">99</span></span><br><span class="line">    float_values = []</span><br><span class="line"></span><br><span class="line">    data_f022 = data[<span class="string">&#x27;p00868_f022&#x27;</span>]</span><br><span class="line">    data_f027 = data[<span class="string">&#x27;p00868_f027&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f027, f022 <span class="keyword">in</span> <span class="built_in">zip</span>(data_f027, data_f022):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;--&#x27;</span> <span class="keyword">in</span> f027 <span class="keyword">or</span> <span class="string">&#x27;--&#x27;</span> <span class="keyword">in</span> f022:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        f027_value = <span class="built_in">float</span>(f027)</span><br><span class="line">        f022_value = <span class="built_in">float</span>(f022)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min_value &lt;= f027_value &lt;= max_value:</span><br><span class="line">            float_values.append(f022_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.median(float_values) <span class="keyword">if</span> float_values <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据 - 单日</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_today_data</span>():</span><br><span class="line">    today = datetime.date.today()</span><br><span class="line">    edate = today.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> get_data(edate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据 - 区间</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_interval_data</span>(<span class="params">start_date, end_date</span>):</span><br><span class="line">    delta = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">    data_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> start_date &lt;= end_date:</span><br><span class="line">        edate = start_date.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">        data = get_data(edate)</span><br><span class="line">        <span class="keyword">if</span> data.data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data_list.append((start_date.strftime(<span class="string">&quot;%Y/%m/%d&quot;</span>), data))</span><br><span class="line">        start_date += delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    username = <span class="string">&quot;账号&quot;</span></span><br><span class="line">    password = <span class="string">&quot;密码&quot;</span></span><br><span class="line">    login(username, password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取本日数据</span></span><br><span class="line">    <span class="comment"># today_data = get_today_data()</span></span><br><span class="line">    <span class="comment"># if today_data.data is not None:</span></span><br><span class="line">    <span class="comment">#     today_median = calculate_median(today_data.data[0][&#x27;table&#x27;])</span></span><br><span class="line">    <span class="comment">#     if today_median is not None:</span></span><br><span class="line">    <span class="comment">#         save_to_excel(&quot;转股溢价率记录(转换价值).xlsx&quot;, datetime.date.today().strftime(&quot;%Y/%m/%d&quot;), today_median)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取区间时间内的数据</span></span><br><span class="line">    start_date = datetime.date(<span class="number">2023</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">    end_date = datetime.date(<span class="number">2023</span>, <span class="number">11</span>, <span class="number">18</span>)</span><br><span class="line">    interval_data = get_interval_data(start_date, end_date)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> date, data <span class="keyword">in</span> interval_data:</span><br><span class="line">        median_value = calculate_median(data.data[<span class="number">0</span>][<span class="string">&#x27;table&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> median_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            save_to_excel(<span class="string">&quot;转股溢价率记录(转换价值).xlsx&quot;</span>, date, median_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 同花顺 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「软件设计师」计算机组成与体系结构</title>
      <link href="/0f6e0b2015d6.html"/>
      <url>/0f6e0b2015d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据的表示">数据的表示</h2><blockquote><ul><li>最小的数据单位：b</li><li>最小的存储单位：byte</li></ul></blockquote><p><strong>进制的转换</strong></p><ol><li>R进制转十进制:将每一位数字用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">R^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>表示然后相加，k与该位与小数点的距离有关，小数点左边第一位为0，右边第一位为-1，往左递增，往右递减如：二进制数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10100.01</mn><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10100.01=1*2^4+1*2^2+1*2^{-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10100.01</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li><li>十进制转R进制: 整数位使用短除法，即将十进制数除以R再取余，直至余数为零，然后将余数由下往上按顺序排列，小数位乘以R，每乘一次就取它的整数位（整数位为零时就取零)，直至小数位为零，然后将取得的整数位由上往下排列即可。</li><li>二进制转八进制及二进制转十六进制：将二进制数以小数点为界向左及向右每三个一组(转八进制),或者每四个一组(转十六进制)，缺的数用零来补充，然后依次转化为相应的进制数然后按顺序排列即可。</li></ol><p><strong>原码反码补码移码</strong></p><ol><li>原码：将数值转换为二进制数，并且该二进制数的首位（最高位）表示正负，0表示正，1表示负，不足八位的就在首位与二进制数中间用零填充。例：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><msub><mo stretchy="false">]</mo><mtext>原</mtext></msub><mo>=</mo><mn>10000001</mn></mrow><annotation encoding="application/x-tex">[-1]_{原}=10000001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000001</span></span></span></span></li><li>反码：正数的反码为本身，负数的反码为其原码除首位不变外全部取反<ol><li>原码在计算机中进行加减不能得到正确的答案，而反码的加减则符合事实</li></ol></li><li>补码：正数的补码与原码和反码相同，负数的补码即为其反码<strong>加1</strong><ol><li>补码的运算也符合正确答案</li><li>补码的补码就是原码</li></ol></li><li>移码：将正数和负数的补码首位取反，其余位不改变<ol><li>移码的运算也符合正确答案</li></ol></li><li>各自数值表示范围:其中n一般等于8</li></ol><table><thead><tr><th></th><th>整数</th></tr></thead><tbody><tr><td>原码</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1) \sim 2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>反码</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1) \sim 2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>补码</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>∼</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^{n-1} \sim 2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td></tr></tbody></table><p><strong>浮点数</strong></p><ol><li>浮点数的概念：浮点数即科学计数法，如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><mo>=</mo><mn>1</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1000=1*10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> ; 其中，1为尾数，10为基数，3为指数</li><li>表示格式：阶符+阶码+数符+尾数</li><li>计算机中浮点数的运算：当两个指数不等的浮点数相加时，计算机会把低阶浮点数的指数转化为高阶浮点数的指数，如： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.0</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo>+</mo><mn>1.19</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1.0*10^3+1.19*10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.19</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ，计算机会将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.19</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1.19*10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.19</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 转化为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.119</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">0.119*10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.119</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> ，然后作和，然后结果规格化(将尾数的绝对值限定在区间[0.5,1])，如：得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11.3019</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">11.3019*10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11.3019</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 以后，要化为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.13019</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1.13019*10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.13019</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li><li>浮点数所能表示的数值范围主要由阶码决定，所表示的数值精度则由尾数决定</li></ol><h2 id="中央处理器（CPU）">中央处理器（CPU）</h2><p><strong>CPU由运算器和控制器组成</strong></p><ol><li>运算器(ALU）<ol><li>累加寄存器(AC):专门存放算术或逻辑运算的一个操作数和运算结果的寄存器。能进行加、减、读出、移位、求补等操作。是运算器的主要部分</li><li>状态寄存器(PSW）：该部件用来存放两类信息，一类是体现当前指令执行结果的各种状态信息(条件码)，如有无进位、有无溢出、结果正负、信息是否为零等；另一类是存放控制信息，如允许中断、跟踪标志等</li></ol></li><li>控制器<ol><li>程序计数器(PC)：程序计数器中存放的是下一条指令的地址。由于多数情况下程序是顺序执行的，所以程序计数器设计成自动加一的装置。当出现转移指令时，就需重填程序计数器</li><li>指令寄存器(IR)：中央处理器正在执行的操作码表存放在这里，即当前正在执行的所有指令</li><li>指令译码器（ID）：将操作码解码，告诉中央处理器该做什么</li><li>时序部件</li></ol></li></ol><p><strong>寻址</strong></p><ol><li>立即寻址。操作数就包含在指令中</li><li>直接寻址。操作数存放在内存单元中，指令中直接给出操作数所在存储单元的地址</li><li>寄存器寻址。操作数存放在某一寄存器中，指令中给出存放操作数的寄存器名。寄存器间接寻址。操作数存放在内存单元中，操作数所在存储单元的地址在某个寄存器中</li><li>间接寻址。指令中给出操作数地址的地址</li><li>相对寻址。指令地址码给出的是一个偏移量(可正可负)，操作数地址等于本条指令的地址加上该偏移量</li><li>变址寻址。操作数地址等于变址寄存器的内容加偏移量。</li></ol><blockquote><ul><li>CPU采用多种寻址方式是为了在效率和方便性上找一个平衡</li><li>CPU根据指令周期的不同阶段来区分内存中以二进制编码形式存放的指令和数据</li><li>指令最先进入到数据寄存器暂存起来，然后再拿到指令寄存器中，再交由指令译码器来解码进而运算(交给运算器)，而这一过程一结束，就会迅速提取程序计数器中的指令(即下一条指令)，因此，程序计数器中存储的始终是暂未执行的，下一条指令的“地址”</li><li>在汇编语言程序中，程序员可以直接访问通用寄存器以存取数据，可以访问状态字寄存器以获取有关数据处理结果的相关信息，可以通过相对程序计数器进行寻址，但是不能访问指令寄存器，即指令寄存器对用户是完全透明的</li></ul></blockquote><h2 id="计算机体系结构分类-Flynn">计算机体系结构分类(Flynn)</h2><table><thead><tr><th style="text-align:left">体系结构类型</th><th style="text-align:left">结构</th><th style="text-align:left">关键特性</th><th style="text-align:left">代表</th></tr></thead><tbody><tr><td style="text-align:left">单指令流单数据流SISD</td><td style="text-align:left">控制部分：一个<br>处理器：一个<br>主存模块：一个</td><td style="text-align:left"></td><td style="text-align:left">单处理器系统</td></tr><tr><td style="text-align:left">单指令流多数据流SIMD</td><td style="text-align:left">控制部分：一个<br>处理器：多个<br>主存模块：一个</td><td style="text-align:left">各处理器以异步的形式执行同一条指令</td><td style="text-align:left">并行处理机<br>阵列处理机<br>超级向量处理机</td></tr><tr><td style="text-align:left">多指令流单数据流MISD</td><td style="text-align:left">控制部分：多个<br>处理器：一个<br>主存模块：多个</td><td style="text-align:left">被证不可能，至少是不实际</td><td style="text-align:left">目前没有，有文献称流水线计算机为此类</td></tr><tr><td style="text-align:left">多指令流多数据流MIMD</td><td style="text-align:left">控制部分：多个<br>处理器：多个<br>主存模块：多个</td><td style="text-align:left">能够实现作业、任务、指令等各级全面并行</td><td style="text-align:left">多处理机系统<br>多计算机</td></tr></tbody></table><h2 id="CISC和RISC">CISC和RISC</h2><table><thead><tr><th style="text-align:left">指令系统类型</th><th style="text-align:left">指令</th><th style="text-align:left">寻址方式</th><th style="text-align:left">实现方式</th><th style="text-align:left">其他</th></tr></thead><tbody><tr><td style="text-align:left">CISC（复杂）</td><td style="text-align:left">数量多，使用频率差别大，可变长格式</td><td style="text-align:left">支持多种</td><td style="text-align:left">微程序控制技术（微码）</td><td style="text-align:left">研制周期长</td></tr><tr><td style="text-align:left">RISC（精简）</td><td style="text-align:left">数量少，使用频率接近，定长格式，大部分为单调期指令，操作寄存器，只有Load/Store操作内存</td><td style="text-align:left">支持方式少</td><td style="text-align:left">增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td><td style="text-align:left">优化编译，有效支持高级语言</td></tr></tbody></table><h2 id="流水线">流水线</h2><ol><li>基本概念：流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度</li><li>周期计算<ol><li>流水线周期（操作周期）为执行时间最长的一段</li><li>计算公式：1条指令执行时间+(指令条数-1)*流水线周期<ol><li>理论公式：(t1+t2+<code>··</code>+tk)+(n-1)*△t</li><li>实践公式：(k+n-1)*△t</li></ol></li></ol></li></ol><blockquote><p>优先使用理论公式</p></blockquote><ol start="3"><li>吞吐率计算<ol><li>定义：指单位时间内流水线所完成的任务数量或输出的结果数量</li><li>基本公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>P</mi><mo>=</mo><mfrac><mtext>指令条数</mtext><mtext>流水线执行时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">TP=\frac{指令条数}{流水线执行时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">TP</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">流水线执行时间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">指令条数</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>流水线最大吞吐率：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><msub><mi>P</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mi>n</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">△</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">△</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">TP_{max}=\lim\limits_{n\to\infty}\frac{n}{(k+n-1)\triangle t}=\frac{1}{\triangle t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3954em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">△</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3262em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">△</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol></li><li>加速比<ol><li>定义：完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比</li><li>公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mtext>不使用流水线执行时间</mtext><mtext>使用流水线执行时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">S=\frac{不使用流水线执行时间}{使用流水线执行时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">使用流水线执行时间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">不使用流水线执行时间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol></li><li>效率<ol><li>定义：流水线的设备利用率。在时空图上，流水线的效率定义为n个任务占用的时空区与k个流水段总的时空区之比</li><li>公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mtext>个任务占用的时空区</mtext></mrow><mrow><mi>k</mi><mtext>个流水段的总的时空区</mtext></mrow></mfrac><mo>=</mo><mfrac><msub><mi>T</mi><mn>0</mn></msub><mrow><mi>k</mi><msub><mi>T</mi><mi>k</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">E=\frac{n个任务占用的时空区}{k个流水段的总的时空区}=\frac{T_0}{kT_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback mtight">个流水段的总的时空区</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord cjk_fallback mtight">个任务占用的时空区</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3393em;vertical-align:-0.4509em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4509em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol></li></ol><h2 id="层次化存储器结构">层次化存储器结构</h2><p><img src="pic/2023111801.png" alt="img"></p><blockquote><p>内存存储外存的部分内容，cache存储内存的部分内容，CPU只处理cache中的指令，cache的作用是精简内存中重复出现的指令，提高CPU的执行效率，使得计算机的运算速度得到极大的提升；此外，结构中由上至下，速度越来越慢，但容量越来越大</p></blockquote><h2 id="Cache">Cache</h2><ol><li>Cache的功能：提高CPU输入输出的速率，突破冯诺依曼瓶颈，即CPU与存储器系统间数据传送带宽限制，在程序执行过程中，Cache与主存的地址映射是由硬件自动完成的</li><li>与cache相关的计算：如果以h代表Cache的访问命中率，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示Cache的周期时间，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示主存储器周期时间，以读操作为例，使用“Cache+主存储器”的系统的平均周期为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">t_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>3</mn></msub><mo>=</mo><mi>h</mi><mo>∗</mo><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_3=h*t_1+(1-h)*t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><ol><li><code>1-h</code>称为失效率（未命中率）</li></ol></li></ol><blockquote><p>CPU会在cache中寻找它需要的数据，如果不能找到，CPU就将前往内存中寻找，而chche的访问命中率就是CPU需要的数据在cache中被找到的比例，未能找到的数据CPU将前往内存中进行再次寻找</p></blockquote><ol start="3"><li>内存与cache地址映射的三种方式<ol><li>直接映像：cache的区号与内存的区号一一对应</li><li>全相连映像：cache的一个块号可以对应多个内存的块号，内存的一个块号也可以对应cache的多个块号</li><li>组相连映像：两种方式相结合的方法</li></ol></li></ol><blockquote><p>这三种映射方式都是计算机硬件自动完成的，不是软件</p></blockquote><ol start="4"><li>替换算法：替换算法的目的是使cache获得尽可能高的命中率，有以下四种：随机替换算法、先进先出算法、近期最少使用算法、优化替换算法</li></ol><blockquote><p>现代的计算机cache系统是分为了三个级别的，访问时先从第一层开始访问，直至三个级别的cache都被访问完全时才会访问内存</p></blockquote><ol start="5"><li>虚拟存储器：即CPU在给出需要访问的内存地址时，给出的并不是真正的物理地址，而是物理地址的抽象，虚拟存储器是由主存-辅存两级存储器组成</li><li>时间局限性：如果某条指令被执行，则不久以后该指令很可能再次被执行；如果某条数据结构被访问，则不久以后该数据结构很可能再次被访问。产生时间局限性的主要原因是程序中有大量的循环操作</li><li>空间局限性：一旦程序访问了某个内存单元，不久以后，其附近的内存单元也要被访问，即程序在一段时间内所访问的存储器空间可能集中在一定的范围之内，其最常见情况就是程序的顺序执行。工作集是指在某段时间隔内，进程所要访问的页面集合。虽然程序只需少量的几页内存就可以运行，但为了使程序更有效地运行，必须使程序的工作集全部在内存（主存储器）当中，否则会使进程在运行中频繁出现缺页中断，从而出现频繁的页面调入/调出现象</li></ol><h2 id="主存">主存</h2><p><strong>分类</strong></p><ol><li>随机存取存储器<ol><li>DRAM (Dynamic RAM ，动态 RAM ）——SDRAM</li><li>SRAM (Static RAM ，静态）</li></ol></li><li>只读存储器<ol><li>MROM(Mask ROM ，掩模式 ROM ）</li><li>PROM(ProgrammabIe ROM，一次可编程 ROM)</li><li>EPROM (Erasable PROM, 可擦除的 PROM)</li><li>闪速存储器 (flash memory ，闪存）</li></ol></li></ol><p><strong>编址</strong></p><ol><li>概念：主存的编址就是把许多块芯片组成相应的存储器</li><li>一般表示方式如下图，其中左图一中的8表示它有8个地址空间，4表示每一个地址空间存储了4位的信息</li></ol><p><img src="pic/2023111802.jpg" alt="img"></p><h2 id="磁盘结构与参数">磁盘结构与参数</h2><ol><li>存取时间=寻道时间+等待时间(平均定位时间+转动延迟)<ol><li>寻道时间是指磁头移动到磁道所需的时间</li><li>等待时间为等待读写的扇区转到磁头下方所需的时间</li></ol></li><li>磁道一般分为许多个小的扇形区，即物理块，磁头在依次读取这些物理块时(磁头必须依次读取)，会在读取的同时将其存放进缓存区，缓存区可以是单个，也可以是多个，存放完成后会在缓存区花费时间进行处理，处理期间磁头的读取不会停止，因此，如果缓存区过少，就会出现读取一个物理块花费了一个周期甚至更长的时间</li><li>磁盘调度管理中，先进行移臂调度寻找磁道，再进行旋转调度寻找扇区</li></ol><h2 id="总线">总线</h2><ol><li>概念：总线是连接计算机有关部件的一组信号线，是计算机中用来传送信息代码的公共通道</li><li>内部总线：微机内部的，各个外围芯片与处理器之间的总线，属于芯片级别</li><li>系统总线：系统总线即为各个插线板和系统板之间的总线<ol><li>数据总线：如32位，64位等一次性能够传输的位</li><li>地址总线：假设该计算机的地址总线为32位，那就代表它的地址空间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span>个字节</li><li>控制总线：发送相应的控制信号的总线</li></ol></li><li>外部总线：即微机和外部设备的总线</li></ol><blockquote><p>总线上的多个部件之间只能分时向总线发送数据，但可以同时从总线接收数据</p></blockquote><h2 id="可靠性">可靠性</h2><p><strong>串联系统</strong></p><ol><li>只要一个子系统失效，则整个系统都将失效</li><li>可靠性：累乘</li><li>失效率（近似）：累加</li></ol><p><strong>并联系统</strong></p><ol><li>少数子系统的失效将不会影响整个系统</li><li>可靠性：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>3</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1-(1-R_1)*(1-R_2)*···*(1-R_3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∗</span><span class="mpunct">⋅⋅⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∗</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>失效率：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mfrac><mn>1</mn><mi>λ</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mn>1</mn><mi>j</mi></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\mu=\frac{1}{\frac{1}{\lambda}\sum_{j=1}^{n} \frac{1}{j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.5841em;vertical-align:-0.739em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.599em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7047em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.8971em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4603em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4829em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.739em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol><p><strong>n模冗余模型</strong></p><ol><li>数据输入n个子系统中，它们各自得出自己的结果，然后汇总到表决器，表决器将遵循少数服从多数的原则，输出大多数子系统得到的那个答案然后进行输出</li></ol><p><img src="pic/2023111803.png" alt="img"></p><h2 id="校验码">校验码</h2><p><strong>奇偶校验码</strong></p><ol><li>在编码中增加一维校验位来使校验码中1的个数为奇数（奇校验）或偶数（偶校验）</li><li>常用奇偶校验码：水平奇偶校验码、垂直奇偶校验码、水平垂直校验码</li><li>可以检测出奇数位（出错的位数）出错的编码，但不能发现偶数位出错的情况</li><li>只能检错，不能纠错</li></ol><p><strong>海明码</strong></p><ol><li>利用奇偶性来检错和纠错的校验方法</li><li>设数据位是n位，校验位为k位，则必须满足：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo>&gt;</mo><mo>=</mo><mi>n</mi><mo>+</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">2^k-1&gt;=n+k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></li></ol><p><strong>例</strong>：求信息1011的海明码<br>（1）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>r</mi></msup><mo>≥</mo><mi>x</mi><mo>+</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^r\ge x+r+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8004em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>,确定校验码为三位：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>≥</mo><mn>4</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^3\ge4+3+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9501em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>.分别放在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn><mtext>、</mtext><msup><mn>2</mn><mn>1</mn></msup><mo>=</mo><mn>2</mn><mtext>、</mtext><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">2^0=1、2^1=2、2^2=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">2</span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>位<br>x为信息位的个数<br>（2）列出校验位公式<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo separator="true">,</mo><mn>6</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo separator="true">,</mo><mn>5</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo separator="true">,</mo><mn>3</mn><mo>=</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">7=2^2+2^1+2^0,6=2^2+2^1,5=2^2+2^0,3=2^1+2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><msub><mi>I</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>3</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">r_2=I_4\oplus I_3\oplus I_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><msub><mi>I</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>3</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_1=I_4\oplus I_3\oplus I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>0</mn></msub><mo>=</mo><msub><mi>I</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>2</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_0=I_4\oplus I_2\oplus I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>（3）根据公式得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn><mtext>，</mtext><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mtext>，</mtext><msub><mi>r</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r_2=0，r_1=0，r_0=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span><br>（4）将数据填入表格</p><table><thead><tr><th style="text-align:left">7</th><th style="text-align:left">6</th><th style="text-align:left">5</th><th style="text-align:left">4</th><th style="text-align:left">3</th><th style="text-align:left">2</th><th style="text-align:left">1</th><th style="text-align:left">位数</th></tr></thead><tbody><tr><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">I_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">I_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">I_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">信息位</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">r_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left">校验位</td></tr></tbody></table><p><a href="https://zhuanlan.zhihu.com/p/278326197">海明码- 知乎</a></p><p><strong>循环冗余校验码</strong></p><ol><li>在发送端，先把数据划分为组。假定每组 k 个比特</li><li>CRC 运算在每组 M 后面再添加供差错检测用的 n 位冗余码，然后构成一个帧发送出去。一共发送(k + n)位</li><li>帧检验序列 FCS：在数据后面添加上的冗余码</li><li>仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受</li><li>可以检错，不能纠错<br><img src="pic/2023111804.jpg" alt="img"></li></ol><h2 id="输入输出（I-O）控制方式">输入输出（I/O）控制方式</h2><ol><li>输入输出系统是一组固化到计算机内主板上一个ROM芯片上的程序<ol><li>程序查询方式<ol><li>一次只能读/写一个字</li><li><strong>CPU和I/O（外设）只能串行工作</strong>，CPU需要一直轮询检查</li><li>由CPU将数放入内存</li></ol></li><li>中断驱动方式<ol><li>I/0设备通过中断信号主动报告I/0操作已完成</li><li><strong>CPU和I/0 (外设) 可并行工作</strong></li><li>CPU利用率得到提升</li><li>由CPU将数放入内存</li></ol></li><li>直接存储器方式（DMA）<ol><li>CPU和I/0 (外设) 可并行工作</li><li>仅在传送数据块的开始和结束时才需要CPU的干预</li><li>由外设直接将数据放入内存</li><li>一次读写的单位为“块”而不是字</li></ol></li></ol></li></ol><blockquote><p>CPU是在一个总线周期结束时响应DMA请求的，即不是DMA一请求CPU就响应，而是CPU在接收到DMA请求后，在该系统总线周期结束后进行响应，因为DMA控制器在需要的时候会代替CPU作为总线主设备，在不受CPU干预的情况下，控制I/O设备与系统主存之间的直接数据传输</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件设计师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Python」Python基础</title>
      <link href="/6bfadb596c5e.html"/>
      <url>/6bfadb596c5e.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法">基础语法</h2><h3 id="字面量">字面量</h3><ol><li>字面量：在代码中被写下来的固定的值</li><li>常用值（数据）的类型</li></ol><table><thead><tr><th>类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>数字(Number)</td><td>- 整数(int)<br>- 浮点数(float)<br>- 复数(complex)<br>- 布尔(bool)</td><td></td></tr><tr><td>字符串(String)</td><td>描述文本的一种数据类型</td><td>程序中需要添加引号</td></tr><tr><td>列表(List)</td><td>有序的可变序列</td><td>Python中使用最频繁的数据类型</td></tr><tr><td>元组(Tuple)</td><td>有序的不可变序列</td><td></td></tr><tr><td>集合(Set)</td><td>无序不重复集合</td><td></td></tr><tr><td>字典(Dictionary)</td><td>无序Key-Value集合</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">字面量  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Author：binxin  </span></span><br><span class="line"><span class="string">Date：2023/10/26 19:20  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="number">666</span>  </span><br><span class="line"><span class="number">13.14</span>  </span><br><span class="line"><span class="string">&quot;黑马程序员&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;黑马程序员&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="注释">注释</h3><ol><li>注释：在程序代码中对程序代码进行解释说明的文字</li><li>作用：注释不是程序，不能被执行，只是对程序代码进行解释说明，能够大大增强代码的可读性</li><li>分类：<ol><li>单行注释:以 # 开头，# 右边 的所有文字当作说明，而不是真正要执行的程序，起辅助说明作用</li><li>多行注释: 以一对三个双引号引起来 (“”“注释内容”“”)来解释说明一段代码的作用使用方法</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">注释  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Author：binxin  </span></span><br><span class="line"><span class="string">Date：2023/10/26 19:28  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 写一个整数字面量  </span></span><br><span class="line"><span class="number">666</span>  </span><br><span class="line"><span class="comment"># 写一个浮点数字面量  </span></span><br><span class="line"><span class="number">13.14</span>  </span><br><span class="line"><span class="comment"># 写一个字符串字面量  </span></span><br><span class="line"><span class="string">&quot;黑马程序员&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 通过print语句输出各类字面量  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;黑马程序员&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="变量">变量</h3><ol><li>变量：在程序运行时，能储存计算结果或能表示值的抽象概念</li><li>变量的定义格式：<code>变量名称=变量的值</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/26 19:35</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量，用于记录钱包的余额</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line"><span class="comment"># 通过print语句，输出变量记录的内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>, money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 买了一个冰淇淋，花费了10元</span></span><br><span class="line">money = money - <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;买了冰淇凌花了10元，还剩余：&quot;</span>, money,<span class="string">&quot;元&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设，每隔一小时，输出一下钱包的余额</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午1点，钱包的余额为：&quot;</span>,money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午2点，钱包的余额为：&quot;</span>,money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午3点，钱包的余额为：&quot;</span>,money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午4点，钱包的余额为：&quot;</span>,money)</span><br></pre></td></tr></table></figure><h3 id="数据类型">数据类型</h3><ol><li>type()语句<ol><li>语法：<code>type(被查看类型的数据)</code></li></ol></li><li>type()语句的使用方式<ol><li>在print语句中直接输出类型信息</li><li>用变量存储type()的结果（返回值）</li><li>查看变量中存储的数据类型信息<ol><li>查看的是数据的类型，变量无类型</li></ol></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/27 20:35</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：使用print直接输出类型信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;黑马程序员&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">666</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">11.345</span>))</span><br><span class="line"><span class="comment"># 方式2：使用变量存储type()语句的结果</span></span><br><span class="line">string_type = <span class="built_in">type</span>(<span class="string">&quot;黑马程序员&quot;</span>)</span><br><span class="line">int_type = <span class="built_in">type</span>(<span class="number">666</span>)</span><br><span class="line">float_type = <span class="built_in">type</span>(<span class="number">11.345</span>)</span><br><span class="line"><span class="built_in">print</span>(string_type)</span><br><span class="line"><span class="built_in">print</span>(int_type)</span><br><span class="line"><span class="built_in">print</span>(float_type)</span><br><span class="line"><span class="comment"># 方式3：使用type()语句，查看变量中存储的数据类型信息</span></span><br><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line">name_type = <span class="built_in">type</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name_type)</span><br></pre></td></tr></table></figure><h3 id="数据类型转换">数据类型转换</h3><ol><li>常见的转换语句：都有返回值</li></ol><table><thead><tr><th>语句(函数)</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将x转换为一个字符串</td></tr></tbody></table><ol><li>想要将字符串转换成数字，必须要求字符串内的内容都是数字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据类型转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/27 20:53</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 将数字类型转换为字符串</span></span><br><span class="line">num_str = <span class="built_in">str</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num_str), num_str)</span><br><span class="line"></span><br><span class="line">float_str = <span class="built_in">str</span>(<span class="number">11.345</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_str), float_str)</span><br><span class="line"><span class="comment"># 将字符串转换成数字</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="string">&quot;11&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num), num)</span><br><span class="line"></span><br><span class="line">num2 = <span class="built_in">float</span>(<span class="string">&quot;11.345&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num2), num2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="comment"># num3 = int(&quot;黑马程序员&quot;)</span></span><br><span class="line"><span class="comment"># print(type(num3),num3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数转浮点数</span></span><br><span class="line">float_num = <span class="built_in">float</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_num), float_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数转整数</span></span><br><span class="line">int_num=<span class="built_in">int</span>(<span class="number">11.345</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(int_num),int_num)</span><br></pre></td></tr></table></figure><h3 id="标识符">标识符</h3><ol><li>标识符:是用户在编程的时候所使用的一系列名字，用于给变量、类、方法等命名</li><li>标识符命名规则<ol><li>内容限定：只允许使用英文、中文、数字、下划线<ol><li>不推荐使用中文</li><li>数字不能做开头</li></ol></li><li>大小写敏感：字母的大写和小写，是完全能够区分的</li><li>不可使用关键字</li></ol></li><li>变量的命名规范<ol><li>见名知意</li><li>下划线命名法：多个单词组合变量名，要使用下划线做分隔</li><li>英文字母全小写</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">标识符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/28 19:13</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容限定</span></span><br><span class="line"><span class="comment"># 错误的代码示范</span></span><br><span class="line"><span class="comment"># 1_name = &quot;张三&quot;</span></span><br><span class="line"><span class="comment"># name_ != &quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line">name_ = <span class="string">&quot;张三&quot;</span></span><br><span class="line">_name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">name_1 = <span class="string">&quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写敏感</span></span><br><span class="line">Itheima = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line">itheima = <span class="string">&quot;666&quot;</span></span><br><span class="line"><span class="built_in">print</span>(Itheima, itheima)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可使用关键字</span></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="comment"># class =1</span></span><br><span class="line"><span class="comment"># def =1</span></span><br><span class="line">Class = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><ol><li>算术（数学）运算符</li></ol><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>//</td><td>取整除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>**</td><td>指数</td></tr></tbody></table><ol><li>赋值运算符：<code>=</code></li><li>复合赋值表达式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运算符</span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/28 19:27</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算术(数学)运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1+1=&quot;</span>, <span class="number">1</span> + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2-1=&quot;</span>, <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3*3=&quot;</span>, <span class="number">3</span> * <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;4/2=&quot;</span>, <span class="number">4</span> / <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;11//2=&quot;</span>, <span class="number">11</span> // <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9%2=&quot;</span>, <span class="number">9</span> % <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2**2=&quot;</span>, <span class="number">2</span> ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值运算符</span></span><br><span class="line">num = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="字符串扩展">字符串扩展</h3><p><strong>字符串的三种定义方式</strong></p><ol><li>单引号定义法：name = ‘黑马程序员’</li><li>双引号定义法：name = “黑马程序员”</li><li>三引号定义法：name = “”“黑马程序员”“”</li><li>字符串的引号嵌套<ol><li>单引号定义法，可以内含双引号</li><li>双引号定义法，可以内含单引号</li><li>可以使用转移字符 <code>\</code> 来将引号解除效用，变成普通字符串</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单引号定义法</span></span><br><span class="line">name = <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 双引号定义法：</span></span><br><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 三引号定义法</span></span><br><span class="line">name = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">黑马</span></span><br><span class="line"><span class="string">程序员</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在字符串内包含双引号</span></span><br><span class="line">name = <span class="string">&#x27;&quot;黑马程序员&quot;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 在字符串内包含单引号</span></span><br><span class="line">name = <span class="string">&quot;&#x27;黑马程序员&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 使用转义字符 \ 接触引号效用</span></span><br><span class="line">name = <span class="string">&quot;\&quot;黑马程序员\&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line">name = <span class="string">&#x27;\&#x27;黑马程序员\&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br></pre></td></tr></table></figure><p><strong>字符串拼接</strong></p><ol><li>如果我们有两个字符串(文本)字面量，可以将其拼接成一个字符串，通过+号即可完成</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字面量之间的拼接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pin&quot;</span> + <span class="string">&quot;hsin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串字面和和字符串变量之间的拼接</span></span><br><span class="line">name = <span class="string">&quot;pinhsin&quot;</span></span><br><span class="line">point = <span class="string">&quot;学python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是&quot;</span> + name + <span class="string">&quot;，我在&quot;</span> + point)</span><br></pre></td></tr></table></figure><p><strong>字符串格式化</strong></p><ol><li>多个变量占位变量要用括号括起来，并按照占位的顺序填入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过占位的形式完成拼接</span></span><br><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line">message = <span class="string">&quot;学IT来：%s&quot;</span> % name</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过占位的形式，完成数字和字符串的拼接</span></span><br><span class="line">class_num = <span class="number">57</span></span><br><span class="line">avg_salary = <span class="number">16781</span></span><br><span class="line">message = <span class="string">&quot;Python大数据学科，北京%sq期，毕业平均工资：%s&quot;</span> % (class_num, avg_salary)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><ol><li>语法：f&quot;内容{变量}&quot;<ol><li>不限数据类型，不做精度控制</li></ol></li></ol><p><strong>格式化的精度控制</strong></p><ol><li>使用辅助符号&quot;m.n&quot;来控制数据的宽度和精度<ol><li>m：控制宽度，要求是数字(很少使用)，设置的宽度小于数字自身，不生效</li><li>.n：控制小数点精度，要求是数字，会进行小数的四舍五入</li></ol></li></ol><p><strong>对表达式进行格式化</strong></p><ol><li>表达式：一条具有明确执行结果的代码语句</li><li>格式化同字符串格式化</li></ol><h3 id="数据输入">数据输入</h3><ol><li>input()语句<ol><li>括号内可以填入提示内容</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/10 14:21</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请告诉我你是谁？&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我知道了，你是%s&quot;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数字类型</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;银行卡密码：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 数据类型转换</span></span><br><span class="line">num = <span class="built_in">int</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br></pre></td></tr></table></figure><h2 id="数据类型进阶">数据类型进阶</h2><h3 id="列表">列表</h3><p><strong>添加元素</strong></p><ol><li>append：在末尾添加元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量A，默认有3个元素</span></span><br><span class="line">A = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐添加之前，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br><span class="line"><span class="comment">#提示、并添加元素</span></span><br><span class="line">temp = <span class="built_in">input</span>(<span class="string">&#x27;请输入要添加的学生姓名:&#x27;</span>)</span><br><span class="line">A.append(temp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐添加之后，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br></pre></td></tr></table></figure><ol><li>insert(index, object)：在指定位置index前插入元素object</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strs = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">strs.insert(<span class="number">3</span>,<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(strs)  <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;h&#x27;, &#x27;s&#x27;]</span></span><br></pre></td></tr></table></figure><ol><li>extend：通过extend可以将另一个列表中的元素逐一添加到列表中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">b = [<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;] 将 b 添加到 a 里</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;] b的内容不变</span></span><br></pre></td></tr></table></figure><p><strong>修改元素</strong><br>通过指定下标来访问列表元素，因此修改元素的时候，为指定的列表下标赋值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量A，默认有3个元素</span></span><br><span class="line">A = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐修改之前，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br><span class="line"><span class="comment">#修改元素</span></span><br><span class="line">A[<span class="number">1</span>] = <span class="string">&#x27;xiaoLu&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐修改之后，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br></pre></td></tr></table></figure><p><strong>查找元素</strong></p><ol><li>in（存在）,如果存在那么结果为true，否则为false</li><li>not in（不存在），如果不存在那么结果为true，否则false</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#待查找的列表</span></span><br><span class="line">nameList = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"><span class="comment">#获取用户要查找的名字</span></span><br><span class="line">findName = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查找的姓名:&#x27;</span>)</span><br><span class="line"><span class="comment">#查找是否存在</span></span><br><span class="line"><span class="keyword">if</span> findName <span class="keyword">in</span> nameList:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;在列表中找到了相同的名字&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;没有找到&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><ol><li>del：根据下标进行删除</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movieName = [<span class="string">&#x27;加勒比海盗&#x27;</span>,<span class="string">&#x27;骇客帝国&#x27;</span>,<span class="string">&#x27;第一滴血&#x27;</span>,<span class="string">&#x27;指环王&#x27;</span>,<span class="string">&#x27;霍比特人&#x27;</span>,<span class="string">&#x27;速度与激情&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之前‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br><span class="line"><span class="keyword">del</span> movieName[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之后‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br></pre></td></tr></table></figure><ol start="2"><li>pop：删除最后一个元素</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movieName = [&#x27;加勒比海盗&#x27;,&#x27;骇客帝国&#x27;,&#x27;第一滴血&#x27;,&#x27;指环王&#x27;,&#x27;霍比特人&#x27;,&#x27;速度与激情&#x27;]</span><br><span class="line">print(&#x27;‐‐‐‐‐‐删除之前‐‐‐‐‐‐movieName=%s&#x27; % movieName)</span><br><span class="line">movieName.pop()</span><br><span class="line">print(&#x27;‐‐‐‐‐‐删除之后‐‐‐‐‐‐movieName=%s&#x27; % movieName)</span><br></pre></td></tr></table></figure><ol start="3"><li>remove：根据元素的值进行删除，只会删除第一个相同的元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movieName = [<span class="string">&#x27;加勒比海盗&#x27;</span>,<span class="string">&#x27;骇客帝国&#x27;</span>,<span class="string">&#x27;第一滴血&#x27;</span>,<span class="string">&#x27;指环王&#x27;</span>,<span class="string">&#x27;霍比特人&#x27;</span>,<span class="string">&#x27;速度与激情&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之前‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br><span class="line">movieName.remove(<span class="string">&#x27;指环王&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之后‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br></pre></td></tr></table></figure><h3 id="元组">元组</h3><ol><li>Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号</li><li>访问元组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="string">&#x27;hello&#x27;</span>, <span class="number">100</span>, <span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><ol start="3"><li>定义只有一个元素的元组，需要在唯一的元素后写一个逗号</li></ol><h3 id="切片">切片</h3><ol><li>切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作</li><li>语法：<code>[起始:结束:步长]</code>，也可以简化使用 <code>[起始:结束]</code><ol><li>选取的区间从&quot;起始&quot;位开始，到&quot;结束&quot;位的前一位结束（不包含结束位本身)，步长表示选取间隔</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引是通过下标取某一个元素</span></span><br><span class="line"><span class="comment"># 切片是通过下标去某一段元素</span></span><br><span class="line">s = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">4</span>])  <span class="comment"># o 字符串里的第4个元素</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:<span class="number">7</span>])  <span class="comment"># lo W 包含下标 3，不含下标 7</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:])  <span class="comment"># ello World! 从下标为1开始，取出 后面所有的元素（没有结束位）</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">4</span>])  <span class="comment"># Hell 从起始位置开始，取到 下标为4的前一个元素（不包括结束位本身）</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># el 从下标为1开始，取到下标为5的前一个元素，步长为2（不包括结束位本身）</span></span><br></pre></td></tr></table></figure><h3 id="字典">字典</h3><p><strong>查看元素</strong><br>除了使用key查找数据，还可以使用get来获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(info[<span class="string">&#x27;age&#x27;</span>])  <span class="comment"># 获取年龄</span></span><br><span class="line"><span class="comment"># print(info[&#x27;sex&#x27;]) # 获取不存在的key，会发生异常</span></span><br><span class="line"><span class="built_in">print</span>(info.get(<span class="string">&#x27;sex&#x27;</span>))  <span class="comment"># 获取不存在的key，获取到空的内容，不会出现异常</span></span><br><span class="line"><span class="built_in">print</span>(info.get(<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>))  <span class="comment"># 获取不存在的key, 可以提供一个默认值。</span></span><br></pre></td></tr></table></figure><p><strong>修改元素</strong><br>字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改之前的字典为 %s:&#x27;</span> % info)    <span class="comment"># 修改之前的字典为 &#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;:</span></span><br><span class="line">info[<span class="string">&#x27;id&#x27;</span>] = <span class="number">200</span>  <span class="comment"># 为已存在的键赋值就是修改</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改之后的字典为 %s:&#x27;</span> % info)    <span class="comment"># 修改之后的字典为 &#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 200&#125;:</span></span><br></pre></td></tr></table></figure><p><strong>添加元素</strong><br>如果在使用 <code>变量名['键'] = 数据</code> 时，这个“键”在字典中不存在，那么就会新增这个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加之前的字典为:%s&#x27;</span> % info)  <span class="comment"># 添加之前的字典为:&#123;&#x27;name&#x27;: &#x27;班长&#x27;&#125;</span></span><br><span class="line">info[<span class="string">&#x27;id&#x27;</span>] = <span class="number">100</span>  <span class="comment"># 为不存在的键赋值就是添加元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加之后的字典为:%s&#x27;</span> % info)  <span class="comment"># 添加之后的字典为:&#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;</span></span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><ol><li>del：删除指定的元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除前,%s&#x27;</span> % info)  <span class="comment"># 删除前,&#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;</span></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># del 可以通过键删除字典里的指定元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除后,%s&#x27;</span> % info)  <span class="comment"># 删除后,&#123;&#x27;id&#x27;: 100</span></span><br></pre></td></tr></table></figure><ol start="2"><li>del：删除整个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除前,%s&#x27;</span> % info)</span><br><span class="line"><span class="keyword">del</span> info  <span class="comment"># del 也可以直接删除变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除后,%s&#x27;</span> % info)</span><br></pre></td></tr></table></figure><ol start="3"><li>clear：清空整个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;清空前,%s&#x27;</span> % info)  </span><br><span class="line">info.clear()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;清空后,%s&#x27;</span> % info) <span class="comment"># 清空后,&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>字典的遍历</strong></p><ol><li>遍历字典的key（键）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> info.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># id</span></span><br></pre></td></tr></table></figure><ol start="2"><li>遍历字典的value（值）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> info.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># monitor</span></span><br><span class="line"><span class="comment"># 100</span></span><br></pre></td></tr></table></figure><ol start="3"><li>遍历字典的项（元素）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (&#x27;name&#x27;, &#x27;monitor&#x27;)</span></span><br><span class="line"><span class="comment"># (&#x27;id&#x27;, 100)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>遍历字典的key-value（键值对）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;key=<span class="subst">&#123;key&#125;</span>,value=<span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key=name,value=monitor</span></span><br><span class="line"><span class="comment"># key=id,value=100</span></span><br></pre></td></tr></table></figure><h2 id="文件">文件</h2><h3 id="文件的打开与关闭">文件的打开与关闭</h3><p><strong>打开文件/创建文件</strong></p><ol><li>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件</li><li>语法：<code>open(文件路径，访问模式)</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>访问模式</strong></p><table><thead><tr><th>访问模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，则报错。这是默认模式</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写</td></tr></tbody></table><p><strong>关闭文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件，文件名为:test.txt</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭这个文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="文件的读写">文件的读写</h3><p><strong>写数据(write)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  </span><br><span class="line">f.write(<span class="string">&#x27;hello world, i am here!\n&#x27;</span> * <span class="number">5</span>)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>读数据</strong></p><ol><li>read：使用read(num)可以从文件中读取数据，num表示要从文件中读取的数据的长度（单位是字节），如果没有传入 num，那么就表示读取文件中所有的数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">content = f.read(<span class="number">5</span>) <span class="comment"># 最多读取5个数据  </span></span><br><span class="line"><span class="built_in">print</span>(content)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐&quot;</span> * <span class="number">30</span>) <span class="comment"># 分割线，用来测试  </span></span><br><span class="line">content = f.read() <span class="comment"># 从上次读取的位置继续读取剩下的所有的数据  </span></span><br><span class="line"><span class="built_in">print</span>(content)  </span><br><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><blockquote><p>如果用 open 打开文件时，如果使用的&quot; r &quot;，那么可以省略 <code>open('test.txt')</code></p></blockquote><ol><li>readline：只用来读取一行数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">content = f.readline()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1:%s&quot;</span> % content)  </span><br><span class="line">content = f.readline()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2:%s&quot;</span> % content)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ol><li>readlines：可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行为列表的一个元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = f.readlines()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(content))</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> content:</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="序列化和反序列化">序列化和反序列化</h3><blockquote><ul><li>序列化：对象-&gt;字节序列</li><li>反序列化：字节序列-&gt;对象</li></ul></blockquote><p><strong>使用JSON实现序列化</strong></p><ol><li>dumps：把对象转换成为字符串，它本身不具备将数据写入到文件的功能</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;names.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">names = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;henry&#x27;</span>, <span class="string">&#x27;merry&#x27;</span>, <span class="string">&#x27;chris&#x27;</span>]</span><br><span class="line"><span class="comment"># file.write(names)  出错，不能直接将列表写入到文件里</span></span><br><span class="line"><span class="comment"># 可以调用 json的dumps方法，传入一个对象参数</span></span><br><span class="line">result = json.dumps(names)</span><br><span class="line"><span class="comment"># dumps 方法得到的结果是一个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 可以将字符串写入到文件里</span></span><br><span class="line">file.write(result)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><ol start="2"><li>dump：可以在将对象转换成为字符串的同时，指定一个文件对象，把转换后的字符串写入到这个文件里</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;names.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">names = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;henry&#x27;</span>, <span class="string">&#x27;merry&#x27;</span>, <span class="string">&#x27;chris&#x27;</span>]</span><br><span class="line"><span class="comment"># dump方法可以接收一个文件参数，在将对象转换成为字符串的同时写入到文件里</span></span><br><span class="line">json.dump(names, file)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>使用JSON实现反序列化</strong></p><ol><li>loads：需要一个字符串参数，用来将一个字符串加载成为Python对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用loads方法，传入一个字符串，可以将这个字符串加载成为Python对象</span></span><br><span class="line">result = json.loads(<span class="string">&#x27;[&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;, &quot;jerry&quot;, &quot;henry&quot;, &quot;merry&quot;, &quot;chris&quot;]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ol><li>load：可以传入一个文件对象，用来将一个文件对象里的数据加载成为Python对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以可读方式打开一个文件</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;names.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用load方法，将文件里的内容加载成为一个Python对象</span></span><br><span class="line">result = json.load(file)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><h2 id="异常">异常</h2><ol><li><p>在读取一个文件时，如果这个文件不存在，则会报出FileNotFoundError错误</p></li><li><p>try…except语句</p><ol><li>语法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   可能会出现异常的代码块</span><br><span class="line"><span class="keyword">except</span> 异常的类型:</span><br><span class="line">   出现异常以后的处理语句</span><br></pre></td></tr></table></figure><ol start="2"><li>示例</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件没有找到,请检查文件名称是否正确&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Java从入门到精通」Java语言概述</title>
      <link href="/7ddf46a04c61.html"/>
      <url>/7ddf46a04c61.html</url>
      
        <content type="html"><![CDATA[<h2 id="计算机的硬件">计算机的硬件</h2><ol><li>CPU</li><li>内存</li><li>存储设备</li><li>输入设备</li><li>输出设备</li><li>通信设备</li></ol><h2 id="常见的DOS命令">常见的DOS命令</h2><ol><li>进入和回退</li></ol><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">盘符名称:</td><td style="text-align:left">盘符切换。D:，表示切换到D盘</td></tr><tr><td style="text-align:left">dir</td><td style="text-align:left">列出当前目录下的文件及文件夹</td></tr><tr><td style="text-align:left">cd 目录</td><td style="text-align:left">进入指定单级目录文件夹</td></tr><tr><td style="text-align:left">cd 目录1\目录2\…</td><td style="text-align:left">进入指定多级目录</td></tr><tr><td style="text-align:left">cd…</td><td style="text-align:left">回退到上一级目录</td></tr><tr><td style="text-align:left">cd / 或cd \</td><td style="text-align:left">回退到盘符目录</td></tr></tbody></table><ol><li>增删</li></ol><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">md 文件目录名</td><td style="text-align:left">创建指定的文件目录</td></tr><tr><td style="text-align:left">rd 文件目录名</td><td style="text-align:left">删除指定的文件目录（文件目录内有数据则无法删除）</td></tr></tbody></table><ol><li>其他</li></ol><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">cls</td><td style="text-align:left">清屏</td></tr><tr><td style="text-align:left">exit</td><td style="text-align:left">退出命令提示符窗口</td></tr><tr><td style="text-align:left">← →</td><td style="text-align:left">移动光标</td></tr><tr><td style="text-align:left">↑↓</td><td style="text-align:left">调阅历史操作命令</td></tr><tr><td style="text-align:left">Backspace和Delete</td><td style="text-align:left">删除字符</td></tr></tbody></table><h2 id="HelloWorld的编写和执行">HelloWorld的编写和执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloChina</span>&#123;  <span class="comment">//class：关键字，表示“类”，后面跟着类名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello,world!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Java程序编写的过程<ol><li>编写：.java源文件</li><li>编译：<code>javac java源文件.java</code></li><li>运行：<code>java 文件名</code></li></ol></li></ol><blockquote><ul><li>Java程序严格区分大小写；</li><li>每一行执行语句以“;”结尾</li><li>一个源文件中可以声明多个类，但是最多只能有一个类使用public进行声明，且要求声明为public的类的类名与源文件相同</li></ul></blockquote><h2 id="单行注释和多行注释的使用">单行注释和多行注释的使用</h2><ol><li>单行注释</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释文字</span></span><br></pre></td></tr></table></figure><ol start="2"><li>多行注释</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释文字1</span></span><br><span class="line"><span class="comment">注释文字2</span></span><br><span class="line"><span class="comment">注释文字3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>文档注释<ol><li>文档注释的内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档</li><li>操作方法： <code>javadoc -d mydoc -author -version HelloWorld.java</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> 指定Java程序的作者</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 指定源文件的版本</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」字符型数据</title>
      <link href="/8ce8ea82eb87.html"/>
      <url>/8ce8ea82eb87.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符型常量">字符型常量</h2><h3 id="字符常量">字符常量</h3><ol><li>单引号中的大写字母和小写字母代表不同的字符常量</li><li>单引号中的空格符也是一个字符常量</li><li>字符常量只能包含一个字符</li><li>字符常量只能用单引号括起来，不能用双引号括起来</li><li>字符常量在内存中占一个字节，存放的是字符的ASCII代码值</li></ol><h3 id="转义字符常量">转义字符常量</h3><table><thead><tr><th style="text-align:left">字符形式</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">\n</td><td style="text-align:left">回车换行</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">横向跳若干个（Tab键）</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">竖向跳格</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车符</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">换页符</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格符（Backspace键）</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">反斜杠字符“\”</td></tr><tr><td style="text-align:left">'</td><td style="text-align:left">单引号字符</td></tr><tr><td style="text-align:left">&quot;</td><td style="text-align:left">双引号字符</td></tr><tr><td style="text-align:left">\ddd</td><td style="text-align:left">三位八进制数代表的一个ASCII字符</td></tr><tr><td style="text-align:left">\xhh</td><td style="text-align:left">二位十六进制数代表的一个ASCII字符</td></tr><tr><td style="text-align:left">\0</td><td style="text-align:left">空值，其ASCII码值为0</td></tr></tbody></table><ol><li>转义字符常量只代表一个字符</li><li>反斜线后的八进制数可以不带0开头</li><li>在一对单引号内，可以用反斜线后跟一个十六进制数来表示一个ASCII字符</li></ol><h3 id="字符串常量">字符串常量</h3><ol><li>定义：由双引号括起来的一串字符</li><li>在C语言中，系统在每个字符串的最后自动加入一个字符 <code>'\0'</code> 作为字符串的结束标志</li></ol><h3 id="可对字符量进行的运算">可对字符量进行的运算</h3><ol><li>字符量可参加任何整数运算</li></ol><h2 id="字符变量">字符变量</h2><ol><li>C语言中，字符变量用关键字char定义，在定义的同时可以赋初值</li><li>占一个字节</li><li>字符变量可以作为整型变量来处理，可以参与对整型变量所允许的任何运算</li></ol><h2 id="字符的输入和输出">字符的输入和输出</h2><h3 id="调用printf和scanf函数输出和输入字符">调用printf和scanf函数输出和输入字符</h3><ol><li>调用函数进行输入和输出时，必须在程序的开头出现包含头文件stdio.h的命令行：<code>#include &lt;stdio.h&gt;</code></li></ol><h3 id="调用putchar和getchar函数输出和输入字符">调用putchar和getchar函数输出和输入字符</h3><ol><li>putchar函数用于输出字符，调用形式：<code>putchar(ch)</code><ol><li>ch可以是字符常量也可以是字符变量</li></ol></li><li>getchar函数用于输入字符，调用形式：<code>ch=getchar()</code></li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出26个大写字母和它们的ASCII代码，每行输出两组数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i=i+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c %d %c %d\n&quot;</span>, c + i, c + i, c + i + <span class="number">1</span>, c + i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从终端输入一个字符，当按Enter键时，程序才继续往下进行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把从终端输入的一行字符中所有小写字母转换为大写字母，其他字符不变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">            ch = ch - <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">统计输入的字符中空格符、换行符和横向跳格（制表）符的个数，用！结束输入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27; &#x27;</span>||ch==<span class="string">&#x27;\n&#x27;</span>||ch==<span class="string">&#x27;\t&#x27;</span>)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把一串密文译成明文，密文以字符@表示结束，译码规则如下：</span></span><br><span class="line"><span class="comment">（1）如果是字母，转换成字母序列的下一个字母。如A译成B</span></span><br><span class="line"><span class="comment">（2）如果是字母Z，译成A</span></span><br><span class="line"><span class="comment">（3）无论是大小写字母都译成小写字母</span></span><br><span class="line"><span class="comment">（4）其他字符一律照原样译出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(ch))&#123;    <span class="comment">/*isalpha(ch)判断ch中的字符是否为字母，如果是，函数值为1*/</span></span><br><span class="line">            ch = <span class="built_in">tolower</span>(ch);   <span class="comment">/*把大写字母转为小写字母*/</span></span><br><span class="line">            ch = (ch - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」循环结构</title>
      <link href="/c100f34d4b56.html"/>
      <url>/c100f34d4b56.html</url>
      
        <content type="html"><![CDATA[<h2 id="while语句和用while语句构成的循环结构">while语句和用while语句构成的循环结构</h2><ol><li>一般形式：<code>while(表达式) 循环体</code><ol><li>表达式不能为空</li></ol></li></ol><h2 id="do-while语句和用do-while语句构成的循环结构">do-while语句和用do-while语句构成的循环结构</h2><ol><li>一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">while</span>(表达式);</span><br></pre></td></tr></table></figure><ol start="2"><li>do必须和while联合使用</li></ol><h2 id="for语句和用for语句构成的循环结构">for语句和用for语句构成的循环结构</h2><ol><li>一般形式：<code>for(表达式1;表达式2;表达式3) 循环体</code></li><li>执行过程<ol><li>计算表达式1</li><li>计算表达式2.若其值为非0，转步骤3；若其值为0，转步骤5</li><li>执行一次for循环体</li><li>计算表达式3，转向步骤2</li><li>结束循环</li></ol></li><li>for语句中的表达式可以部分或全部省略，但两个“;”不可以省略</li></ol><h2 id="循环结构的嵌套">循环结构的嵌套</h2><ol><li>嵌套循环：在一个循环体内又完整地包含了另一个循环</li></ol><h2 id="break和continue语句在循环体中的作用">break和continue语句在循环体中的作用</h2><ol><li>break语句只能在循环体内和switch语句体内使用</li><li>continue语句的作用是跳过本次循环体中余下尚未执行的语句，立刻进行下一次的循环条件判定</li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从输入的若干个正整数中选出最大值，用-1结束输入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> max, n;</span><br><span class="line">    max=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入数据，用-1结束输入：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span>(max&lt;n)&#123;</span><br><span class="line">            max = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (n != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%d&quot;</span>, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用迭代法求某数a的平方根。已知求平方根的迭代公式为x1=（x0+a/x0）/2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> x0, x1, a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a);</span><br><span class="line">    x0 = a / <span class="number">2</span>;</span><br><span class="line">    x1 = (x0 + a / x0) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x0 = x1;</span><br><span class="line">        x1 = (x0 + a / x0) / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (a &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">fabs</span>(x1 - x0) &gt; <span class="number">1e-6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x=%f&quot;</span>, x1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」选择结构</title>
      <link href="/9bd95ab60051.html"/>
      <url>/9bd95ab60051.html</url>
      
        <content type="html"><![CDATA[<h2 id="关系运算和逻辑运算">关系运算和逻辑运算</h2><h3 id="C语言的逻辑值">C语言的逻辑值</h3><ol><li>在C语言中，用非0表示“真”，用0表示“假”</li></ol><h3 id="关系运算符和关系表达式">关系运算符和关系表达式</h3><ol><li>6种关系运算符<ol><li>小于 &lt;</li><li>大于 &gt;</li><li>等于 ==</li><li>小于或等于 &lt;=</li><li>大于或等于 &gt;=</li><li>不等于 !=</li></ol></li><li>由两个字符组成的运算符之间不允许有空格</li><li>关系运算符是双目运算符，具有自左至右的结合性</li><li>关系运算的值为“逻辑值”，只有可能是整数0或1</li></ol><h3 id="逻辑运算符和逻辑表达式">逻辑运算符和逻辑表达式</h3><p><strong>逻辑运算符</strong></p><ol><li>三种逻辑运算符<ol><li>逻辑与 &amp;&amp;</li><li>逻辑或 ||</li><li>逻辑非 !</li></ol></li><li>&amp;&amp;和||为双目运算符，!为单目运算符，出现在运算对象的左边。结合方向自左至右</li></ol><p><strong>逻辑表达式和逻辑表达式的值</strong></p><ol><li>逻辑表达式的运算结果为1或0</li><li>由&amp;&amp;或||构成的逻辑表达式，在特定情况下会产生“短路”现象</li></ol><h2 id="if语句和用if语句构成的选择结构">if语句和用if语句构成的选择结构</h2><h3 id="if语句">if语句</h3><ol><li>基本形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) 语句    /\* 不含<span class="keyword">else</span>子句的<span class="keyword">if</span>语句 \*/</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(表达式) 语句<span class="number">1</span>    /\* 含<span class="keyword">else</span>子句的<span class="keyword">if</span>语句 \*/</span><br><span class="line"><span class="keyword">else</span> 语句<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="嵌套的if语句">嵌套的if语句</h3><ol><li>语句形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(表达式<span class="number">2</span>) 语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>else子句总是与前面最近的不带else的if相结合</li></ol><h2 id="条件表达式构成的选择结构">条件表达式构成的选择结构</h2><ol><li>条件运算符：<code>? :</code> ,C语言提供的唯一的三目运算符</li><li>右条件运算符构成的条件表达式：<code>表达式1 ? 表达式2 : 表达式3</code></li><li>运算功能：当表达式1的值为非零时，求出表达式2的值为整个表达式的值；当表达式1的值为零时，求出表达式3的值为整个表达式的值</li></ol><h2 id="switch语句以及用switch语句和break语句构成的选择结构">switch语句以及用switch语句和break语句构成的选择结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">1</span>:语句<span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">2</span>:语句<span class="number">2</span></span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line"><span class="keyword">case</span> 常量表达式n:语句n</span><br><span class="line"><span class="keyword">default</span>        :语句n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>关键字case和常量表达式之间一定要有空格</li><li>通常在case之后的语句最后加上break语句，每当执行到break语句时，立即跳出switch语句体</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」顺序结构</title>
      <link href="/1c4fbf64698f.html"/>
      <url>/1c4fbf64698f.html</url>
      
        <content type="html"><![CDATA[<h2 id="赋值语句">赋值语句</h2><ol><li>赋值语句（表达式语句）：在赋值表达式的尾部加上“;”</li></ol><h2 id="数据输出">数据输出</h2><h3 id="printf函数的一般调用形式">printf函数的一般调用形式</h3><ol><li>调用形式：<code>printf(格式控制，输出项1，输出项2，···)</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><h3 id="printf函数中常用的格式说明">printf函数中常用的格式说明</h3><blockquote><p>每个格式说明都必须用“%”开头，以一个格式字符作为结束，在此之间可以根据需要插入“宽度说明”、左对齐符号“-”、前导零符号“0”</p></blockquote><ol><li>格式字符</li></ol><table><thead><tr><th style="text-align:left">格式字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">c</td><td style="text-align:left">输出一个字符</td></tr><tr><td style="text-align:left">d或i</td><td style="text-align:left">输出带符号的十进制整型数。%ld为长整型，%hd为短整型，%I64d为64位长整数</td></tr><tr><td style="text-align:left">o</td><td style="text-align:left">以八进制格式输出整型数。%#o加先导0</td></tr><tr><td style="text-align:left">x或X</td><td style="text-align:left">以十六进制格式输出整型数。%#x或%#X输出带先导0x或0X的十六进制数</td></tr><tr><td style="text-align:left">u</td><td style="text-align:left">以无符号十进制形式输出整型数</td></tr><tr><td style="text-align:left">f</td><td style="text-align:left">以带小数点的数学形式输出浮点数（单精度和双精度数）</td></tr><tr><td style="text-align:left">e或E</td><td style="text-align:left">以指数形式输出浮点是（单精度和双精度数）</td></tr><tr><td style="text-align:left">g或G</td><td style="text-align:left">有系统决定采用%f还是采用%e（或%E）格式输出，以使输出宽度最小</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">输出一个字符串，直到遇到“\0”</td></tr><tr><td style="text-align:left">p</td><td style="text-align:left">输出变量的内存地址</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">输出一个%</td></tr></tbody></table><ol start="2"><li>输出数据所占宽度说明<ol><li>在%和格式字符之间插入一个整数常量来指定输出的宽度。如果指定的宽度超过输出数据的实际宽度，输出时将会右对齐，左边补上空格</li><li>对于float和double类型的实数，可以用“n1.n2”的形式来指定输出宽度（n1和n2分别代表一个整常数），其中n1指定输出数据的宽度（包括小数点），n2指定小数点后小数位的位数，n2也称精度<ol><li>对于f、e或E，当输出数据的小数位数多于n2位时，截去右边多余小数，并对截去部分的第一位小数做四舍五入处理；当输出数据的小数位少于n2时，在小数最右边补0</li><li>也可用“.n2”格式，不指定总宽度；如果指定“n1.0”或“.0”格式，则不输出小数点和小数部分</li><li>对于g或G，宽度用来指定输出的有效数字位数。默认6位有效数字</li></ol></li></ol></li></ol><table><thead><tr><th style="text-align:left">宽度说明</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">%2d</td><td style="text-align:left">输出数据占两位宽度，不足两位右对齐，左边补空格</td></tr><tr><td style="text-align:left">%10.2f</td><td style="text-align:left">输出浮点数总宽度为10，小数点后保留两位</td></tr></tbody></table><ol start="3"><li>输出数据左对齐：在“%”和宽度之间加“-”</li><li>使输出数据总带+/-：在“%”和格式字符间加“+”</li></ol><h3 id="使用printf函数时的注意事项">使用printf函数时的注意事项</h3><ol><li>调用函数printf时，其参数是从右至左进行处理的</li><li>输出数据的域宽可以改变</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*d&quot;</span>,m,i);    <span class="comment">/*将按照m指定的域宽输出i值，并不输出m的值*/</span></span><br></pre></td></tr></table></figure><h2 id="数据输入">数据输入</h2><h3 id="scanf函数的一般调用形式">scanf函数的一般调用形式</h3><ol><li>调用形式：<code>scanf(格式控制，输入项1，输入项二，···)</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%f%lf&quot;</span>,&amp;k,&amp;a,&amp;y);</span><br></pre></td></tr></table></figure><h3 id="scanf函数中常用的格式说明">scanf函数中常用的格式说明</h3><table><thead><tr><th style="text-align:left">格式字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">c</td><td style="text-align:left">输入一个字符</td></tr><tr><td style="text-align:left">d</td><td style="text-align:left">输入带符号的十进制整型数</td></tr><tr><td style="text-align:left">i</td><td style="text-align:left">输入整型数，整型数可以是带先导0的八进制数，也可以是带先导0x（或0X）的十六进制数</td></tr><tr><td style="text-align:left">o</td><td style="text-align:left">以八进制格式输入整型数，可以带先导0，也可以不带</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">以十六进制格式输入整型数，可以带先导0x或0X，也可以不带</td></tr><tr><td style="text-align:left">u</td><td style="text-align:left">以无符号十进制形式输入整型数</td></tr><tr><td style="text-align:left">f（lf）</td><td style="text-align:left">以带小数点的数学形式或指数形式输入浮点数（单精度数用f，双精度数用lf）</td></tr><tr><td style="text-align:left">e（le）</td><td style="text-align:left">同上</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">输入一个字符串，直到遇到“\0”</td></tr></tbody></table><ol><li>scanf函数右返回值，其值就是本次scanf调用正确输入的数据项个数</li></ol><h3 id="通过scanf函数从键盘输入数据">通过scanf函数从键盘输入数据</h3><ol><li>输入数值数据：在输入整数或实数这类数值型数据后，输入的数据之间必须用空格、回车符、制表符等间隔符隔开</li><li>跳过某个输入数据：在%和字符之间加入“*”</li></ol><h2 id="复合语句和空语句">复合语句和空语句</h2><p><strong>复合语句</strong></p><ol><li>语句形式：<code>&#123;语句1 语句2 语句3 ··· 语句n&#125;</code></li></ol><p><strong>空语句</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">;    <span class="comment">/*空语句*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入整数x和y的值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d,y=%d\n&quot;</span>, x, y);</span><br><span class="line">t = x;</span><br><span class="line">x = y;</span><br><span class="line">y = t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d,y=%d&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 输入一个double类型的数，使该数保留小数点后两位，对第三位小数进行四舍五入处理，然后输出此数  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%f\n&quot;</span>, x);</span><br><span class="line">x = x * <span class="number">100</span>;</span><br><span class="line">x = x + <span class="number">0.5</span>;</span><br><span class="line">x = (<span class="type">int</span>) x;</span><br><span class="line">x = x / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%f&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」C程序设计的初步认识</title>
      <link href="/f2437dccc17c.html"/>
      <url>/f2437dccc17c.html</url>
      
        <content type="html"><![CDATA[<h2 id="简单C语言程序的构成和格式">简单C语言程序的构成和格式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*求矩形面积*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> a, b, area;</span><br><span class="line">a = <span class="number">1.2</span>; <span class="comment">/*将矩形的两条边长分别赋给a和b*/</span></span><br><span class="line">b = <span class="number">3.6</span>;</span><br><span class="line">area = a * b; <span class="comment">/*计算矩形的面积并储存到变量area中*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%f,b=%f,area=%f\n&quot;</span>, a, b, area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>C语言规定必须用main作为主函数名,每一个可执行的C程序都必须有且只有一个主函数</li><li>C程序中的每一条执行语句都必须用分号结束</li><li>注释内容必须放在符号“/*”和“*/”之间，在注释之间不可以再嵌套“/*”和“*/”</li></ol><h2 id="标识符、常量和变量">标识符、常量和变量</h2><p><strong>标识符</strong></p><ol><li>由字母、数字和下划线组成，并且第一个字符必须为字母或下划线</li><li>类别<ol><li>关键字</li><li>预定义标识符</li><li>用户标识符</li></ol></li></ol><p><strong>常量</strong></p><ol><li>程序运行中，其值不能被改变的量</li><li>分类<ol><li>整型常量：只用数字表示，不带小数点<ol><li>短整型常量</li><li>长整型常量</li></ol></li><li>实型常量：必须带小数点的数</li><li>字符常量</li><li>字符串常量</li></ol></li></ol><p><strong>符号常量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*计算圆面积*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159 <span class="comment">/*定义符号名PI为3.14159*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> r, s;</span><br><span class="line">r = <span class="number">5.0</span>;</span><br><span class="line">s = PI * r * r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s=%f\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量</strong></p><ol><li>变量指程序运行过程中其值可以改变的量</li></ol><h2 id="整型数据">整型数据</h2><h3 id="整型常量">整型常量</h3><ol><li>整型常量可以用十进制、八进制和十六进制等形式表示</li><li>八进制数：开头必须是数字“0”</li><li>十六进制数：使用“0x”或“0X”开头；十六进制数中的字母a、b、c、d、e、f既可以小写也可以大写</li><li>在C程序中，只有十进制数可以是负数，而八进制和十六进制数只能是正数</li></ol><h3 id="整型变量">整型变量</h3><ol><li>基本型的整型变量用类型名关键字int进行定义</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>, k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="整型数据的分类">整型数据的分类</h3><ol><li>短整型（short int）</li><li>基本整型（int）</li><li>长整型（long int）</li><li>无符号型（unsigned）：无符号整数在数的末尾加上字母后缀u或U；若是长整型无符号整型常量，加上后缀lu或LU</li></ol><blockquote><p>若不指定变量为无符号型，则变量隐含为有符号型（signed）</p></blockquote><h3 id="整数在内存中的储存形式">整数在内存中的储存形式</h3><ol><li>通常把一个字节的最右边一位称为最低位，最左边一位称为最高位。对于一个有符号整数，其中最高位用来存放整数的符号，称为符号位。若是正整数，最高位放置0；若是负整数，最高位放置1</li><li>负整数在内存中以“补码”形式存放</li></ol><p><strong>例</strong>：取二进制数10000101（十进制数-5）的补码<br>步骤如下：求原码的反码。把原码除符号位之外的二进制码按位取反，得11111010<br>把所得的反码加1，得到原码的补码。得11111011</p><blockquote><p>把内存中以补码形式存放的二进制码转化成十进制的负整数</p><ul><li>先对除符号位之外的各位取反</li><li>将所得二进制数转换成十进制数</li><li>对所求得的数再减1</li></ul></blockquote><h2 id="实型数据">实型数据</h2><h3 id="实型常量">实型常量</h3><ol><li>小数形式：必须要有小数点</li></ol><h3 id="实型变量">实型变量</h3><ol><li>单精度型（float）<ol><li>定义：<code>float a,b,c;</code></li><li>占4字节的存储单元</li></ol></li><li>双精度型（double）<ol><li>定义：<code>double x,y,z;</code></li><li>占8字节的存储单元</li></ol></li></ol><h2 id="算数表达式">算数表达式</h2><h3 id="基本的算数运算符">基本的算数运算符</h3><ol><li>加（+）</li><li>减（-）</li><li>乘（*）</li><li>除（/）</li><li>求余（%）：运算对象只能是整型</li></ol><blockquote><ul><li>这些运算符需要两个运算对象，称为双目运算符</li><li>“+”和“-”也可用作单目运算符，运算符必须出现在运算数的左边</li><li>如果双面运算符两边运算数的类型一致，则所得结果的类型与运算数的类型一致</li><li>如果双目运算符两边运算数的类型不一致，系统将自动进行类型转换，使运算符两边的类型达到一致后再进行运算</li><li>在C语言中，所有实型数的运算均以双精度方式进行</li></ul></blockquote><h3 id="运算符的优先级、结合性和算数表达式">运算符的优先级、结合性和算数表达式</h3><ol><li><p>算数运算符的优先级<img src="pic/2023111101.png" alt=""></p></li><li><p>算数运算符和圆括号的结合性</p><ol><li>以上运算符中，只有单目运算符“+”和“-”的结合性是从右到左的，其余运算符的结合性都是从左到右</li></ol></li><li><p>算数表达式</p><ol><li>定义：用算术运算符和一对圆括号将运算符（或称操作数）连接起来的、符合C语言语法的表达式</li><li>运算对象可以是常量、变量和函数等</li></ol></li></ol><h3 id="强制类型转换表达式">强制类型转换表达式</h3><ol><li>格式：<code>(类型名)(表达式)</code><ol><li><code>(类型名)</code> 称为强制类型转换运算符</li></ol></li></ol><h2 id="赋值表达式">赋值表达式</h2><h3 id="赋值运算符和赋值表达式">赋值运算符和赋值表达式</h3><ol><li>格式：<code>变量名=表达式</code></li><li>赋值运算符的左侧只能是变量，不能是常量或表达式</li><li>C语言规定最左边变量中所得到的新值就是赋值表达式的值</li></ol><h3 id="复合赋值表达式">复合赋值表达式</h3><ol><li>定义：在赋值运算符之前加上其他运算符</li></ol><h3 id="赋值运算中的类型转换">赋值运算中的类型转换</h3><ol><li>如果赋值运算符两侧的数据类型不一致，在赋值前系统将自动先把右侧表达式求得的数值按赋值号左边变量的类型进行转换</li><li>在C语言的表达式（不包括赋值表达式）中的转换规则<ol><li>一个短整型，一个长整型：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>短整型</mtext><mo>→</mo><mtext>长整型</mtext></mrow><annotation encoding="application/x-tex">短整型 \to 长整型</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">短整型</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">长整型</span></span></span></span></li><li>一个是有符号整型，一个是无符号整型：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>有符号整型</mtext><mo>→</mo><mtext>无符号整型</mtext></mrow><annotation encoding="application/x-tex">有符号整型 \to 无符号整型</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">有符号整型</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">无符号整型</span></span></span></span></li></ol></li></ol><h2 id="自加、自减运算符和逗号">自加、自减运算符和逗号</h2><h3 id="自加运算符和自减运算符">自加运算符和自减运算符</h3><ol><li>“++”和“–”都是单目运算符，不能给常量或表达式赋值</li><li>既可以前缀形式出现，也可以后缀形式出现</li><li>对于变量来说自增或自减1；对于表达式来说，前置先自增后使用变量值，后置先使用变量值再自增</li><li>结合方向：从右至左</li></ol><h3 id="逗号运算符">逗号运算符</h3><ol><li>结合方向：从左至右</li><li>逗号运算符优先级最低</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「第一行代码」第一行Android 代码</title>
      <link href="/4d4ebbc0eb20.html"/>
      <url>/4d4ebbc0eb20.html</url>
      
        <content type="html"><![CDATA[<h2 id="Android简介">Android简介</h2><h3 id="Android系统架构">Android系统架构</h3><ol><li>Linux内核层</li><li>系统运行库层</li><li>应用框架层</li><li>应用层</li></ol><h3 id="Android应用开发特色">Android应用开发特色</h3><ol><li>四大组件<ol><li>Activity：界面</li><li>Service：在后台运行</li><li>BroadcastReceiver：允许你的应用接收或发送来自广播消息</li><li>ContentP rovider：为应用程序之间共享数据提供了可能</li></ol></li><li>系统控件</li><li>SQLite数据库</li><li>多媒体</li></ol><h2 id="创建Android项目">创建Android项目</h2><ol><li>res目录<ol><li>以“drawable”开头的目录存放图片</li><li>以“mipmap”开头的目录放应用图标</li><li>以“values”开头的目录放字符串、样式、颜色等配置</li><li>以“layout”开头的目录放布局文件</li></ol></li><li>资源引用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R.string.app_name <span class="comment">// 代码中</span></span><br><span class="line"><span class="meta">@string</span>/app_name <span class="comment">// xml中</span></span><br></pre></td></tr></table></figure><h2 id="使用Android的日志工具Log">使用Android的日志工具Log</h2><ol><li>Log.v()：用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose，是 Android 日志里面级别最低的一种</li><li>Log.d()：用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的。对应级别debug，比verbose 高一级</li><li>Log.i()：用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为的数据。对应级别info，比debug 高一级</li><li>Log.w()：用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方。对应级别warn，比info高一级</li><li>Log.e()：用于打印程序中的错误信息，比如程序进入了catch语句中。当有错误信息打印出来的时候，一般代表你的程序出现严重问题了，必须尽快修复。对应级别error，比 warn 高一级</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」程序设计的基本概念</title>
      <link href="/be54a660ba8e.html"/>
      <url>/be54a660ba8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="算法的特性">算法的特性</h2><ol><li>有穷性：算法必须在执行有限的步骤后终止，不会无限循环或进入死循环</li><li>确定性：算法的每个步骤必须明确定义，没有歧义。相同输入应产生相同的输出</li><li>可执行性：算法中的每个步骤都必须能够被执行，不会包含无法实现的操作</li><li>有零个或多个输入：算法可以接受零个或多个输入参数，这些参数是问题的输入数据</li><li>有一个或多个输出：算法产生一个或多个输出结果，这是问题的解决方案</li></ol><h2 id="三种基本结构">三种基本结构</h2><blockquote><p>三种基本结构组成的算法可以解决任何复杂的问题</p></blockquote><ol><li>顺序结构：程序中的语句按顺序执行，从上到下，每个语句都执行一次</li><li>选择结构：选择结构允许根据条件的真假来执行不同的代码块。这包括<code>if</code>语句和<code>switch</code>语句等。例如，使用<code>if</code>语句可以根据条件执行不同的代码块，从而实现分支逻辑 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">   <span class="comment">// 代码块1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 代码块2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>循环结构：循环结构允许多次执行相同的代码块，直到满足特定条件为止。这可以通过<code>for</code>、<code>while</code>和<code>do-while</code>等循环语句来实现 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">   <span class="comment">// 循环执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">// 循环执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo相关说明</title>
      <link href="/f2dda33b4059.html"/>
      <url>/f2dda33b4059.html</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>! 这是你的第一篇文章。有关详细信息，请查看<a href="https://hexo.io/docs/">文档</a>. 如果你在使用 Hexo 时遇到任何问题，可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案， 也可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速开始">快速开始</h2><h3 id="创建新文章">创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器">运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件">生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点">部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="其他">其他</h2><ol><li>使用PowerShell时，一键生成并发布</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean ; hexo g ; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Alist</title>
      <link href="/4f6306fe4bfe.html"/>
      <url>/4f6306fe4bfe.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s install</span><br></pre></td></tr></table></figure><blockquote><p>默认安装在 <code>/opt/alist</code> 中</p></blockquote><h2 id="更新">更新</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s update</span><br></pre></td></tr></table></figure><h2 id="卸载">卸载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s uninstall</span><br></pre></td></tr></table></figure><h2 id="密码">密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x ./alist</span><br><span class="line"><span class="comment"># 随机生成一个密码</span></span><br><span class="line">./alist admin random</span><br><span class="line"><span class="comment"># 手动设置一个密码,`NEW_PASSWORD`是指你需要设置的密码</span></span><br><span class="line">./alist admin <span class="built_in">set</span> NEW_PASSWORD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 WordPress搭建一个个人博客</title>
      <link href="/b0223cbefc39.html"/>
      <url>/b0223cbefc39.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装LNMP">安装LNMP</h2><ol><li>下载LNMP<br><code>wget http://soft.vpser.net/lnmp/lnmp2.0.tar.gz -cO lnmp2.0.tar.gz</code></li><li>解压并执行<br><code>tar zxf lnmp2.0.tar.gz &amp;&amp; cd lnmp1.5 &amp;&amp; ./install.sh lnmp</code></li><li>之后选择想要安装的版本然后回车开始安装</li><li>时间比较长，耐心等待一下，看到以下显示表示安装成功<img src="pic/2023100201.png" alt="img"></li><li>配置nigix<ol><li>查看nginx配置文件,在目录 <code>/usr/local/nginx/conf</code> 下，<code>root  /home/wwwroot/default;</code> 表明网站根目录为<code>/home/wwwroot/default</code>，可访问<code>http://ip</code>查看<img src="pic/2023100202.png" alt="img"></li><li>如果你绑定了域名，可以为网站配置 Cloudflare 免费证书和 SSL<ol><li>在 Cloudflare 的控制面板中，确保 SSL 选项设置为 “Full” 或 “Full (strict)”，生成一个私钥（通常是 .key 格式）和一个证书文件（通常是 .pem 格式）放置到服务器中</li><li>在 “server” 块内部，添加以下 SSL 配置</li></ol> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 SSL</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl_certificate</span> /path/to/your_cloudflare_cert.pem;  <span class="comment"># 指向 Cloudflare 证书文件</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /path/to/your_cloudflare_private.key;  <span class="comment"># 指向Cloudflare 私钥文件</span></span><br></pre></td></tr></table></figure><ol start="3"><li>验证nginx是否有配置错误 <code>nginx -t</code></li><li>重新加载nginx <code>nginx -s reload</code></li></ol></li></ol></li></ol><h2 id="安装WordPress">安装WordPress</h2><ol><li><p>安装 wordpress 安装包并解压到 <code>/home/wwwroot</code><br><code>wget https://cn.wordpress.org/latest-zh_CN.zip &amp;&amp; unzip latest-zh_CN.zip -d /home/wwwroot</code></p></li><li><p>登录MySQL，创建wordpress表，创建完后输入exit退出</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">create database wordpress;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol><li>如果使用远程连接，还需配置防火墙<code>ufw allow 3306</code></li><li>创建允许远程访问用户<code>CREATE USER 'remote_user'@'%' IDENTIFIED BY 'securepassword';</code></li><li>刷新 <code>FLUSH PRIVILEGES;</code></li></ol></li><li><p>使用 vim 修改 nginx 配置文件,将网站根目录为<code>/home/wwwroot/wordpress</code><br><code>vim /usr/local/nginx/conf/nginx.conf</code></p></li><li><p>保存文件</p></li><li><p>修改wordpress目录权限<br><code>cd /home/wwwroot &amp;&amp; chown -R www wordpress/ &amp;&amp; chgrp -R www wordpress/</code></p></li><li><p>访问<a href="http://ip/wp-admin/setup-config.php%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85">http://ip/wp-admin/setup-config.php开始安装</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
