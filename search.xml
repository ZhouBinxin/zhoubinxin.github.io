<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>「C语言程序设计」其他</title>
      <link href="/681ae77c920d.html"/>
      <url>/681ae77c920d.html</url>
      
        <content type="html"><![CDATA[<h2 id="memset函数"><code>memset</code>函数</h2><p><code>memset</code> 函数是C语言标准库中的一个函数，它用于将一段内存区域的每个字节设置为指定的值。其主要作用是初始化内存，将一块内存区域的内容设置为相同的值。</p><p><code>memset</code> 函数的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">memset</span><span class="params">(<span class="type">void</span> *s, <span class="type">int</span> c, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li><code>s</code>：指向要设置的内存区域的指针。</li><li><code>c</code>：要设置的值，通常是一个整数。<code>c</code> 被转换为无符号字符，然后复制到内存中。</li><li><code>n</code>：要设置的字节数，即要初始化的内存区域的大小。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」文件</title>
      <link href="/14dcc4940e41.html"/>
      <url>/14dcc4940e41.html</url>
      
        <content type="html"><![CDATA[<h2 id="C语言文件的概念">C语言文件的概念</h2><ol><li>顺序存取<ol><li>进行读或写操作时，总是从文件的开头开始，从头到尾顺序地读或写</li></ol></li><li>直接存取（随机存取）<ol><li>通过调用C语言的函数库去指定开始读或写的字节号，然后直接对此位置上的数据进行读，或把数据写到此位置上</li></ol></li></ol><h2 id="文件指针">文件指针</h2><ol><li>一般形式：<code>FILE *指针变量名</code></li></ol><h2 id="打开文件">打开文件</h2><ol><li>fopen函数的一般调用形式：<code>fopen(文件名，文件使用方式);</code><ol><li>若调用成功，函数返回一个FILE类型的指针，赋给文件指针变量fp，从而把指针fp与文件file_a联系起来</li><li>若打开文件失败，返回NULL</li></ol></li><li>文件使用方式<ol><li>“r”：为读打开文本文件，对打开文件只能进行“读”操作</li><li>“rb”：为读打开二进制文件，其余功能与“r”相同</li><li>“w”：为写打开文本文件。如果指定文件不存在，系统将用在fopen调用中指定的文件名建立一个新文件；如果指定文件存在，则从文件的起始位置开始写，文件中原有的内容将全部消失</li><li>“wb”：为写打开一个二进制文件。可以在指定文件位置进行写操作，其余功能与“w”相似</li><li>“a”：为在文件后面添加数据而打开文本文件。如果指定文件不存在，系统将用在fopen调用中指定的文件名建立一个新文件；如果指定文件存在，则文件中原有的内容将保存，新的数据写在原有内容之后</li><li>“ab”：为在文件后面添加数据而打开二进制文件。其余功能与“a”相同</li><li>“r+”：为读和写打开文本文件。指定文件应当已经存在，读和写总是从文件的起始位置开始；在写新数据时，只覆盖新数据所占的空间，其后的老数据并不丢失</li><li>“rb+”：为读和写打开二进制文件。功能与“r+”相同，只是在读和写时，可以由位置函数设置读和写的起始位置</li><li>“w+”：首先建立一个新文件，进行写操作，随后可以从头开始读。如果指定文件已存在，则原有的内容将全部消失</li><li>“wb+”：功能与“w+”相同，只是在随后的读和写时，可以由位置函数设置读和写的起始位置</li><li>“a+”：功能与“a”相同，只是在文件尾部添加新的数据后，可以从头开始读</li><li>“ab+”：功能与“a+”相同，只是在文件尾部添加新的数据后，可以由位置函数设置开始读的起始位置</li></ol></li></ol><h2 id="关闭文件">关闭文件</h2><ol><li>fclose函数的调用形式：<code>fclose(文件指针);</code></li><li>当成功执行了关闭操作后，函数返回0，否则返回非0</li></ol><h2 id="调用getc-fgetc-和putc-fputc-函数进行输入和输出">调用getc(fgetc)和putc(fputc)函数进行输入和输出</h2><h3 id="一、调用putc（或fputc）函数输出一个字符">一、调用putc（或fputc）函数输出一个字符</h3><ol><li>putc函数调用形式：<code>putc(ch,fp);</code><ol><li>ch是待输出的某个字符，它可以是一个字符常量，也允许是一个字符变量</li><li>fp是文件指针</li><li>将字符ch写到文件指针fp文件所指的文件中去</li><li>如果输出成功，putc函数返回所输出的字符；如果输出失败，则返回一个EOF值。EOF是在stdio.h库函数文件中定义的符号常量，其值等于-1</li></ol></li><li>fputc函数的调用形式和功能与putc函数完全相同</li></ol><h3 id="二、调用getc（或fgetc）函数输出一个字符">二、调用getc（或fgetc）函数输出一个字符</h3><ol><li>getc函数的调用形式：<code>ch=getc(pf);</code><ol><li>pf指文件指针</li><li>从pf指定的文件中读入一个字符，并把它作为函数值返回</li></ol></li><li>fgetc函数的调用形式和功能与getc函数完全相同</li></ol><h2 id="判断文件结束函数feof">判断文件结束函数feof</h2><ol><li>如果遇到文件结束，函数feof(fp)的值为1，否则为0</li></ol><h2 id="fscanf函数和fprintf函数">fscanf函数和fprintf函数</h2><ol><li>fsacnf函数：<code>fscanf(文件指针，格式控制字符串，输入项表);</code><ol><li>fscanf函数只能从文本文件中按格式输入</li></ol></li><li>fprintf函数：<code>fprint(文件指针，格式控制字符串，输入项表);</code><ol><li>fprintf函数按格式将内存中的数据转换成对应的字符，并以ASCII代码形式输出到文本文件中</li></ol></li></ol><h2 id="fgets函数和fputs函数">fgets函数和fputs函数</h2><ol><li>fgets函数：<code>fgets(str,n,fp);</code><ol><li>fp是文件指针，str是存放字符串的起始地址，n是一个int型变量</li><li>从fp所指文件中读入n-1个字符放入以str为起始地址的空间内。如果在未读满n-1个字符时，已读到一个换行符或一个EOF（文件结束标志），则结束本次读操作，读入字符串的最后包含读到的换行符</li><li>读入结束后，系统将自动在最后加 <code>\0</code> ，并以str作为函数值返回</li></ol></li><li>fputs函数：<code>fputs(str,fp);</code><ol><li>fp是文件指针；str是待输出的字符串，可以是字符串常量，指向字符串的指针或存放字符串的字符数组名等</li><li>最后的 <code>\0</code> 并不输出，也不自动加 <code>\n</code></li><li>输出成功函数值为正整数，否则为-1（EOF）</li><li>调用函数输出字符时，文件中各字符串将首尾相连，它们之间将不存在任何间隔符</li></ol></li></ol><h2 id="fread函数和fwrite函数">fread函数和fwrite函数</h2><ol><li>fread函数：<code>fread(buffer,size,count,fp);</code><ol><li>buffer是数据块的指针，内存块的首地址，输入的数据存入此内存块中</li></ol></li><li>fwrite函数：<code>fwrite(buffer,size,count,fp);</code><ol><li>buffer是数据块的指针，准备输出的内存块的起始地址</li></ol></li><li>size表示每个数据块的字节数</li><li>count用来指定每读、写一次，输入或输出数据块的个数（每个数据块具有size字节）</li></ol><h2 id="文件定位函数">文件定位函数</h2><h3 id="fseek函数">fseek函数</h3><ol><li>调用形式：<code>fseek(fp,offset,origin);</code><ol><li>pf是文件指针</li><li>offset是以字节为单位的位移量，为长整型</li><li>origin是起始点，用以指定位移量是以哪个位置为基准，起始点既可以用标识符来表示，也可以用数字来表示</li></ol></li></ol><table><thead><tr><th style="text-align:left">标识符</th><th style="text-align:left">数字</th><th style="text-align:left">代表的起始点</th></tr></thead><tbody><tr><td style="text-align:left">SEEK_SET</td><td style="text-align:left">0</td><td style="text-align:left">文件开始</td></tr><tr><td style="text-align:left">SEEK_END</td><td style="text-align:left">2</td><td style="text-align:left">文件末尾</td></tr><tr><td style="text-align:left">SEEK_CUR</td><td style="text-align:left">1</td><td style="text-align:left">文件的当前位置</td></tr></tbody></table><ol start="2"><li>对于二进制文件，当位移量为正整数时，表示位置指针从指定的起始点向文件尾部方向移动；当位移量为负整数时，表示位置指针从指定的起始点向文件首部方向移动</li><li>对于文本文件，位移量必须是0</li></ol><h3 id="ftell函数">ftell函数</h3><ol><li>ftell函数用以获得文件当前位置指针的位置，函数给出当前位置指针相对于文件开头的字节数</li><li>调用形式：<code>long t = ftell(fp);</code><ol><li>当函数调用出错时，函数返回-1L</li></ol></li></ol><h3 id="rewind函数">rewind函数</h3><ol><li>调用形式：<code>rewind(pf);</code></li><li>函数没有返回值，函数的功能是使文件的位置指针回到文件的开头</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」位运算</title>
      <link href="/1352fcc57e40.html"/>
      <url>/1352fcc57e40.html</url>
      
        <content type="html"><![CDATA[<h2 id="位运算符">位运算符</h2><ol><li>只有 <code>~</code> 为单目运算符，其余均为双目运算符</li></ol><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">含义</th><th style="text-align:left">优先级</th></tr></thead><tbody><tr><td style="text-align:left"><code>~</code></td><td style="text-align:left">按位求反</td><td style="text-align:left">1（高）</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:left">按位与</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或</td><td style="text-align:left">5（低）</td></tr></tbody></table><h2 id="位运算符的运算功能">位运算符的运算功能</h2><h3 id="“按位取反”运算">“按位取反”运算</h3><ol><li>把运算对象的内容按位取反</li></ol><blockquote><p><code>~0115</code> 将八进制数115按位取反<br><code>~ 0 1 0 0 1 1 0 1</code> 把运算对象用二进制来表示<br>————————<br>1 0 1 1 0 0 1 0</p></blockquote><h3 id="“左移”运算">“左移”运算</h3><ol><li>运算符左边是移位运算符，右边是整型表达式，代表移位位数</li><li>左移时，右端（低位）补0；左端（高位）移出的部分舍弃</li></ol><blockquote><p>char a=6,b;<br>b=a&lt;&lt;2;<br>用二进制来表示运算过程如下：<br>a:0 0 0 0 0 1 1 0<br>b=a&lt;&lt;2:0 0 0 1 1 0 0 0</p></blockquote><h3 id="“右移”运算">“右移”运算</h3><ol><li>右移时，右端（低位）移出的二进制数舍弃，左端（高位）移入的二进制数分两种情况：对于无符号整数和正整数，高位补0；对于负整数，高位补1</li></ol><h3 id="“按位与”运算">“按位与”运算</h3><ol><li>把参与运算的两个运算数按对应的二进制位分别进行“与”运算，当两个相应的位数都为1时，该位的结果为1；否则为0</li></ol><h3 id="“按位异或”运算">“按位异或”运算</h3><ol><li>参与运算的两个运算数中相对应的二进制位上，若数相同，则该位的结果为0；若数不同，则该位的结果为1</li></ol><h3 id="“按位或”运算">“按位或”运算</h3><ol><li>参与运算的两个运算数中，只要两个相应的二进制位中有一个为1，该位的运算结果即为1；只有当两个相应位的数都为0时，该位的运算结果才为0</li></ol><h3 id="位数不同的运算数之间的运算规则">位数不同的运算数之间的运算规则</h3><ol><li>位运算的对象可以是整型（long int或int或short）和字符型（char）数据</li><li>当两个运算数类型不同时位数也会不同，系统将进行以下处理<ol><li>先将两个运算数右端对齐</li><li>再将位数短的一个运算数往高位扩充，即无符号和正整数左侧用0补全，负数左侧用1补全，然后对位数相等的这两个运算数按位进行位运算</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」结构体、共用体和用户定义类型</title>
      <link href="/4a32bc901820.html"/>
      <url>/4a32bc901820.html</url>
      
        <content type="html"><![CDATA[<h2 id="用typedef说明一种新类型名">用typedef说明一种新类型名</h2><ol><li>一般形式：<code>typedef 类型名 标识符;</code></li><li>“类型名”必须是在此语句之前已有定义的类型标识符</li><li>“标识符”是一个用户定义标识符，用作新的类型名</li><li>typedef语句的作用仅仅是用“标识符”来代表已存在的“类型名”，并未产生新的数据类型，原有类型名依然有效</li></ol><h2 id="结构体类型">结构体类型</h2><h3 id="结构体类型的说明">结构体类型的说明</h3><ol><li>一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体标识名&#123;</span></span><br><span class="line">类型名<span class="number">1</span> 结构成员名表<span class="number">1</span>;</span><br><span class="line">类型名<span class="number">2</span> 结构成员名表<span class="number">2</span>;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">类型名n 结构成员名表n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>struct是关键字，是结构体类型的标志</li><li>“结构体标识名”和“结构成员名”都是用户定义的标识符，其中“结构体标识符”是可选项，在说明中可以不出现</li><li>每个“结构成员名表”中都可以含有多个同类型的成员名，它们之间以逗号分隔</li><li>结构体中的成员名可以和程序中的其他变量同名；不同结构体中的成员也可以同名</li><li>结构体类型说明中的“类型名1”~“类型名n”不仅可以是简单数据类型，也可以是构造类型、某种结构体类型</li><li>ANSI C标准规定结构体至少允许嵌套15层，并且允许内嵌结构体成员的名字与外层成员的名字相同</li></ol><h3 id="结构体类型的变量、数组和指针变量的定义">结构体类型的变量、数组和指针变量的定义</h3><ol><li>紧跟在结构体类型说明之后进行定义<ol><li>std只能存放1组数据；pers可以存放3组；pstd可以指向具有struct student类型的存储单元，但目前还没有具体的指向</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">birthday</span>;</span></span><br><span class="line"><span class="type">float</span> sc[<span class="number">4</span>];</span><br><span class="line">&#125; <span class="built_in">std</span>,pers[<span class="number">3</span>],*pstd;</span><br></pre></td></tr></table></figure><ol start="2"><li>在说明一个无名结构体类型的同时，直接进行定义</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">···</span><br><span class="line">&#125; <span class="built_in">std</span>,pers[<span class="number">3</span>],*pstd;</span><br></pre></td></tr></table></figure><ol start="3"><li>先说明结构体类型，再单独进行变量定义<ol><li>这种定义方法不能只使用struct而不写结构体标识符student</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">···</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">std</span>,<span class="title">pers</span>[3],*<span class="title">pstd</span>;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用typedef说明一个结构体类型名，再用新类型名来定义变量</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">birthday</span>;</span></span><br><span class="line"><span class="type">float</span> sc[<span class="number">4</span>];</span><br><span class="line">&#125; STREC;</span><br><span class="line">STREC <span class="built_in">std</span>,pers[<span class="number">4</span>],*pstd;</span><br></pre></td></tr></table></figure><h3 id="给结构体变量、数组赋初值">给结构体变量、数组赋初值</h3><ol><li>给结构体变量赋初值：所赋初值顺序放在一对花括号中<ol><li>不允许跳过前面的成员给后面的成员赋初值，可以只给前面的若干个成员赋初值，对于后面未赋初值的成员，系统将自动为数值型和字符型数据赋初值零</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">birthday</span>;</span></span><br><span class="line"><span class="type">float</span> sc[<span class="number">4</span>];</span><br><span class="line">&#125; <span class="built_in">std</span>=&#123;<span class="string">&quot;Li Ming&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1962</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">88</span>,<span class="number">76</span>,<span class="number">86.5</span>,<span class="number">90</span>&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>给结构体数组赋初值：通常将其成员的值依次放在一对花括号中</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookcard</span>&#123;</span></span><br><span class="line"><span class="type">char</span> num[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> money;</span><br><span class="line">&#125; bk[<span class="number">3</span>]=&#123;&#123;<span class="string">&quot;No.1&quot;</span>,<span class="number">35.5</span>&#125;,&#123;<span class="string">&quot;No.2&quot;</span>,<span class="number">25.0</span>&#125;,&#123;<span class="string">&quot;No.3&quot;</span>,<span class="number">66.7</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="引用结构体变量中的数据">引用结构体变量中的数据</h3><h4 id="对结构体变量成员的引用">对结构体变量成员的引用</h4><ol><li>引用形式<ol><li>结构体变量名.成员名</li><li>指针变量名-&gt;成员名</li><li>(*指针变量名).成员名</li></ol></li><li>“.”称为运算成员符；“-&gt;”称为结构指向运算符，之间没有空格</li><li>访问结构体变量中哥内嵌结构体成员时，必须逐层使用成员名定位</li></ol><h4 id="相同类型结构体变量之间的整体赋值">相同类型结构体变量之间的整体赋值</h4><ol><li>ANSI C标准允许相同类型的结构体变量之间进行整体赋值</li></ol><h3 id="函数之间结构体变量的数据传递">函数之间结构体变量的数据传递</h3><ol><li>向函数传递结构体变量中单个成员的数据</li><li>向函数传递整个结构体变量中的数据</li><li>传递结构体变量的地址</li><li>向函数传递结构体数组名</li><li>函数返回值是结构体类型</li><li>函数返回值可以是指向结构体变量的指针类型</li></ol><h3 id="利用结构体变量构成链表">利用结构体变量构成链表</h3><ol><li>结构体中含有可以指向本结构体的指针成员</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个简单的链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">NODETYPE</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    NODETYPE a, b, c, *h, *p;</span><br><span class="line">    a.data = <span class="number">10</span>;</span><br><span class="line">    b.data = <span class="number">20</span>;</span><br><span class="line">    c.data = <span class="number">30</span>;    <span class="comment">/*给变量中的data域赋值*/</span></span><br><span class="line">    h = &amp;a; <span class="comment">/*将结点相连*/</span></span><br><span class="line">    a.next = &amp;b;</span><br><span class="line">    b.next = &amp;c;</span><br><span class="line">    c.next = <span class="literal">NULL</span>;</span><br><span class="line">    p = h;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;   <span class="comment">/*移动p，使之依次指向a、b、c,输出它们data域中的值*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;    <span class="comment">/*p顺序后移*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>单向链表<ol><li>每个结点应该由两个成员组成：一个是整型的成员；一个是指向自身结构的指针类型成员</li></ol></li></ol><h2 id="共用体">共用体</h2><blockquote><p>结构体变量中的成员各自占有自己的存储空间，而共用体变量中的所有成员占有同一个存储空间</p></blockquote><h3 id="共用体类型的说明和变量定义">共用体类型的说明和变量定义</h3><ol><li>一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> 共用体标识名&#123;</span></span><br><span class="line">类型名<span class="number">1</span> 共用体成员名<span class="number">1</span>;</span><br><span class="line">类型名<span class="number">2</span> 共用体成员名<span class="number">2</span>;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">类型名n 共用体成员名n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>union是关键字，是共用体类型的标志</li><li>共用体标识名是可选项，在说明中可以不出现</li><li>共用体成员可以是简单变量，也可以是数组、指针、结构体和共用体（结构体成员也可以是共用体）</li><li>共用体变量的定义与结构体变量的定义类似</li></ol><blockquote><p>(1) 共用体变量在定义的同时只能用第一个成员的类型的值进行初始化<br>(2) 由于共用体变量中的所有成员共享存储空间，因此变量中的所有成员的首地址相同，而且变量的首地址也就是该成员变量的首地址</p></blockquote><h3 id="共用体变量的引用">共用体变量的引用</h3><ol><li>共用体变量中成员的引用<ol><li>一般形式</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">共用体变量名.成员名</span><br><span class="line">指针变量名-&gt;成员名</span><br><span class="line">(*指针变量名).成员名</span><br></pre></td></tr></table></figure><ol start="2"><li>共用体变量中起作用的是最近一次存入的成员变量的值，原有成员变量的值将被覆盖</li></ol></li><li>共用体变量的整体赋值<ol><li>ANSI C标准允许在两个类型相同的共用体变量之间进行赋值操作</li></ol></li><li>向函数传递共用体变量的值<ol><li>共用体类型的变量可以作为实参进行传递，也可以传送共用体变量的地址</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」编译预处理和动态存储分配</title>
      <link href="/01c591089b48.html"/>
      <url>/01c591089b48.html</url>
      
        <content type="html"><![CDATA[<h2 id="编译预处理">编译预处理</h2><blockquote><p>C语言中，凡是以“#”开头的行，都被称为“编译预处理”命令行</p></blockquote><h3 id="宏替换">宏替换</h3><ol><li>不带参数的宏定义<ol><li>命令行形式</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 替换文本</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名</span></span><br></pre></td></tr></table></figure><ol start="2"><li>替换文本可以包含已定义过的宏名</li><li>当宏定义在一行中写不下，只需要在最后一个字符后紧接着加一个反斜线“\”<ol><li>如果在“\”前或在下一行的开头留有许多空格，则在宏替换时也加入这些空格</li></ol></li><li>同一个宏名不能重复定义，除非两个宏定义命令行完全一致</li><li>替换文本不能替换双引号中与宏名相同的字符串</li><li>替换文本并不替换用户标识符中的成分</li><li>用作宏名的标识符通常用大写字母表示</li><li>宏定义的定义位置一般写在程序的开头</li></ol></li><li>带参数的宏定义<ol><li>命令行形式：<code>#define 宏名(形参表) 替换文本</code></li><li>同一个宏名不能重复定义，除非两个宏定义命令行完全一致</li><li>在调用带参数的宏名时，一对圆括号必不可少，圆括号中实参的个数应该与形参个数相同，若有多个参数，它们之间用逗号隔开</li><li>在“替换文本”中的形参和整个表达式应该用括号括起来</li><li>在宏替换中，对参数没有类型的要求</li><li>宏替换中，实参不能替换括在双引号中的形参</li></ol></li><li>终止宏定义<ol><li>可以用 <code>#undef</code> 提前终止宏定义的作用域</li></ol> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line">main()&#123;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件包含">文件包含</h3><ol><li>一般形式：<code>#include &lt;文件名&gt;</code> 或 <code>#include &quot;文件名&quot;</code></li></ol><h2 id="动态存储分配">动态存储分配</h2><h3 id="malloc函数和free函数">malloc函数和free函数</h3><h4 id="malloc函数">malloc函数</h4><ol><li>malloc函数返回值类型为void *，函数的调用形式为 <code>malloc(size)</code> ，要求size的类型为unsigned int</li><li>malloc函数用来分配size个字节的存储区，返回一个指向存储区首地址的基类型为void的地址。若没有足够的内存单元供分配，函数返回空(NULL)</li><li>在动态申请存储空间时，若不能确定数据类型所占字节数，可以使用sizeof运算符来求得 <code>pi=(int *)malloc(sizeof(int));</code></li></ol><h4 id="free函数">free函数</h4><ol><li>函数的调用形式：<code>free(p);</code></li><li>指针变量p必须指向有动态分配函数malloc或calloc分配的地址</li><li>free函数将指针p所指的存储空间释放</li><li>此函数没有返回值</li></ol><h3 id="calloc函数">calloc函数</h3><ol><li>函数的返回值类型为void *</li><li>调用形式：<code>calloc(n,size);</code> ，要求n和size的类型都为unsigned int</li><li>calloc函数用来给n个同一类型的数据项分配连续的存储空间，每个数据项的长度为size个字节。若分配成功，函数返回存储空间的首地址；否则返回空</li><li>通过调用calloc函数所分配的存储单元，系统自动置初值0</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」对函数的进一步讨论</title>
      <link href="/a8b3854293c7.html"/>
      <url>/a8b3854293c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="传给main函数的参数">传给main函数的参数</h2><ol><li>main函数通常可用两个参数<ol><li>第一个参数argc必须是整型</li><li>第二个参数argv是一个指向字符型的指针数组指针，每个指针都指向一个字符串</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main(<span class="type">int</span> argc, <span class="type">char</span> **argv)&#123;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过实参向函数传递函数名或指向函数的指针变量">通过实参向函数传递函数名或指向函数的指针变量</h2><ol><li>指向函数指针变量的定义：C语言中函数名代表该函数的入口地址，因此可以定义一种指向函数的指针来存放这种地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> *p)</span>&#123;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line"><span class="type">double</span> (*fp)(<span class="type">int</span>, <span class="type">int</span> *),y;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">fp = fun;</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">y = (*fp)(<span class="number">56</span>, &amp;n);    <span class="comment">/* 此处通过指向函数的指针调用fun函数 */</span></span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>函数名或指向函数的指针变量作为实参：函数名或指向函数的指针变量可以作为实参传送给函数</li></ol><h2 id="函数的递归调用">函数的递归调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用递归的方法求n!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d!=%d&quot;</span>, n, fac(n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> f;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        f = n * fac(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」用户标识符的作用域和存储类</title>
      <link href="/23a7ed07467c.html"/>
      <url>/23a7ed07467c.html</url>
      
        <content type="html"><![CDATA[<h2 id="局部变量">局部变量</h2><ol><li>局部变量（内部变量）：在函数内部或符合语句内部定义的变量<ol><li>函数的形参也属于局部变量</li></ol></li><li>全局变量（外部变量）：在函数外部定义的变量</li><li>C语言中，由两种存储类别：一种是自动类，一种是静态类。局部变量既可以说明成自动类，也可以说明成静态类；局部变量只能是静态类<ol><li>四个与两个存储类别相关的说明符：auto（自动）、register（寄存器）、static（静态）、extern（外部）。它们可以放在类型名的左边，也可以放在类型名的右边</li><li>动态存储区用来保存函数调用时的返回地址、自动类别的局部变量等。静态存储区用以存放局部变量及静态类别的局部变量</li></ol></li></ol><h2 id="局部变量及其作用域和生存期">局部变量及其作用域和生存期</h2><h3 id="auto变量">auto变量</h3><ol><li>当在函数内部或复合语句内定义变量时，如果没有指定存储类，或使用了auto说明符，系统就认为所定义的变量具有自动类别</li><li>auto变量的存储单元被分配在内存的动态存储区。每当进入函数体（或复合语句）时，系统自动为auto变量分配存储单元；退出时自动释放这些存储单元另作他用</li></ol><h3 id="register变量">register变量</h3><ol><li>寄存器变量也是自动类变量。它与auto变量的区别在于用register说明的变量建议编译程序将变量的值保留在CPU寄存器中，而不是像一般变量一样，占存储单元</li><li>CPU中寄存器的数目是有限的，因此只能说明少数的寄存器变量</li><li>register变量没有地址，不能进行求地址运算</li><li>register变量的说明应尽量靠近其使用的地方，用完之后尽快释放</li></ol><h3 id="静态存储类的局部变量">静态存储类的局部变量</h3><ol><li>当在函数体（或复合函数）内部使用static来说明一个变量时，称该变量为静态局部变量</li><li>在程序运行期间，静态局部变量在内存的静态存储区中占据着永久性的存储单元</li><li>静态局部变量的初值是在编译时赋予的，不是在程序执行期间赋予的。对未赋初值的静态局部变量，C编译程序自动给它赋初值0</li></ol><h2 id="全局变量及其作用域和生存期">全局变量及其作用域和生存期</h2><p>全局变量只有静态一种类别。对于全局变量可使用extern和static两种说明符</p><h3 id="全局变量的作用域和生存期">全局变量的作用域和生存期</h3><ol><li>全局变量是在函数外部任意位置上定义的变量，它的作用域是从变量定义的位置开始，到整个源文件结束</li><li>全局变量的生存期是整个程序的运行期间</li><li>若全局变量和某个函数中的局部变量同名，则在该函数中，此全局变量被屏蔽</li></ol><h3 id="在同一编译单位内使用extern说明扩展全局变量的作用域">在同一编译单位内使用extern说明扩展全局变量的作用域</h3><ol><li>当全局变量定义在后，引用它的函数在前时，应该在引用它的函数中用extern对此全局变量进行说明：该变量是一个已在外部定义了的全局变量，已经分配了存储单元，不需再为它另外开辟存储单元。</li></ol><h3 id="在不同编译单位内用extern说明符扩展全局变量的作用域">在不同编译单位内用extern说明符扩展全局变量的作用域</h3><ol><li>在其中一个文件中定义所有全局变量，而在其他用到这些全局变量的文件中用extern对这些变量进行说明</li></ol><h3 id="静态全局变量">静态全局变量</h3><ol><li>静态全局变量只限于本编译单位使用，不能被其他编译单位所引用</li></ol><h2 id="函数的存储分类">函数的存储分类</h2><h3 id="用extern说明函数">用extern说明函数</h3><ol><li>若在函数返回值的类型前加上说明符extern，称此函数为“外部”函数</li><li>extern说明可以省略，一般函数都隐含说明为extern</li><li>外部函数的特征为可以被其他编译单位中的函数调用</li></ol><h3 id="用static说明函数">用static说明函数</h3><ol><li>若在函数返回值的类型前加上说明符static，称此函数为“静态”函数</li><li>静态函数的特征是只限于本编译单位的其他函数调用它，而不允许其他编译单位中的函数对它进行调用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」字符串</title>
      <link href="/3930558c6af5.html"/>
      <url>/3930558c6af5.html</url>
      
        <content type="html"><![CDATA[<h2 id="用一维字符数组存放字符串">用一维字符数组存放字符串</h2><ol><li>C语言对字符串的约定<ol><li>字符串是借助与字符型一维数组来存放的，并规定以字符 <code>\0</code> 作为“字符串结束标志”</li><li><code>\0</code> 作为标志占用存储空间，但不计入串的实际长度</li></ol></li><li>C语言中表示字符串常量的约定<ol><li>字符串常量是由双引号括起来的一串字符，系统将自动在末尾添加字符 <code>\0</code></li></ol></li><li>C语言中字符串常量给出的是地址值</li><li>字符数组与字符串的区别<ol><li>仅可以在字符数组内存放字符串，不能通过赋值语句将字符串常量或其他字符数组中的字符串直接赋给字符串变量</li><li>字符串是字符数组的一种具体应用</li></ol></li></ol><h3 id="通过赋初值的方式给一维字符数组赋字符串">通过赋初值的方式给一维字符数组赋字符串</h3><ol><li>用给一般数组赋初值的相同方式给一维字符数组赋初值<ol><li>所赋初值的字符个数少于数组的元素个数时，系统都将自动在其后的元素中加入 <code>\0</code></li></ol></li><li>在赋初值时直接赋字符串常量</li></ol><h3 id="在C程序执行过程中给一维字符数组赋字符串">在C程序执行过程中给一维字符数组赋字符串</h3><ol><li>不可以用赋值语句给字符数组整体赋一串字符</li><li>给数组元素逐个赋字符值，最后人为加入串结束标志</li></ol><h2 id="使指针指向一个字符串">使指针指向一个字符串</h2><ol><li>通过赋初值的方式使指针指向一个字符串<ol><li>可以在定义字符指针变量的同时，将存放字符串的存储单元起始地址赋给指针变量</li></ol></li><li>通过赋值运算使指针指向一个字符串</li></ol><h2 id="字符串的输入和输出">字符串的输入和输出</h2><h3 id="输入和输出字符串时的必要条件">输入和输出字符串时的必要条件</h3><ol><li>对字符串进行输出时，输出项既可以是字符串常量或字符数组名，也可以是已指向字符串的字符指针变量</li><li>对字符串进行输入时，输入项可以是字符数组名，也可以是字符指针变量</li></ol><h3 id="用格式说明符-s-进行整串输入和输出">用格式说明符 <code>%s</code> 进行整串输入和输出</h3><ol><li>在scanf函数中使用可以实现字符串的整体输入<ol><li>空格和回车符都作为输入数据的分隔符而不能被读入</li><li>若输入字符串的长度超过字符数组所能容纳的字符个数时，系统不报错。相当于下标越界</li><li>当输入项是数组元素的地址时，输入的字符将从这一元素开始依次存放在该数组中</li><li>当输入项为字符指针变量时，该指针变量必须已指向确定的由足够空间的连续存储单元</li></ol></li><li>在printf函数中使用可以实现字符串的整体输出<ol><li>依次输出存储单元中的字符，直到遇到第一个 <code>\0</code> 为止</li><li><code>\0</code> 是结束标志，不在输出字符之列</li><li>输出结束后不自动换行</li></ol></li></ol><h3 id="调用gets、puts函数在终端输入或输出一行字符串">调用gets、puts函数在终端输入或输出一行字符串</h3><ol><li>gets函数：<code>gets(str_adr)</code><ol><li>gets函数从终端键盘读入字符串（包括空格符），直到读入一个换行符为止</li><li>换行符读入后，不作为字符串的内容，系统将自动用 <code>\0</code> 代替</li></ol></li><li>puts函数：<code>puts(str_adr)</code><ol><li>依次输出存储单元中的字符，遇到第一个 <code>\0</code> 即结束输出，并自动输出一个换行符</li></ol></li></ol><h2 id="用于字符串处理的函数">用于字符串处理的函数</h2><blockquote><p>使用以下函数时，需添加头文件<code>&lt;string.h&gt;</code></p></blockquote><ol><li>字符串赋值（拷贝）函数strcpy：<code>strcpy(s1,s2)</code><ol><li>把s2所指字符串（源）的内容复制到s1所指存储空间（目的）中，函数返回s1的值，即目的字符串的首地址</li><li>s1必须指向一个足够容纳s2串的存储空间</li></ol></li><li>字符串连接函数strcat：<code>stract(s1,s2)</code><ol><li>将s2所指字符串的内容连接到s1所指的字符串后，并自动覆盖s1串末尾的<code>\0</code>，函数返回s1所指的地址值</li><li>s1所指字符串应由足够的空间容纳两串合并后的内容</li></ol></li><li>求字符串长度函数strlen：<code>strlen(s)</code><ol><li>计算以s为起始地址的字符串长度，并作为函数值返回。不包括串尾的结束标志<code>\0</code></li></ol></li><li>字符串比较函数strcmp：<code>strcmp(s1,s2)</code><ol><li>依次对s1和s2中对应位置上的字符两两比较，字符大小依据是其ASCII码值</li></ol></li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写函数slenth(char *s)，函数返回指针s所指字符串的长度，即相当于库函数strlen的功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">slenth</span><span class="params">(<span class="type">char</span> *s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    length = slenth(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">slenth</span><span class="params">(<span class="type">char</span> *s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*(s + i) != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」数组</title>
      <link href="/29c505056f3a.html"/>
      <url>/29c505056f3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一维数组的定义和一维数组元素的引用">一维数组的定义和一维数组元素的引用</h2><h3 id="一维数组的定义">一维数组的定义</h3><ol><li>定义：数组中的每个元素只带一个下标</li><li>一般形式：<code>类型名 数组名[整型常量表达式],······</code></li><li>数组说明符和普通变量名可同时出现在一个类型定义语句中</li></ol><h3 id="一维数组的引用">一维数组的引用</h3><ol><li>引用形式：<code>数组名[下标表达式]</code></li></ol><h3 id="一维数组的初始化">一维数组的初始化</h3><ol><li>当所赋初值少于所定义数组的元素个数时，将自动给后面的元素补以初值0</li><li>对于字符型数组同样补以初值0，即 <code>\0</code></li></ol><h3 id="通过赋初值定义数组大小">通过赋初值定义数组大小</h3><ol><li>C语言规定可以通过赋初值来定义数组的大小，这时数组说明符的一对方括号中可以不指定数组的大小</li></ol><h3 id="一维数组的定义和数组元素引用举例">一维数组的定义和数组元素引用举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个含有30个元素的int类型数组，依次给数组元素赋奇数1、3、5、···，然后按每行10个数顺序输出，最后再按每行10个数逆序输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">30</span>];</span><br><span class="line">    <span class="type">int</span> i, k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i ++)&#123;</span><br><span class="line">        a[i] = k;</span><br><span class="line">        k = k + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i+<span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i]);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维数组和指针">一维数组和指针</h2><ol><li>在函数体中或在函数外部定义的数组名可以认为是一个存放地址值的指针变量名，其中的地址值是数组第一个元素的地址，也就是数组所占一串连续存储单元的起始地址，定义数组时的类型即是此指针变量的基类型<ol><li>这个指针变量中的地址值不可改变，即不可以给数组名重新赋值</li></ol></li><li>可以对数组名加一个整数的办法，来依次表达该数组中不同元素的地址</li></ol><h2 id="函数之间对一维数组和数组元素的引用">函数之间对一维数组和数组元素的引用</h2><h3 id="数组元素作实参">数组元素作实参</h3><ol><li>每个数组元素实际上代表内存中的一个存储单元，数组元素的值可以传送给该变量，在函数中只能对该变量进行操作，而不能直接引用对应的数组元素，不可能在函数中改变对应数组元素中的值</li></ol><h3 id="数组名作实参">数组名作实参</h3><ol><li>数组名本身是一个地址值，对应的形参应当是一个指针变量，此指针变量的基类型必须与数组的类型一致。在函数中，可以通过此指针变量来引用调用函数中的对应的数组元素，从而达到对调用函数中对应的数组元素进行操作而改变其中的值</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过一个函数给主函数中定义的数组输入若干大于或等于0的整数，用负数作为输入结束标志；调用另一个函数输出该数组中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 100</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">input</span><span class="params">(<span class="type">int</span> *a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[M],n;</span><br><span class="line">    n = input(a);</span><br><span class="line">    output(a,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">input</span><span class="params">(<span class="type">int</span> *a)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        a[i] = n;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素地址作为实参">数组元素地址作为实参</h3><ol><li>当用数组元素作为实参时，因为是地址值，所以对应的形参也应当是基类型相同的指针变量</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对具有10个元素的char类型数组，从下标为4的元素开始，全部设置星号，保持前四个元素不变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B 4</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setstar</span><span class="params">(<span class="type">char</span> *c)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c[M] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>&#125;;</span><br><span class="line">    setstar(c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setstar</span><span class="params">(<span class="type">char</span> *c)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = B; i &lt; M; i++)&#123;</span><br><span class="line">        c[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维数组应用举例">一维数组应用举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个含有15个元素的数组，并编写函数分别完成以下操作：</span></span><br><span class="line"><span class="comment">1. 调用C库函数中的随机函数给所有元素赋以0~49的随机数</span></span><br><span class="line"><span class="comment">2. 输出数组元素中的值</span></span><br><span class="line"><span class="comment">3. 按顺序对每三个数求一个和数，并传回主函数</span></span><br><span class="line"><span class="comment">4. 最后输出所有求出的和值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> *a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrout</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getsum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n,<span class="type">int</span> *sum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[M],sum[M/N];</span><br><span class="line">    getrand(a);</span><br><span class="line">    arrout(a,M);</span><br><span class="line">    getsum(a, N,sum);</span><br><span class="line">    arrout(sum,M/N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> *a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">        a[i] = rand() % <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arrout</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getsum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n,<span class="type">int</span> *sum)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M/N; i++)&#123;</span><br><span class="line">        sum[i] = a[i * N] + a[i * N + <span class="number">1</span>] + a[i * N + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组的定义和二维数组元素的引用">二维数组的定义和二维数组元素的引用</h2><h3 id="二维数组的定义">二维数组的定义</h3><ol><li>定义语句形式：<code>类型名 数组名[常量表达式1][常量表达式2]，······</code></li></ol><h3 id="二维数组的引用">二维数组的引用</h3><ol><li>引用形式：<code>数组名[下标表达式1][下标表达式2]</code></li></ol><h3 id="二维数组的初始化">二维数组的初始化</h3><ol><li>所赋初值个数与数组元素的个数相同<ol><li>可以在定义二维数组的同时给二维数组的各元素赋初值 <code>int a[4][3]=&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;,&#123;10,11,12&#125;&#125;;</code></li></ol></li><li>每行所赋初值个数与数组元素的个数不同<ol><li>系统将自动给该行后面元素赋值</li></ol></li><li>所赋初值行数少于数组行数<ol><li>系统将自动给后面各行的元素补初值0</li></ol></li><li>赋初值时省略花括号对<ol><li><code>int a[4,3]=&#123;1,2,4,5&#125;;</code><ol><li>系统将按a数组元素在内存中排列的顺序，将花括号内的数据一一对应地赋给各个元素，若数据不足，系统将给后面的元素自动补初值0</li></ol></li></ol></li></ol><h3 id="通过赋初值定义二维数组的大小">通过赋初值定义二维数组的大小</h3><ol><li>只可以省略第一个方括号中的常量表达式，而不能省略第二个方括号中的常量表达式</li></ol><h3 id="二维数组的定义和数组元素引用举例">二维数组的定义和数组元素引用举例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过键盘给出2*3的二维数组输入数据，第一行赋1、2、3，第二行赋10、20、30，然后按行输出此二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组和指针">二维数组和指针</h2><blockquote><p>先给出以下定义：<code>in *p,a[3][4];</code></p></blockquote><ol><li>二维数组a由若干个一维数组组成<ol><li>在以上二维数组中，a[0],a[1],a[2]都是一维数组名，同样也代表一个不可变的地址常量，其值依次为二维数组每行第一个元素的地址，其基类型就是数组元素的类型</li></ol></li><li>二维数组名也是一个地址值常量<ol><li>二维数组名同样也是一个存放地址常量的指针，其值为二维数组中第一个元素的地址</li><li>二维数组名应理解为一个行指针</li></ol></li><li>二维数组元素的地址<ol><li>二维数组元素的地址可以由表达式&amp;a[i][j]求得，也可以通过每行的首地址来表示</li></ol></li></ol><h2 id="二维数组名和指针数组作为实参">二维数组名和指针数组作为实参</h2><h3 id="二维数组名作为实参时实参和形参之间的数据传递">二维数组名作为实参时实参和形参之间的数据传递</h3><ol><li>当二维数组名作为实参时，对应的形参必须是一个行指针变量</li></ol><h3 id="指针数组作为实参时实参和形参之间的数据传递">指针数组作为实参时实参和形参之间的数据传递</h3><ol><li>当指针数组作为实参时，对应的形参应当是一个指向指针的指针</li></ol><h2 id="二维数组程序举例">二维数组程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过调用随机函数给5*6的二维数组元素赋10~40范围内的整数，求出二维数组每行元素的平均值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getave</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>], <span class="type">double</span> *ave)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>][<span class="number">6</span>];</span><br><span class="line">    <span class="type">double</span> ave[<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    getrand(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getave(a, ave);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%f &quot;</span>, ave[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getrand</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>])</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            a[i][j] = rand() % <span class="number">31</span> + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getave</span><span class="params">(<span class="type">int</span> a[][<span class="number">6</span>], <span class="type">double</span> *ave)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            ave[i] = ave[i] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        ave[i] = ave[i] / <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」地址和指针</title>
      <link href="/c4b73d27184a.html"/>
      <url>/c4b73d27184a.html</url>
      
        <content type="html"><![CDATA[<h2 id="指针变量的定义和指针变量的基类型">指针变量的定义和指针变量的基类型</h2><ol><li>定义指针变量的一般形式：<code>类型名 *指针变量名1，*指针变量名2，······</code></li><li>指针变量必须区分基类型，基类型不同的指针变量不能混合使用</li></ol><h2 id="给指针变量赋值">给指针变量赋值</h2><h3 id="给指针变量赋地址值">给指针变量赋地址值</h3><ol><li>通过求地址运算符（&amp;）获得地址值<ol><li>求地址运算符只能应用于变量和数组元素，不可以用于表达式、常量或者被说明为register的变量</li><li>&amp;必须放在运算对象的左边，而且运算对象的类型必须与指针变量的基类型相同</li></ol></li><li>通过指针变量获得地址值<ol><li>当进行赋值运算时，赋值号两边指针变量的基类型必须相同</li></ol></li><li>通过标准函数获得地址值<ol><li>可以通过调用库函数malloc和calloc在内存中开辟动态存储单元，并把所开辟的动态存储单元的地址赋值给指针变量</li></ol></li></ol><h3 id="给指针变量赋“空”值">给指针变量赋“空”值</h3><ol><li><code>p=NULL</code></li><li>指针p并不是指向地址为0的存储单元，而是具有一个确定的值——“空”</li></ol><h2 id="对指针变量的操作">对指针变量的操作</h2><h3 id="通过指针来引用一个存储单元">通过指针来引用一个存储单元</h3><ol><li>间接访问运算符（间址运算符）：*<ol><li>当指针变量中存放了一个确切的地址值时，就可以用“*”通过指针来引用该地址的存储单元</li><li>单目运算符，必须出现在运算对象的左边</li></ol></li></ol><h3 id="移动指针">移动指针</h3><ol><li>定义：对指针变量加上或减去一个整数，或通过赋值运算，使指针变量指向相邻的存储单元</li><li>只有当指针指向一串连续的存储单元时，指针的移动才有意义</li></ol><h2 id="函数之间地址值的传递">函数之间地址值的传递</h2><h3 id="形参为指针变量时实参和形参之间的数据传递">形参为指针变量时实参和形参之间的数据传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写函数myadd(int *a,int *b)，函数把指针a和b所指的存储单元中的两个值相加，然后将和值作为函数值返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">myadd</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b,sum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    sum = myadd(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">myadd</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    sum = *a + *b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过传送地址在被调用函数中直接改变调用函数中的变量的值">通过传送地址在被调用函数中直接改变调用函数中的变量的值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用swap函数，交换主函数中变量x和y中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">30</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>, a, b);</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数返回地址值">函数返回地址值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把主函数中变量i和j中存放较大数的那个地址作为函数值返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">fun</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    i = <span class="number">10</span>;</span><br><span class="line">    j = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%d&quot;</span>,*fun(&amp;i, &amp;j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">fun</span><span class="params">(<span class="type">int</span> *i, <span class="type">int</span> *j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(*i&gt;*j)&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」函数</title>
      <link href="/c302d64e69b2.html"/>
      <url>/c302d64e69b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="库函数">库函数</h2><ol><li>调用C语言库函数时要求的include命令行</li><li>标准库函数的调用的一般形式：<code>函数名(参数表)</code></li></ol><h2 id="函数的定义和返回值">函数的定义和返回值</h2><h3 id="函数定义的语法">函数定义的语法</h3><ol><li>函数定义的一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数返回值的类型名 函数名(类型名 形式参数<span class="number">1</span>，类型名 形式参数<span class="number">2</span>，······)&#123;</span><br><span class="line">说明部分</span><br><span class="line">语句部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>函数名和形式参数都是由用户命名的标识符。在同一程序中，函数名必须唯一，形式参数名只要在同一函数中唯一即可</li><li>不能在函数的内部定义函数</li><li>默认函数返回值的类型是int类型</li><li>除了返回值类型为int类型的函数外，函数必须先定义（或说明）后调用</li><li>若函数只是用于完成某些操作，没有函数值返回，则必须把函数定义成void类型</li></ol><h3 id="函数的返回值">函数的返回值</h3><ol><li>函数的值通过return语句返回，一般形式：<code>return 表达式;</code> 或 <code>return (表达式)</code></li><li>在同一个函数内，return语句只可能执行一次</li></ol><h2 id="函数的调用">函数的调用</h2><h3 id="函数的两种调用方式">函数的两种调用方式</h3><ol><li>函数的一般调用形式：<code>函数名(实际参数表)</code></li><li>两种调用方式<ol><li>当调用的函数用于求出某个值时，函数的调用可作为表达式出现在允许表达式出现的任何地方</li><li>当函数不需要返回值时，函数的调用可作为一条独立的语句</li></ol></li></ol><h3 id="函数调用时的语法要求">函数调用时的语法要求</h3><ol><li>调用函数时，函数名必须与所调用的函数名字完全一致</li><li>实际参数的个数必须与形式参数的个数一致</li><li>函数必须先定义，后调用（函数的返回值为int或char时除外）</li><li>函数可以直接或间接的自己调用自己，称为递归调用</li></ol><h2 id="函数的说明">函数的说明</h2><h3 id="函数说明的形式">函数说明的形式</h3><ol><li>除主函数外，对于用户定义的函数遵循“先定义，后使用”的规则</li><li>一般形式<ol><li><code>类型名 函数名(参数类型1，参数类型2，······)</code></li><li><code>类型名 函数名(参数类型1 参数名1，参数类型2 参数名2，······)</code></li></ol></li></ol><h3 id="函数说明的位置">函数说明的位置</h3><ol><li>当在所有函数的外部、被调用之前说明函数时，在对函数进行说明的语句后面所有位置上都可以对该函数进行调用</li><li>函数说明也可以放在调用函数内的说明部分，如在main函数内部进行说明，则只能在main函数内部才能识别该函数</li></ol><h2 id="调用函数和被调用函数之间的数据传递">调用函数和被调用函数之间的数据传递</h2><ol><li>实际参数和形式参数之间的进行数据传递</li><li>通过return语句把函数值返回调用函数</li><li>通过全局变量（不提倡）</li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写函数isprime(int a)，用来判断自变量a是否为素数。若是素数，返回1，否则返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isprime</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">if</span>(isprime(x))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;素数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isprime</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a / <span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typecho部署</title>
      <link href="/593dab6c31f1.html"/>
      <url>/593dab6c31f1.html</url>
      
        <content type="html"><![CDATA[<h2 id="01-安装PHP">01 安装PHP</h2><p><strong>步骤 1：更新包列表</strong><br>打开终端并运行以下命令，以确保您的包列表是最新的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p><strong>步骤 2：安装PHP</strong><br>运行以下命令来安装PHP和常用的PHP扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php php-cli php-fpm php-json php-common php-mysql php-zip php-gd php-mbstring php-curl php-xml php-pear php-bcmath</span><br></pre></td></tr></table></figure><p>这将安装PHP以及一些常用扩展，但您可以根据项目需要添加其他扩展。</p><p><strong>步骤 3：检查PHP版本</strong><br>安装完成后，您可以运行以下命令来检查PHP的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure><p>这将显示已安装的PHP版本信息。</p><p><strong>步骤 4：启动PHP-FPM（可选）</strong><br>如果您计划使用PHP-FPM（PHP FastCGI Process Manager），可以运行以下命令启动它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start php7.4-fpm</span><br></pre></td></tr></table></figure><p>确保将 “7.4” 替换为您实际安装的PHP版本号。</p><p><strong>步骤 5：设置PHP-FPM自启动（可选）</strong><br>如果您希望PHP-FPM在系统启动时自动启动，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> php7.4-fpm</span><br></pre></td></tr></table></figure><p>同样，确保将 “7.4” 替换为您实际安装的PHP版本号。</p><p>现在，PHP已成功安装在您的Ubuntu系统上。您可以创建和运行PHP网站或应用程序了。如果需要进一步的配置，可以编辑PHP的配置文件，通常位于 <code>/etc/php/7.4/php.ini</code>（根据您的PHP版本号可能会有所不同）。</p><h2 id="02-安装MySQL">02 安装MySQL</h2><p>要在Ubuntu上安装MySQL，您可以按照以下步骤进行操作：</p><p><strong>步骤 1：更新包列表</strong><br>首先，打开终端并运行以下命令，以确保您的包列表是最新的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p><strong>步骤 2：安装MySQL Server</strong><br>运行以下命令来安装MySQL服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><p>在安装过程中，系统会提示您设置MySQL的root用户密码。请务必选择一个强密码，并在安装完成后妥善保存它。</p><p><strong>步骤 3：启动MySQL服务</strong><br>安装完成后，MySQL服务通常会自动启动。您可以使用以下命令检查MySQL服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure><p>如果MySQL未启动，您可以使用以下命令手动启动它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure><p><strong>步骤 4：设置MySQL自启动（可选）</strong><br>如果您希望MySQL在系统启动时自动启动，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysql</span><br></pre></td></tr></table></figure><p><strong>步骤 5：安全配置MySQL</strong><br>MySQL安装后，建议运行以下命令来执行MySQL安全配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>这个命令会提示您执行一系列安全性配置步骤，包括更改root密码、删除匿名用户、禁用远程root登录等。</p><p><strong>步骤 6：登录MySQL</strong><br>您可以使用以下命令登录到MySQL服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后，输入您在步骤 2 中设置的root密码。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python天翼云盘自动签到脚本</title>
      <link href="/bcc89ac81364.html"/>
      <url>/bcc89ac81364.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置自动执行">配置自动执行</h2><ol><li>打开Cron配置文件 <code>crontab -e</code> ，第一次设置，系统会提示你选择默认编辑器</li><li>添加定时任务，Cron表达式的格式如下</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * * * * command_to_be_executed</span><br><span class="line">- - - - -</span><br><span class="line">| | | | |</span><br><span class="line">| | | | +----- 星期中的某一天 (<span class="number">0</span> - <span class="number">7</span>) (星期天为<span class="number">0</span>或<span class="number">7</span>)</span><br><span class="line">| | | +------- 月份 (<span class="number">1</span> - <span class="number">12</span>)</span><br><span class="line">| | +--------- 一个月中的某一天 (<span class="number">1</span> - <span class="number">31</span>)</span><br><span class="line">| +----------- 小时 (<span class="number">0</span> - <span class="number">23</span>)</span><br><span class="line">+------------- 分钟 (<span class="number">0</span> - <span class="number">59</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>以下Cron表达式表示在每天的午夜（0点）执行Python脚本</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> * * * <span class="regexp">/usr/bin</span><span class="regexp">/python3 /path</span><span class="regexp">/to/your</span><span class="regexp">/script.py</span></span><br></pre></td></tr></table></figure><ol><li>验证定时任务 <code>crontab -l</code></li></ol><h2 id="代码">代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在下面两行的引号内贴上账号（仅支持手机号）和密码</span></span><br><span class="line">username = <span class="string">&quot;&quot;</span></span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> username <span class="keyword">and</span> password, <span class="string">&quot;请在第23、24行填入有效账号和密码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件推送的配置信息</span></span><br><span class="line">smtp_server = <span class="string">&#x27;smtp.163.com&#x27;</span>  <span class="comment"># SMTP 服务器地址</span></span><br><span class="line">smtp_port = <span class="number">25</span>  <span class="comment">#  SMTP 服务器端口号</span></span><br><span class="line">sender_email = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 发件人邮箱</span></span><br><span class="line">sender_password = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 发件人邮箱密码/授权码</span></span><br><span class="line">receiver_email = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 收件人邮箱</span></span><br><span class="line"></span><br><span class="line">BI_RM = <span class="built_in">list</span>(<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>)</span><br><span class="line">B64MAP = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2char</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> BI_RM[a]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64tohex</span>(<span class="params">a</span>):</span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    e = <span class="number">0</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">list</span>(a)[i] != <span class="string">&quot;=&quot;</span>:</span><br><span class="line">            v = B64MAP.index(<span class="built_in">list</span>(a)[i])</span><br><span class="line">            <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">                e = <span class="number">1</span></span><br><span class="line">                d += int2char(v &gt;&gt; <span class="number">2</span>)</span><br><span class="line">                c = <span class="number">3</span> &amp; v</span><br><span class="line">            <span class="keyword">elif</span> e == <span class="number">1</span>:</span><br><span class="line">                e = <span class="number">2</span></span><br><span class="line">                d += int2char(c &lt;&lt; <span class="number">2</span> | v &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                c = <span class="number">15</span> &amp; v</span><br><span class="line">            <span class="keyword">elif</span> e == <span class="number">2</span>:</span><br><span class="line">                e = <span class="number">3</span></span><br><span class="line">                d += int2char(c)</span><br><span class="line">                d += int2char(v &gt;&gt; <span class="number">2</span>)</span><br><span class="line">                c = <span class="number">3</span> &amp; v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                e = <span class="number">0</span></span><br><span class="line">                d += int2char(c &lt;&lt; <span class="number">2</span> | v &gt;&gt; <span class="number">4</span>)</span><br><span class="line">                d += int2char(<span class="number">15</span> &amp; v)</span><br><span class="line">    <span class="keyword">if</span> e == <span class="number">1</span>:</span><br><span class="line">        d += int2char(c &lt;&lt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encode</span>(<span class="params">j_rsakey, string</span>):</span><br><span class="line">    rsa_key = <span class="string">f&quot;-----BEGIN PUBLIC KEY-----\n<span class="subst">&#123;j_rsakey&#125;</span>\n-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1_openssl_pem(rsa_key.encode())</span><br><span class="line">    result = b64tohex((base64.b64encode(rsa.encrypt(<span class="string">f&#x27;<span class="subst">&#123;string&#125;</span>&#x27;</span>.encode(), pubkey))).decode())</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_md5_sign</span>(<span class="params">params</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="string">&#x27;&amp;&#x27;</span>.join(<span class="built_in">sorted</span>(params.split(<span class="string">&#x27;&amp;&#x27;</span>))).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username, password</span>):</span><br><span class="line">    urlToken = <span class="string">&quot;https://m.cloud.189.cn/udb/udb_login.jsp?pageId=1&amp;pageKey=default&amp;clientType=wap&amp;redirectURL=https://m.cloud.189.cn/zhuanti/2021/shakeLottery/index.html&quot;</span></span><br><span class="line">    r = s.get(urlToken)</span><br><span class="line">    pattern = <span class="string">r&quot;https?://[^\s&#x27;\&quot;]+&quot;</span>  <span class="comment"># 匹配以http或https开头的url</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, r.text)  <span class="comment"># 在文本中搜索匹配</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:  <span class="comment"># 如果找到匹配</span></span><br><span class="line">        url = <span class="keyword">match</span>.group()  <span class="comment"># 获取匹配的字符串</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果没有找到匹配</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到url&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    r = s.get(url)</span><br><span class="line">    pattern = <span class="string">r&quot;&lt;a id=\&quot;j-tab-login-link\&quot;[^&gt;]*href=\&quot;([^\&quot;]+)\&quot;&quot;</span>  <span class="comment"># 匹配id为j-tab-login-link的a标签，并捕获href引号内的内容</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, r.text)  <span class="comment"># 在文本中搜索匹配</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:  <span class="comment"># 如果找到匹配</span></span><br><span class="line">        href = <span class="keyword">match</span>.group(<span class="number">1</span>)  <span class="comment"># 获取捕获的内容</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果没有找到匹配</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到href链接&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    r = s.get(href)</span><br><span class="line">    captchaToken = re.findall(<span class="string">r&quot;captchaToken&#x27; value=&#x27;(.+?)&#x27;&quot;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    lt = re.findall(<span class="string">r&#x27;lt = &quot;(.+?)&quot;&#x27;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    returnUrl = re.findall(<span class="string">r&quot;returnUrl= &#x27;(.+?)&#x27;&quot;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    paramId = re.findall(<span class="string">r&#x27;paramId = &quot;(.+?)&quot;&#x27;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    j_rsakey = re.findall(<span class="string">r&#x27;j_rsaKey&quot; value=&quot;(\S+)&quot;&#x27;</span>, r.text, re.M)[<span class="number">0</span>]</span><br><span class="line">    s.headers.update(&#123;<span class="string">&quot;lt&quot;</span>: lt&#125;)</span><br><span class="line"></span><br><span class="line">    username = rsa_encode(j_rsakey, username)</span><br><span class="line">    password = rsa_encode(j_rsakey, password)</span><br><span class="line">    url = <span class="string">&quot;https://open.e.189.cn/api/logbox/oauth2/loginSubmit.do&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/76.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://open.e.189.cn/&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;appKey&quot;</span>: <span class="string">&quot;cloud&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accountType&quot;</span>: <span class="string">&#x27;01&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span>: <span class="string">f&quot;&#123;&#123;RSA&#125;&#125;<span class="subst">&#123;username&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">f&quot;&#123;&#123;RSA&#125;&#125;<span class="subst">&#123;password&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;validateCode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;captchaToken&quot;</span>: captchaToken,</span><br><span class="line">        <span class="string">&quot;returnUrl&quot;</span>: returnUrl,</span><br><span class="line">        <span class="string">&quot;mailSuffix&quot;</span>: <span class="string">&quot;@189.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;paramId&quot;</span>: paramId</span><br><span class="line">    &#125;</span><br><span class="line">    r = s.post(url, data=data, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> r.json()[<span class="string">&#x27;result&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.json()[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.json()[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">    redirect_url = r.json()[<span class="string">&#x27;toUrl&#x27;</span>]</span><br><span class="line">    r = s.get(redirect_url)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">subject, content</span>):</span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = sender_email</span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = receiver_email</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    text_part = MIMEText(content, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg.attach(text_part)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server = smtplib.SMTP(smtp_server, smtp_port)</span><br><span class="line">        server.starttls()  <span class="comment"># 开启安全连接</span></span><br><span class="line">        server.login(sender_email, sender_password)</span><br><span class="line">        server.sendmail(sender_email, receiver_email, msg.as_string())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;邮件发送失败:&quot;</span>, <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;server&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            server.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = login(username, password)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    rand = <span class="built_in">str</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">    surl = <span class="string">f&#x27;https://api.cloud.189.cn/mkt/userSign.action?rand=<span class="subst">&#123;rand&#125;</span>&amp;clientType=TELEANDROID&amp;version=8.6.3&amp;model=SM-G930K&#x27;</span></span><br><span class="line">    url = <span class="string">f&#x27;https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_SIGNIN&amp;activityId=ACT_SIGNIN&#x27;</span></span><br><span class="line">    url2 = <span class="string">f&#x27;https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_SIGNIN_PHOTOS&amp;activityId=ACT_SIGNIN&#x27;</span></span><br><span class="line">    url3 = <span class="string">f&#x27;https://m.cloud.189.cn/v2/drawPrizeMarketDetails.action?taskId=TASK_2022_FLDFS_KJ&amp;activityId=ACT_SIGNIN&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 5.1.1; SM-G930K Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36 Ecloud/8.6.3 Android/22 clientId/355325117317828 clientModel/SM-G930K imsi/460071114317824 clientChannelId/qq proVersion/1.0.6&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://m.cloud.189.cn/zhuanti/2016/sign/index.jsp?albumBackupOpened=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;m.cloud.189.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = s.get(surl, headers=headers)</span><br><span class="line">    netdiskBonus = response.json()[<span class="string">&#x27;netdiskBonus&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> response.json()[<span class="string">&#x27;isSign&#x27;</span>] == <span class="string">&quot;false&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;未签到，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span>)</span><br><span class="line">        res1 = <span class="string">f&quot;未签到，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已经签到过了，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span>)</span><br><span class="line">        res1 = <span class="string">f&quot;已经签到过了，签到获得<span class="subst">&#123;netdiskBonus&#125;</span>M空间&quot;</span></span><br><span class="line"></span><br><span class="line">    response = s.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;errorCode&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        res2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        description = response.json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span>)</span><br><span class="line">        res2 = <span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    response = s.get(url2, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;errorCode&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        res3 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        description = response.json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span>)</span><br><span class="line">        res3 = <span class="string">f&quot;抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    response = s.get(url3, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;errorCode&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        res4 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        description = response.json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;链接3抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span>)</span><br><span class="line">        res4 = <span class="string">f&quot;链接3抽奖获得<span class="subst">&#123;description&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    title = <span class="string">&quot;天翼云签到&quot;</span></span><br><span class="line">    content = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res1&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res2&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res3&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">&#123;res4&#125;</span></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这里可以添加发送通知的代码，根据具体的通知服务接口进行实现。</span></span><br><span class="line">    send_email(title, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>源代码来自Github @<a href="https://github.com/aefa6/QinglongScript">QinglongScript</a>，将青龙面板通知修改为邮箱推送</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 天翼云盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian实现百度翻译</title>
      <link href="/ac1aeb19d238.html"/>
      <url>/ac1aeb19d238.html</url>
      
        <content type="html"><![CDATA[<ol><li>在obsidian社区插件市场中安装插件<code>Search on Internet</code></li><li>申请<a href="https://fanyi-api.baidu.com/manage/developer">百度翻译API</a></li><li>填入appid以及appkey后修改插件配置，设置to_lang可以改变翻译的语言，具体查看百度翻译API文档<ol><li><a href="https://api.aweme.top/query?query=">https://api.aweme.top/query?query=</a>&amp;appid={appid}&amp;appkey={appkey}&amp;to_lang=zh</li></ol></li><li>选中文本后右键 <code>Search on 百度翻译</code></li><li>自行部署代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set your own appid/appkey.</span></span><br><span class="line"><span class="comment"># appid = &#x27;20230928001831995&#x27;</span></span><br><span class="line"><span class="comment"># appkey = &#x27;_hD5X0OoZY7jkO5w3D4E&#x27;</span></span><br><span class="line"></span><br><span class="line">from_lang = <span class="string">&#x27;auto&#x27;</span></span><br><span class="line"><span class="comment"># to_lang = &#x27;zh&#x27;</span></span><br><span class="line"></span><br><span class="line">endpoint = <span class="string">&#x27;http://api.fanyi.baidu.com&#x27;</span></span><br><span class="line">path = <span class="string">&#x27;/api/trans/vip/translate&#x27;</span></span><br><span class="line">url = endpoint + path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_md5</span>(<span class="params">s, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode(encoding)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/query&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate_query</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取查询参数</span></span><br><span class="line">        query = request.args.get(<span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        appid = request.args.get(<span class="string">&#x27;appid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        appkey = request.args.get(<span class="string">&#x27;appkey&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        to_lang = request.args.get(<span class="string">&#x27;to_lang&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机生成salt</span></span><br><span class="line">        salt = random.randint(<span class="number">32768</span>, <span class="number">65536</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算md5</span></span><br><span class="line">        sign = make_md5(appid + query + <span class="built_in">str</span>(salt) + appkey)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建请求参数</span></span><br><span class="line">        headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">        payload = &#123;<span class="string">&#x27;appid&#x27;</span>: appid, <span class="string">&#x27;q&#x27;</span>: query, <span class="string">&#x27;from&#x27;</span>: from_lang, <span class="string">&#x27;to&#x27;</span>: to_lang, <span class="string">&#x27;salt&#x27;</span>: salt, <span class="string">&#x27;sign&#x27;</span>: sign&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送请求到翻译API</span></span><br><span class="line">        response = requests.post(url, params=payload, headers=headers)</span><br><span class="line">        result = response.json()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取翻译结果</span></span><br><span class="line">        translations = result.get(<span class="string">&quot;trans_result&quot;</span>, [])</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> translations:</span><br><span class="line">            dst = item.get(<span class="string">&quot;dst&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            src = item.get(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 不再需要手动处理Unicode转义字符</span></span><br><span class="line">            separate = <span class="string">&quot;——————————————————————————————&quot;</span></span><br><span class="line">            output.append(<span class="string">f&quot;<span class="subst">&#123;separate&#125;</span> &lt;br&gt; 译文: &lt;br&gt; <span class="subst">&#123;dst&#125;</span> &lt;br&gt;&lt;br&gt; 原文: &lt;br&gt; <span class="subst">&#123;src&#125;</span> &lt;br&gt;&lt;br&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\n\n&quot;</span>.join(output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8081</span>)</span><br></pre></td></tr></table></figure><blockquote><p>重启服务命令：<code>systemctl restart myflaskapp.service</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
            <tag> 百度翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同花顺转股溢价率中位数获取</title>
      <link href="/bcaf17af67b7.html"/>
      <url>/bcaf17af67b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python环境配置">Python环境配置</h2><p>详细安装步骤参考<a href="https://blog.csdn.net/m0_57081622/article/details/127180996">Python安装与环境配置超详细保姆级教程</a></p><h2 id="iFind-Python-环境配置">iFind Python 环境配置</h2><ol><li><a href="http://ft.10jqka.com.cn/index.php?c=index&amp;a=download">点击下载</a>同花顺数据接口</li><li>第一次下载的用户，请您先打开文件夹内的SuperCommand并登录您的账号</li><li>登录后，系统会要求您修复相关编程语言环境，请按照指示修复相关环境</li><li>或在登录后点击工具中的环境设置选项，选中Python后点击确定按钮</li><li>然后选中安装的Python路径，点击继续</li></ol><h2 id="安装Pycharm">安装Pycharm</h2><p><a href="https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows&amp;code=PCC">点击下载</a></p><p>详细安装步骤<a href="https://blog.csdn.net/qq_44809707/article/details/122501118">pycharm安装教程</a></p><h2 id="运行Python程序">运行Python程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/18 14:44</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> iFinDPy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username, password</span>):</span><br><span class="line">    thsLogin = THS_iFinDLogin(username, password)</span><br><span class="line">    <span class="keyword">if</span> thsLogin != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">edate</span>):</span><br><span class="line">    get_str = <span class="string">&#x27;edate=&#x27;</span> + edate + <span class="string">&#x27;;zqlx=全部&#x27;</span></span><br><span class="line">    data_p00868 = THS_DR(<span class="string">&#x27;p00868&#x27;</span>, get_str, <span class="string">&#x27;p00868_f027:Y,p00868_f022:Y&#x27;</span>, <span class="string">&#x27;format:list&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data_p00868</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据到Excel</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_excel</span>(<span class="params">file_name, str_date, premium</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_name):</span><br><span class="line">        data = &#123;<span class="string">&quot;日期&quot;</span>: [str_date], <span class="string">&quot;转股溢价率%&quot;</span>: [premium]&#125;</span><br><span class="line">        df = pd.DataFrame(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_excel(file_name)</span><br><span class="line">        new_data = pd.DataFrame(&#123;<span class="string">&quot;日期&quot;</span>: [str_date], <span class="string">&quot;转股溢价率%&quot;</span>: [premium]&#125;)</span><br><span class="line">        df = pd.concat([df, new_data], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    df.to_excel(file_name, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算中位数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_median</span>(<span class="params">data</span>):</span><br><span class="line"><span class="comment"># 转换价值范围</span></span><br><span class="line">    max_value = <span class="number">101</span></span><br><span class="line">    min_value = <span class="number">99</span></span><br><span class="line">    float_values = []</span><br><span class="line"></span><br><span class="line">    data_f022 = data[<span class="string">&#x27;p00868_f022&#x27;</span>]</span><br><span class="line">    data_f027 = data[<span class="string">&#x27;p00868_f027&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f027, f022 <span class="keyword">in</span> <span class="built_in">zip</span>(data_f027, data_f022):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;--&#x27;</span> <span class="keyword">in</span> f027 <span class="keyword">or</span> <span class="string">&#x27;--&#x27;</span> <span class="keyword">in</span> f022:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        f027_value = <span class="built_in">float</span>(f027)</span><br><span class="line">        f022_value = <span class="built_in">float</span>(f022)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min_value &lt;= f027_value &lt;= max_value:</span><br><span class="line">            float_values.append(f022_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.median(float_values) <span class="keyword">if</span> float_values <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据 - 单日</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_today_data</span>():</span><br><span class="line">    today = datetime.date.today()</span><br><span class="line">    edate = today.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> get_data(edate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据 - 区间</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_interval_data</span>(<span class="params">start_date, end_date</span>):</span><br><span class="line">    delta = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">    data_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> start_date &lt;= end_date:</span><br><span class="line">        edate = start_date.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">        data = get_data(edate)</span><br><span class="line">        <span class="keyword">if</span> data.data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data_list.append((start_date.strftime(<span class="string">&quot;%Y/%m/%d&quot;</span>), data))</span><br><span class="line">        start_date += delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    username = <span class="string">&quot;账号&quot;</span></span><br><span class="line">    password = <span class="string">&quot;密码&quot;</span></span><br><span class="line">    login(username, password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取本日数据</span></span><br><span class="line">    <span class="comment"># today_data = get_today_data()</span></span><br><span class="line">    <span class="comment"># if today_data.data is not None:</span></span><br><span class="line">    <span class="comment">#     today_median = calculate_median(today_data.data[0][&#x27;table&#x27;])</span></span><br><span class="line">    <span class="comment">#     if today_median is not None:</span></span><br><span class="line">    <span class="comment">#         save_to_excel(&quot;转股溢价率记录(转换价值).xlsx&quot;, datetime.date.today().strftime(&quot;%Y/%m/%d&quot;), today_median)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取区间时间内的数据</span></span><br><span class="line">    start_date = datetime.date(<span class="number">2023</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">    end_date = datetime.date(<span class="number">2023</span>, <span class="number">11</span>, <span class="number">18</span>)</span><br><span class="line">    interval_data = get_interval_data(start_date, end_date)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> date, data <span class="keyword">in</span> interval_data:</span><br><span class="line">        median_value = calculate_median(data.data[<span class="number">0</span>][<span class="string">&#x27;table&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> median_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            save_to_excel(<span class="string">&quot;转股溢价率记录(转换价值).xlsx&quot;</span>, date, median_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 同花顺 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「软件设计师」计算机组成与体系结构</title>
      <link href="/0f6e0b2015d6.html"/>
      <url>/0f6e0b2015d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据的表示">数据的表示</h2><blockquote><ul><li>最小的数据单位：b</li><li>最小的存储单位：byte</li></ul></blockquote><p><strong>进制的转换</strong></p><ol><li>R进制转十进制:将每一位数字用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">R^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>表示然后相加，k与该位与小数点的距离有关，小数点左边第一位为0，右边第一位为-1，往左递增，往右递减如：二进制数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10100.01</mn><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10100.01=1*2^4+1*2^2+1*2^{-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10100.01</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li><li>十进制转R进制: 整数位使用短除法，即将十进制数除以R再取余，直至余数为零，然后将余数由下往上按顺序排列，小数位乘以R，每乘一次就取它的整数位（整数位为零时就取零)，直至小数位为零，然后将取得的整数位由上往下排列即可。</li><li>二进制转八进制及二进制转十六进制：将二进制数以小数点为界向左及向右每三个一组(转八进制),或者每四个一组(转十六进制)，缺的数用零来补充，然后依次转化为相应的进制数然后按顺序排列即可。</li></ol><p><strong>原码反码补码移码</strong></p><ol><li>原码：将数值转换为二进制数，并且该二进制数的首位（最高位）表示正负，0表示正，1表示负，不足八位的就在首位与二进制数中间用零填充。例：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><msub><mo stretchy="false">]</mo><mtext>原</mtext></msub><mo>=</mo><mn>10000001</mn></mrow><annotation encoding="application/x-tex">[-1]_{原}=10000001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000001</span></span></span></span></li><li>反码：正数的反码为本身，负数的反码为其原码除首位不变外全部取反<ol><li>原码在计算机中进行加减不能得到正确的答案，而反码的加减则符合事实</li></ol></li><li>补码：正数的补码与原码和反码相同，负数的补码即为其反码<strong>加1</strong><ol><li>补码的运算也符合正确答案</li><li>补码的补码就是原码</li></ol></li><li>移码：将正数和负数的补码首位取反，其余位不改变<ol><li>移码的运算也符合正确答案</li></ol></li><li>各自数值表示范围:其中n一般等于8</li></ol><table><thead><tr><th></th><th>整数</th></tr></thead><tbody><tr><td>原码</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1) \sim 2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>反码</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-(2^{n-1}-1) \sim 2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>补码</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>∼</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^{n-1} \sim 2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td></tr></tbody></table><p><strong>浮点数</strong></p><ol><li>浮点数的概念：浮点数即科学计数法，如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><mo>=</mo><mn>1</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1000=1*10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> ; 其中，1为尾数，10为基数，3为指数</li><li>表示格式：阶符+阶码+数符+尾数</li><li>计算机中浮点数的运算：当两个指数不等的浮点数相加时，计算机会把低阶浮点数的指数转化为高阶浮点数的指数，如： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.0</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo>+</mo><mn>1.19</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1.0*10^3+1.19*10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.19</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ，计算机会将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.19</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1.19*10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.19</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 转化为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.119</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">0.119*10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.119</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> ，然后作和，然后结果规格化(将尾数的绝对值限定在区间[0.5,1])，如：得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11.3019</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">11.3019*10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11.3019</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 以后，要化为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.13019</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1.13019*10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.13019</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></li><li>浮点数所能表示的数值范围主要由阶码决定，所表示的数值精度则由尾数决定</li></ol><h2 id="中央处理器（CPU）">中央处理器（CPU）</h2><p><strong>CPU由运算器和控制器组成</strong></p><ol><li>运算器(ALU）<ol><li>累加寄存器(AC):专门存放算术或逻辑运算的一个操作数和运算结果的寄存器。能进行加、减、读出、移位、求补等操作。是运算器的主要部分</li><li>状态寄存器(PSW）：该部件用来存放两类信息，一类是体现当前指令执行结果的各种状态信息(条件码)，如有无进位、有无溢出、结果正负、信息是否为零等；另一类是存放控制信息，如允许中断、跟踪标志等</li></ol></li><li>控制器<ol><li>程序计数器(PC)：程序计数器中存放的是下一条指令的地址。由于多数情况下程序是顺序执行的，所以程序计数器设计成自动加一的装置。当出现转移指令时，就需重填程序计数器</li><li>指令寄存器(IR)：中央处理器正在执行的操作码表存放在这里，即当前正在执行的所有指令</li><li>指令译码器（ID）：将操作码解码，告诉中央处理器该做什么</li><li>时序部件</li></ol></li></ol><p><strong>寻址</strong></p><ol><li>立即寻址。操作数就包含在指令中</li><li>直接寻址。操作数存放在内存单元中，指令中直接给出操作数所在存储单元的地址</li><li>寄存器寻址。操作数存放在某一寄存器中，指令中给出存放操作数的寄存器名。寄存器间接寻址。操作数存放在内存单元中，操作数所在存储单元的地址在某个寄存器中</li><li>间接寻址。指令中给出操作数地址的地址</li><li>相对寻址。指令地址码给出的是一个偏移量(可正可负)，操作数地址等于本条指令的地址加上该偏移量</li><li>变址寻址。操作数地址等于变址寄存器的内容加偏移量。</li></ol><blockquote><ul><li>CPU采用多种寻址方式是为了在效率和方便性上找一个平衡</li><li>CPU根据指令周期的不同阶段来区分内存中以二进制编码形式存放的指令和数据</li><li>指令最先进入到数据寄存器暂存起来，然后再拿到指令寄存器中，再交由指令译码器来解码进而运算(交给运算器)，而这一过程一结束，就会迅速提取程序计数器中的指令(即下一条指令)，因此，程序计数器中存储的始终是暂未执行的，下一条指令的“地址”</li><li>在汇编语言程序中，程序员可以直接访问通用寄存器以存取数据，可以访问状态字寄存器以获取有关数据处理结果的相关信息，可以通过相对程序计数器进行寻址，但是不能访问指令寄存器，即指令寄存器对用户是完全透明的</li></ul></blockquote><h2 id="计算机体系结构分类-Flynn">计算机体系结构分类(Flynn)</h2><table><thead><tr><th style="text-align:left">体系结构类型</th><th style="text-align:left">结构</th><th style="text-align:left">关键特性</th><th style="text-align:left">代表</th></tr></thead><tbody><tr><td style="text-align:left">单指令流单数据流SISD</td><td style="text-align:left">控制部分：一个<br>处理器：一个<br>主存模块：一个</td><td style="text-align:left"></td><td style="text-align:left">单处理器系统</td></tr><tr><td style="text-align:left">单指令流多数据流SIMD</td><td style="text-align:left">控制部分：一个<br>处理器：多个<br>主存模块：一个</td><td style="text-align:left">各处理器以异步的形式执行同一条指令</td><td style="text-align:left">并行处理机<br>阵列处理机<br>超级向量处理机</td></tr><tr><td style="text-align:left">多指令流单数据流MISD</td><td style="text-align:left">控制部分：多个<br>处理器：一个<br>主存模块：多个</td><td style="text-align:left">被证不可能，至少是不实际</td><td style="text-align:left">目前没有，有文献称流水线计算机为此类</td></tr><tr><td style="text-align:left">多指令流多数据流MIMD</td><td style="text-align:left">控制部分：多个<br>处理器：多个<br>主存模块：多个</td><td style="text-align:left">能够实现作业、任务、指令等各级全面并行</td><td style="text-align:left">多处理机系统<br>多计算机</td></tr></tbody></table><h2 id="CISC和RISC">CISC和RISC</h2><table><thead><tr><th style="text-align:left">指令系统类型</th><th style="text-align:left">指令</th><th style="text-align:left">寻址方式</th><th style="text-align:left">实现方式</th><th style="text-align:left">其他</th></tr></thead><tbody><tr><td style="text-align:left">CISC（复杂）</td><td style="text-align:left">数量多，使用频率差别大，可变长格式</td><td style="text-align:left">支持多种</td><td style="text-align:left">微程序控制技术（微码）</td><td style="text-align:left">研制周期长</td></tr><tr><td style="text-align:left">RISC（精简）</td><td style="text-align:left">数量少，使用频率接近，定长格式，大部分为单调期指令，操作寄存器，只有Load/Store操作内存</td><td style="text-align:left">支持方式少</td><td style="text-align:left">增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td><td style="text-align:left">优化编译，有效支持高级语言</td></tr></tbody></table><h2 id="流水线">流水线</h2><ol><li>基本概念：流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度</li><li>周期计算<ol><li>流水线周期（操作周期）为执行时间最长的一段</li><li>计算公式：1条指令执行时间+(指令条数-1)*流水线周期<ol><li>理论公式：(t1+t2+<code>··</code>+tk)+(n-1)*△t</li><li>实践公式：(k+n-1)*△t</li></ol></li></ol></li></ol><blockquote><p>优先使用理论公式</p></blockquote><ol start="3"><li>吞吐率计算<ol><li>定义：指单位时间内流水线所完成的任务数量或输出的结果数量</li><li>基本公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>P</mi><mo>=</mo><mfrac><mtext>指令条数</mtext><mtext>流水线执行时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">TP=\frac{指令条数}{流水线执行时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">TP</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">流水线执行时间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">指令条数</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>流水线最大吞吐率：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><msub><mi>P</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mi>n</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">△</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">△</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">TP_{max}=\lim\limits_{n\to\infty}\frac{n}{(k+n-1)\triangle t}=\frac{1}{\triangle t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3954em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">△</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3262em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">△</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol></li><li>加速比<ol><li>定义：完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比</li><li>公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mtext>不使用流水线执行时间</mtext><mtext>使用流水线执行时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">S=\frac{不使用流水线执行时间}{使用流水线执行时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">使用流水线执行时间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">不使用流水线执行时间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol></li><li>效率<ol><li>定义：流水线的设备利用率。在时空图上，流水线的效率定义为n个任务占用的时空区与k个流水段总的时空区之比</li><li>公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mtext>个任务占用的时空区</mtext></mrow><mrow><mi>k</mi><mtext>个流水段的总的时空区</mtext></mrow></mfrac><mo>=</mo><mfrac><msub><mi>T</mi><mn>0</mn></msub><mrow><mi>k</mi><msub><mi>T</mi><mi>k</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">E=\frac{n个任务占用的时空区}{k个流水段的总的时空区}=\frac{T_0}{kT_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback mtight">个流水段的总的时空区</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord cjk_fallback mtight">个任务占用的时空区</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3393em;vertical-align:-0.4509em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4509em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol></li></ol><h2 id="层次化存储器结构">层次化存储器结构</h2><p><img src="pic/4.png" alt="img"></p><blockquote><p>内存存储外存的部分内容，cache存储内存的部分内容，CPU只处理cache中的指令，cache的作用是精简内存中重复出现的指令，提高CPU的执行效率，使得计算机的运算速度得到极大的提升；此外，结构中由上至下，速度越来越慢，但容量越来越大</p></blockquote><h2 id="Cache">Cache</h2><ol><li>Cache的功能：提高CPU输入输出的速率，突破冯诺依曼瓶颈，即CPU与存储器系统间数据传送带宽限制，在程序执行过程中，Cache与主存的地址映射是由硬件自动完成的</li><li>与cache相关的计算：如果以h代表Cache的访问命中率，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示Cache的周期时间，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示主存储器周期时间，以读操作为例，使用“Cache+主存储器”的系统的平均周期为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">t_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>3</mn></msub><mo>=</mo><mi>h</mi><mo>∗</mo><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_3=h*t_1+(1-h)*t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><ol><li><code>1-h</code>称为失效率（未命中率）</li></ol></li></ol><blockquote><p>CPU会在cache中寻找它需要的数据，如果不能找到，CPU就将前往内存中寻找，而chche的访问命中率就是CPU需要的数据在cache中被找到的比例，未能找到的数据CPU将前往内存中进行再次寻找</p></blockquote><ol start="3"><li>内存与cache地址映射的三种方式<ol><li>直接映像：cache的区号与内存的区号一一对应</li><li>全相连映像：cache的一个块号可以对应多个内存的块号，内存的一个块号也可以对应cache的多个块号</li><li>组相连映像：两种方式相结合的方法</li></ol></li></ol><blockquote><p>这三种映射方式都是计算机硬件自动完成的，不是软件</p></blockquote><ol start="4"><li>替换算法：替换算法的目的是使cache获得尽可能高的命中率，有以下四种：随机替换算法、先进先出算法、近期最少使用算法、优化替换算法</li></ol><blockquote><p>现代的计算机cache系统是分为了三个级别的，访问时先从第一层开始访问，直至三个级别的cache都被访问完全时才会访问内存</p></blockquote><ol start="5"><li>虚拟存储器：即CPU在给出需要访问的内存地址时，给出的并不是真正的物理地址，而是物理地址的抽象，虚拟存储器是由主存-辅存两级存储器组成</li><li>时间局限性：如果某条指令被执行，则不久以后该指令很可能再次被执行；如果某条数据结构被访问，则不久以后该数据结构很可能再次被访问。产生时间局限性的主要原因是程序中有大量的循环操作</li><li>空间局限性：一旦程序访问了某个内存单元，不久以后，其附近的内存单元也要被访问，即程序在一段时间内所访问的存储器空间可能集中在一定的范围之内，其最常见情况就是程序的顺序执行。工作集是指在某段时间隔内，进程所要访问的页面集合。虽然程序只需少量的几页内存就可以运行，但为了使程序更有效地运行，必须使程序的工作集全部在内存（主存储器）当中，否则会使进程在运行中频繁出现缺页中断，从而出现频繁的页面调入/调出现象</li></ol><h2 id="主存">主存</h2><p><strong>分类</strong></p><ol><li>随机存取存储器<ol><li>DRAM (Dynamic RAM ，动态 RAM ）——SDRAM</li><li>SRAM (Static RAM ，静态）</li></ol></li><li>只读存储器<ol><li>MROM(Mask ROM ，掩模式 ROM ）</li><li>PROM(ProgrammabIe ROM，一次可编程 ROM)</li><li>EPROM (Erasable PROM, 可擦除的 PROM)</li><li>闪速存储器 (flash memory ，闪存）</li></ol></li></ol><p><strong>编址</strong></p><ol><li>概念：主存的编址就是把许多块芯片组成相应的存储器</li><li>一般表示方式如下图，其中左图一中的8表示它有8个地址空间，4表示每一个地址空间存储了4位的信息</li></ol><p><img src="pic/5.jpg" alt="img"></p><h2 id="磁盘结构与参数">磁盘结构与参数</h2><ol><li>存取时间=寻道时间+等待时间(平均定位时间+转动延迟)<ol><li>寻道时间是指磁头移动到磁道所需的时间</li><li>等待时间为等待读写的扇区转到磁头下方所需的时间</li></ol></li><li>磁道一般分为许多个小的扇形区，即物理块，磁头在依次读取这些物理块时(磁头必须依次读取)，会在读取的同时将其存放进缓存区，缓存区可以是单个，也可以是多个，存放完成后会在缓存区花费时间进行处理，处理期间磁头的读取不会停止，因此，如果缓存区过少，就会出现读取一个物理块花费了一个周期甚至更长的时间</li><li>磁盘调度管理中，先进行移臂调度寻找磁道，再进行旋转调度寻找扇区</li></ol><h2 id="总线">总线</h2><ol><li>概念：总线是连接计算机有关部件的一组信号线，是计算机中用来传送信息代码的公共通道</li><li>内部总线：微机内部的，各个外围芯片与处理器之间的总线，属于芯片级别</li><li>系统总线：系统总线即为各个插线板和系统板之间的总线<ol><li>数据总线：如32位，64位等一次性能够传输的位</li><li>地址总线：假设该计算机的地址总线为32位，那就代表它的地址空间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span>个字节</li><li>控制总线：发送相应的控制信号的总线</li></ol></li><li>外部总线：即微机和外部设备的总线</li></ol><blockquote><p>总线上的多个部件之间只能分时向总线发送数据，但可以同时从总线接收数据</p></blockquote><h2 id="可靠性">可靠性</h2><p><strong>串联系统</strong></p><ol><li>只要一个子系统失效，则整个系统都将失效</li><li>可靠性：累乘</li><li>失效率（近似）：累加</li></ol><p><strong>并联系统</strong></p><ol><li>少数子系统的失效将不会影响整个系统</li><li>可靠性：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>3</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1-(1-R_1)*(1-R_2)*···*(1-R_3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∗</span><span class="mpunct">⋅⋅⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∗</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>失效率：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mfrac><mn>1</mn><mi>λ</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mn>1</mn><mi>j</mi></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\mu=\frac{1}{\frac{1}{\lambda}\sum_{j=1}^{n} \frac{1}{j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.5841em;vertical-align:-0.739em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.599em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7047em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.8971em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4603em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4829em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.739em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ol><p><strong>n模冗余模型</strong></p><ol><li>数据输入n个子系统中，它们各自得出自己的结果，然后汇总到表决器，表决器将遵循少数服从多数的原则，输出大多数子系统得到的那个答案然后进行输出</li></ol><p><img src="pic/6.png" alt="img"></p><h2 id="校验码">校验码</h2><p><strong>奇偶校验码</strong></p><ol><li>在编码中增加一维校验位来使校验码中1的个数为奇数（奇校验）或偶数（偶校验）</li><li>常用奇偶校验码：水平奇偶校验码、垂直奇偶校验码、水平垂直校验码</li><li>可以检测出奇数位（出错的位数）出错的编码，但不能发现偶数位出错的情况</li><li>只能检错，不能纠错</li></ol><p><strong>海明码</strong></p><ol><li>利用奇偶性来检错和纠错的校验方法</li><li>设数据位是n位，校验位为k位，则必须满足：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo>&gt;</mo><mo>=</mo><mi>n</mi><mo>+</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">2^k-1&gt;=n+k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></li></ol><p><strong>例</strong>：求信息1011的海明码<br>（1）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>r</mi></msup><mo>≥</mo><mi>x</mi><mo>+</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^r\ge x+r+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8004em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>,确定校验码为三位：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>≥</mo><mn>4</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^3\ge4+3+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9501em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>.分别放在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn><mtext>、</mtext><msup><mn>2</mn><mn>1</mn></msup><mo>=</mo><mn>2</mn><mtext>、</mtext><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">2^0=1、2^1=2、2^2=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">2</span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>位<br>x为信息位的个数<br>（2）列出校验位公式<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo separator="true">,</mo><mn>6</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo separator="true">,</mo><mn>5</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo separator="true">,</mo><mn>3</mn><mo>=</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">7=2^2+2^1+2^0,6=2^2+2^1,5=2^2+2^0,3=2^1+2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><msub><mi>I</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>3</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">r_2=I_4\oplus I_3\oplus I_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><msub><mi>I</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>3</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_1=I_4\oplus I_3\oplus I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>0</mn></msub><mo>=</mo><msub><mi>I</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>2</mn></msub><mo>⊕</mo><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_0=I_4\oplus I_2\oplus I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>（3）根据公式得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn><mtext>，</mtext><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mtext>，</mtext><msub><mi>r</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r_2=0，r_1=0，r_0=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span><br>（4）将数据填入表格</p><table><thead><tr><th style="text-align:left">7</th><th style="text-align:left">6</th><th style="text-align:left">5</th><th style="text-align:left">4</th><th style="text-align:left">3</th><th style="text-align:left">2</th><th style="text-align:left">1</th><th style="text-align:left">位数</th></tr></thead><tbody><tr><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">I_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">I_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">I_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left">信息位</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">r_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:left">校验位</td></tr></tbody></table><p><a href="https://zhuanlan.zhihu.com/p/278326197">海明码- 知乎</a></p><p><strong>循环冗余校验码</strong></p><ol><li>在发送端，先把数据划分为组。假定每组 k 个比特</li><li>CRC 运算在每组 M 后面再添加供差错检测用的 n 位冗余码，然后构成一个帧发送出去。一共发送(k + n)位</li><li>帧检验序列 FCS：在数据后面添加上的冗余码</li><li>仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受</li><li>可以检错，不能纠错<br><img src="pic/7.jpg" alt="img"></li></ol><h2 id="输入输出（I-O）控制方式">输入输出（I/O）控制方式</h2><ol><li>输入输出系统是一组固化到计算机内主板上一个ROM芯片上的程序<ol><li>程序查询方式<ol><li>一次只能读/写一个字</li><li><strong>CPU和I/O（外设）只能串行工作</strong>，CPU需要一直轮询检查</li><li>由CPU将数放入内存</li></ol></li><li>中断驱动方式<ol><li>I/0设备通过中断信号主动报告I/0操作已完成</li><li><strong>CPU和I/0 (外设) 可并行工作</strong></li><li>CPU利用率得到提升</li><li>由CPU将数放入内存</li></ol></li><li>直接存储器方式（DMA）<ol><li>CPU和I/0 (外设) 可并行工作</li><li>仅在传送数据块的开始和结束时才需要CPU的干预</li><li>由外设直接将数据放入内存</li><li>一次读写的单位为“块”而不是字</li></ol></li></ol></li></ol><blockquote><p>CPU是在一个总线周期结束时响应DMA请求的，即不是DMA一请求CPU就响应，而是CPU在接收到DMA请求后，在该系统总线周期结束后进行响应，因为DMA控制器在需要的时候会代替CPU作为总线主设备，在不受CPU干预的情况下，控制I/O设备与系统主存之间的直接数据传输</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件设计师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Python」Python基础</title>
      <link href="/6bfadb596c5e.html"/>
      <url>/6bfadb596c5e.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法">基础语法</h2><h3 id="字面量">字面量</h3><ol><li>字面量：在代码中被写下来的固定的值</li><li>常用值（数据）的类型</li></ol><table><thead><tr><th>类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>数字(Number)</td><td>- 整数(int)<br>- 浮点数(float)<br>- 复数(complex)<br>- 布尔(bool)</td><td></td></tr><tr><td>字符串(String)</td><td>描述文本的一种数据类型</td><td>程序中需要添加引号</td></tr><tr><td>列表(List)</td><td>有序的可变序列</td><td>Python中使用最频繁的数据类型</td></tr><tr><td>元组(Tuple)</td><td>有序的不可变序列</td><td></td></tr><tr><td>集合(Set)</td><td>无序不重复集合</td><td></td></tr><tr><td>字典(Dictionary)</td><td>无序Key-Value集合</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">字面量  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Author：binxin  </span></span><br><span class="line"><span class="string">Date：2023/10/26 19:20  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="number">666</span>  </span><br><span class="line"><span class="number">13.14</span>  </span><br><span class="line"><span class="string">&quot;黑马程序员&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;黑马程序员&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="注释">注释</h3><ol><li>注释：在程序代码中对程序代码进行解释说明的文字</li><li>作用：注释不是程序，不能被执行，只是对程序代码进行解释说明，能够大大增强代码的可读性</li><li>分类：<ol><li>单行注释:以 # 开头，# 右边 的所有文字当作说明，而不是真正要执行的程序，起辅助说明作用</li><li>多行注释: 以一对三个双引号引起来 (“”“注释内容”“”)来解释说明一段代码的作用使用方法</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">注释  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Author：binxin  </span></span><br><span class="line"><span class="string">Date：2023/10/26 19:28  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 写一个整数字面量  </span></span><br><span class="line"><span class="number">666</span>  </span><br><span class="line"><span class="comment"># 写一个浮点数字面量  </span></span><br><span class="line"><span class="number">13.14</span>  </span><br><span class="line"><span class="comment"># 写一个字符串字面量  </span></span><br><span class="line"><span class="string">&quot;黑马程序员&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 通过print语句输出各类字面量  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;黑马程序员&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="变量">变量</h3><ol><li>变量：在程序运行时，能储存计算结果或能表示值的抽象概念</li><li>变量的定义格式：<code>变量名称=变量的值</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/26 19:35</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量，用于记录钱包的余额</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line"><span class="comment"># 通过print语句，输出变量记录的内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>, money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 买了一个冰淇淋，花费了10元</span></span><br><span class="line">money = money - <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;买了冰淇凌花了10元，还剩余：&quot;</span>, money,<span class="string">&quot;元&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设，每隔一小时，输出一下钱包的余额</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午1点，钱包的余额为：&quot;</span>,money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午2点，钱包的余额为：&quot;</span>,money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午3点，钱包的余额为：&quot;</span>,money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是下午4点，钱包的余额为：&quot;</span>,money)</span><br></pre></td></tr></table></figure><h3 id="数据类型">数据类型</h3><ol><li>type()语句<ol><li>语法：<code>type(被查看类型的数据)</code></li></ol></li><li>type()语句的使用方式<ol><li>在print语句中直接输出类型信息</li><li>用变量存储type()的结果（返回值）</li><li>查看变量中存储的数据类型信息<ol><li>查看的是数据的类型，变量无类型</li></ol></li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/27 20:35</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：使用print直接输出类型信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;黑马程序员&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">666</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">11.345</span>))</span><br><span class="line"><span class="comment"># 方式2：使用变量存储type()语句的结果</span></span><br><span class="line">string_type = <span class="built_in">type</span>(<span class="string">&quot;黑马程序员&quot;</span>)</span><br><span class="line">int_type = <span class="built_in">type</span>(<span class="number">666</span>)</span><br><span class="line">float_type = <span class="built_in">type</span>(<span class="number">11.345</span>)</span><br><span class="line"><span class="built_in">print</span>(string_type)</span><br><span class="line"><span class="built_in">print</span>(int_type)</span><br><span class="line"><span class="built_in">print</span>(float_type)</span><br><span class="line"><span class="comment"># 方式3：使用type()语句，查看变量中存储的数据类型信息</span></span><br><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line">name_type = <span class="built_in">type</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name_type)</span><br></pre></td></tr></table></figure><h3 id="数据类型转换">数据类型转换</h3><ol><li>常见的转换语句：都有返回值</li></ol><table><thead><tr><th>语句(函数)</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将x转换为一个字符串</td></tr></tbody></table><ol><li>想要将字符串转换成数字，必须要求字符串内的内容都是数字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据类型转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/27 20:53</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 将数字类型转换为字符串</span></span><br><span class="line">num_str = <span class="built_in">str</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num_str), num_str)</span><br><span class="line"></span><br><span class="line">float_str = <span class="built_in">str</span>(<span class="number">11.345</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_str), float_str)</span><br><span class="line"><span class="comment"># 将字符串转换成数字</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="string">&quot;11&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num), num)</span><br><span class="line"></span><br><span class="line">num2 = <span class="built_in">float</span>(<span class="string">&quot;11.345&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num2), num2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="comment"># num3 = int(&quot;黑马程序员&quot;)</span></span><br><span class="line"><span class="comment"># print(type(num3),num3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数转浮点数</span></span><br><span class="line">float_num = <span class="built_in">float</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_num), float_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数转整数</span></span><br><span class="line">int_num=<span class="built_in">int</span>(<span class="number">11.345</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(int_num),int_num)</span><br></pre></td></tr></table></figure><h3 id="标识符">标识符</h3><ol><li>标识符:是用户在编程的时候所使用的一系列名字，用于给变量、类、方法等命名</li><li>标识符命名规则<ol><li>内容限定：只允许使用英文、中文、数字、下划线<ol><li>不推荐使用中文</li><li>数字不能做开头</li></ol></li><li>大小写敏感：字母的大写和小写，是完全能够区分的</li><li>不可使用关键字</li></ol></li><li>变量的命名规范<ol><li>见名知意</li><li>下划线命名法：多个单词组合变量名，要使用下划线做分隔</li><li>英文字母全小写</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">标识符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/28 19:13</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容限定</span></span><br><span class="line"><span class="comment"># 错误的代码示范</span></span><br><span class="line"><span class="comment"># 1_name = &quot;张三&quot;</span></span><br><span class="line"><span class="comment"># name_ != &quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line">name_ = <span class="string">&quot;张三&quot;</span></span><br><span class="line">_name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">name_1 = <span class="string">&quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写敏感</span></span><br><span class="line">Itheima = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line">itheima = <span class="string">&quot;666&quot;</span></span><br><span class="line"><span class="built_in">print</span>(Itheima, itheima)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可使用关键字</span></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="comment"># class =1</span></span><br><span class="line"><span class="comment"># def =1</span></span><br><span class="line">Class = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><ol><li>算术（数学）运算符</li></ol><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>//</td><td>取整除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>**</td><td>指数</td></tr></tbody></table><ol><li>赋值运算符：<code>=</code></li><li>复合赋值表达式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运算符</span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/10/28 19:27</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算术(数学)运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1+1=&quot;</span>, <span class="number">1</span> + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2-1=&quot;</span>, <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3*3=&quot;</span>, <span class="number">3</span> * <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;4/2=&quot;</span>, <span class="number">4</span> / <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;11//2=&quot;</span>, <span class="number">11</span> // <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9%2=&quot;</span>, <span class="number">9</span> % <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2**2=&quot;</span>, <span class="number">2</span> ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值运算符</span></span><br><span class="line">num = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="字符串扩展">字符串扩展</h3><p><strong>字符串的三种定义方式</strong></p><ol><li>单引号定义法：name = ‘黑马程序员’</li><li>双引号定义法：name = “黑马程序员”</li><li>三引号定义法：name = “”“黑马程序员”“”</li><li>字符串的引号嵌套<ol><li>单引号定义法，可以内含双引号</li><li>双引号定义法，可以内含单引号</li><li>可以使用转移字符 <code>\</code> 来将引号解除效用，变成普通字符串</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单引号定义法</span></span><br><span class="line">name = <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 双引号定义法：</span></span><br><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 三引号定义法</span></span><br><span class="line">name = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">黑马</span></span><br><span class="line"><span class="string">程序员</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在字符串内包含双引号</span></span><br><span class="line">name = <span class="string">&#x27;&quot;黑马程序员&quot;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 在字符串内包含单引号</span></span><br><span class="line">name = <span class="string">&quot;&#x27;黑马程序员&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line"><span class="comment"># 使用转义字符 \ 接触引号效用</span></span><br><span class="line">name = <span class="string">&quot;\&quot;黑马程序员\&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br><span class="line">name = <span class="string">&#x27;\&#x27;黑马程序员\&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name), name)</span><br></pre></td></tr></table></figure><p><strong>字符串拼接</strong></p><ol><li>如果我们有两个字符串(文本)字面量，可以将其拼接成一个字符串，通过+号即可完成</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字面量之间的拼接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pin&quot;</span> + <span class="string">&quot;hsin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串字面和和字符串变量之间的拼接</span></span><br><span class="line">name = <span class="string">&quot;pinhsin&quot;</span></span><br><span class="line">point = <span class="string">&quot;学python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是&quot;</span> + name + <span class="string">&quot;，我在&quot;</span> + point)</span><br></pre></td></tr></table></figure><p><strong>字符串格式化</strong></p><ol><li>多个变量占位变量要用括号括起来，并按照占位的顺序填入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过占位的形式完成拼接</span></span><br><span class="line">name = <span class="string">&quot;黑马程序员&quot;</span></span><br><span class="line">message = <span class="string">&quot;学IT来：%s&quot;</span> % name</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过占位的形式，完成数字和字符串的拼接</span></span><br><span class="line">class_num = <span class="number">57</span></span><br><span class="line">avg_salary = <span class="number">16781</span></span><br><span class="line">message = <span class="string">&quot;Python大数据学科，北京%sq期，毕业平均工资：%s&quot;</span> % (class_num, avg_salary)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><ol><li>语法：f&quot;内容{变量}&quot;<ol><li>不限数据类型，不做精度控制</li></ol></li></ol><p><strong>格式化的精度控制</strong></p><ol><li>使用辅助符号&quot;m.n&quot;来控制数据的宽度和精度<ol><li>m：控制宽度，要求是数字(很少使用)，设置的宽度小于数字自身，不生效</li><li>.n：控制小数点精度，要求是数字，会进行小数的四舍五入</li></ol></li></ol><p><strong>对表达式进行格式化</strong></p><ol><li>表达式：一条具有明确执行结果的代码语句</li><li>格式化同字符串格式化</li></ol><h3 id="数据输入">数据输入</h3><ol><li>input()语句<ol><li>括号内可以填入提示内容</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author：binxin</span></span><br><span class="line"><span class="string">Date：2023/11/10 14:21</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请告诉我你是谁？&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我知道了，你是%s&quot;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数字类型</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;银行卡密码：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 数据类型转换</span></span><br><span class="line">num = <span class="built_in">int</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br></pre></td></tr></table></figure><h2 id="数据类型进阶">数据类型进阶</h2><h3 id="列表">列表</h3><p><strong>添加元素</strong></p><ol><li>append：在末尾添加元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量A，默认有3个元素</span></span><br><span class="line">A = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐添加之前，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br><span class="line"><span class="comment">#提示、并添加元素</span></span><br><span class="line">temp = <span class="built_in">input</span>(<span class="string">&#x27;请输入要添加的学生姓名:&#x27;</span>)</span><br><span class="line">A.append(temp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐添加之后，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br></pre></td></tr></table></figure><ol><li>insert(index, object)：在指定位置index前插入元素object</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strs = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">strs.insert(<span class="number">3</span>,<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(strs)  <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;h&#x27;, &#x27;s&#x27;]</span></span><br></pre></td></tr></table></figure><ol><li>extend：通过extend可以将另一个列表中的元素逐一添加到列表中</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">b = [<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;] 将 b 添加到 a 里</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;] b的内容不变</span></span><br></pre></td></tr></table></figure><p><strong>修改元素</strong><br>通过指定下标来访问列表元素，因此修改元素的时候，为指定的列表下标赋值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量A，默认有3个元素</span></span><br><span class="line">A = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐修改之前，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br><span class="line"><span class="comment">#修改元素</span></span><br><span class="line">A[<span class="number">1</span>] = <span class="string">&#x27;xiaoLu&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐‐‐‐‐修改之后，列表A的数据‐‐‐‐‐A=%s&quot;</span> % A)</span><br></pre></td></tr></table></figure><p><strong>查找元素</strong></p><ol><li>in（存在）,如果存在那么结果为true，否则为false</li><li>not in（不存在），如果不存在那么结果为true，否则false</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#待查找的列表</span></span><br><span class="line">nameList = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"><span class="comment">#获取用户要查找的名字</span></span><br><span class="line">findName = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查找的姓名:&#x27;</span>)</span><br><span class="line"><span class="comment">#查找是否存在</span></span><br><span class="line"><span class="keyword">if</span> findName <span class="keyword">in</span> nameList:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;在列表中找到了相同的名字&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;没有找到&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><ol><li>del：根据下标进行删除</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movieName = [<span class="string">&#x27;加勒比海盗&#x27;</span>,<span class="string">&#x27;骇客帝国&#x27;</span>,<span class="string">&#x27;第一滴血&#x27;</span>,<span class="string">&#x27;指环王&#x27;</span>,<span class="string">&#x27;霍比特人&#x27;</span>,<span class="string">&#x27;速度与激情&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之前‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br><span class="line"><span class="keyword">del</span> movieName[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之后‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br></pre></td></tr></table></figure><ol start="2"><li>pop：删除最后一个元素</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movieName = [&#x27;加勒比海盗&#x27;,&#x27;骇客帝国&#x27;,&#x27;第一滴血&#x27;,&#x27;指环王&#x27;,&#x27;霍比特人&#x27;,&#x27;速度与激情&#x27;]</span><br><span class="line">print(&#x27;‐‐‐‐‐‐删除之前‐‐‐‐‐‐movieName=%s&#x27; % movieName)</span><br><span class="line">movieName.pop()</span><br><span class="line">print(&#x27;‐‐‐‐‐‐删除之后‐‐‐‐‐‐movieName=%s&#x27; % movieName)</span><br></pre></td></tr></table></figure><ol start="3"><li>remove：根据元素的值进行删除，只会删除第一个相同的元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movieName = [<span class="string">&#x27;加勒比海盗&#x27;</span>,<span class="string">&#x27;骇客帝国&#x27;</span>,<span class="string">&#x27;第一滴血&#x27;</span>,<span class="string">&#x27;指环王&#x27;</span>,<span class="string">&#x27;霍比特人&#x27;</span>,<span class="string">&#x27;速度与激情&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之前‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br><span class="line">movieName.remove(<span class="string">&#x27;指环王&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;‐‐‐‐‐‐删除之后‐‐‐‐‐‐movieName=%s&#x27;</span> % movieName)</span><br></pre></td></tr></table></figure><h3 id="元组">元组</h3><ol><li>Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号</li><li>访问元组</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="string">&#x27;hello&#x27;</span>, <span class="number">100</span>, <span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><ol start="3"><li>定义只有一个元素的元组，需要在唯一的元素后写一个逗号</li></ol><h3 id="切片">切片</h3><ol><li>切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作</li><li>语法：<code>[起始:结束:步长]</code>，也可以简化使用 <code>[起始:结束]</code><ol><li>选取的区间从&quot;起始&quot;位开始，到&quot;结束&quot;位的前一位结束（不包含结束位本身)，步长表示选取间隔</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引是通过下标取某一个元素</span></span><br><span class="line"><span class="comment"># 切片是通过下标去某一段元素</span></span><br><span class="line">s = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">4</span>])  <span class="comment"># o 字符串里的第4个元素</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:<span class="number">7</span>])  <span class="comment"># lo W 包含下标 3，不含下标 7</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:])  <span class="comment"># ello World! 从下标为1开始，取出 后面所有的元素（没有结束位）</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">4</span>])  <span class="comment"># Hell 从起始位置开始，取到 下标为4的前一个元素（不包括结束位本身）</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># el 从下标为1开始，取到下标为5的前一个元素，步长为2（不包括结束位本身）</span></span><br></pre></td></tr></table></figure><h3 id="字典">字典</h3><p><strong>查看元素</strong><br>除了使用key查找数据，还可以使用get来获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(info[<span class="string">&#x27;age&#x27;</span>])  <span class="comment"># 获取年龄</span></span><br><span class="line"><span class="comment"># print(info[&#x27;sex&#x27;]) # 获取不存在的key，会发生异常</span></span><br><span class="line"><span class="built_in">print</span>(info.get(<span class="string">&#x27;sex&#x27;</span>))  <span class="comment"># 获取不存在的key，获取到空的内容，不会出现异常</span></span><br><span class="line"><span class="built_in">print</span>(info.get(<span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>))  <span class="comment"># 获取不存在的key, 可以提供一个默认值。</span></span><br></pre></td></tr></table></figure><p><strong>修改元素</strong><br>字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改之前的字典为 %s:&#x27;</span> % info)    <span class="comment"># 修改之前的字典为 &#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;:</span></span><br><span class="line">info[<span class="string">&#x27;id&#x27;</span>] = <span class="number">200</span>  <span class="comment"># 为已存在的键赋值就是修改</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改之后的字典为 %s:&#x27;</span> % info)    <span class="comment"># 修改之后的字典为 &#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 200&#125;:</span></span><br></pre></td></tr></table></figure><p><strong>添加元素</strong><br>如果在使用 <code>变量名['键'] = 数据</code> 时，这个“键”在字典中不存在，那么就会新增这个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加之前的字典为:%s&#x27;</span> % info)  <span class="comment"># 添加之前的字典为:&#123;&#x27;name&#x27;: &#x27;班长&#x27;&#125;</span></span><br><span class="line">info[<span class="string">&#x27;id&#x27;</span>] = <span class="number">100</span>  <span class="comment"># 为不存在的键赋值就是添加元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加之后的字典为:%s&#x27;</span> % info)  <span class="comment"># 添加之后的字典为:&#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;</span></span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><ol><li>del：删除指定的元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除前,%s&#x27;</span> % info)  <span class="comment"># 删除前,&#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;</span></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># del 可以通过键删除字典里的指定元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除后,%s&#x27;</span> % info)  <span class="comment"># 删除后,&#123;&#x27;id&#x27;: 100</span></span><br></pre></td></tr></table></figure><ol start="2"><li>del：删除整个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除前,%s&#x27;</span> % info)</span><br><span class="line"><span class="keyword">del</span> info  <span class="comment"># del 也可以直接删除变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除后,%s&#x27;</span> % info)</span><br></pre></td></tr></table></figure><ol start="3"><li>clear：清空整个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;清空前,%s&#x27;</span> % info)  </span><br><span class="line">info.clear()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;清空后,%s&#x27;</span> % info) <span class="comment"># 清空后,&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>字典的遍历</strong></p><ol><li>遍历字典的key（键）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> info.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># id</span></span><br></pre></td></tr></table></figure><ol start="2"><li>遍历字典的value（值）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> info.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># monitor</span></span><br><span class="line"><span class="comment"># 100</span></span><br></pre></td></tr></table></figure><ol start="3"><li>遍历字典的项（元素）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (&#x27;name&#x27;, &#x27;monitor&#x27;)</span></span><br><span class="line"><span class="comment"># (&#x27;id&#x27;, 100)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>遍历字典的key-value（键值对）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;key=<span class="subst">&#123;key&#125;</span>,value=<span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key=name,value=monitor</span></span><br><span class="line"><span class="comment"># key=id,value=100</span></span><br></pre></td></tr></table></figure><h2 id="文件">文件</h2><h3 id="文件的打开与关闭">文件的打开与关闭</h3><p><strong>打开文件/创建文件</strong></p><ol><li>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件</li><li>语法：<code>open(文件路径，访问模式)</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>访问模式</strong></p><table><thead><tr><th>访问模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，则报错。这是默认模式</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写</td></tr></tbody></table><p><strong>关闭文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件，文件名为:test.txt</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 关闭这个文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="文件的读写">文件的读写</h3><p><strong>写数据(write)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  </span><br><span class="line">f.write(<span class="string">&#x27;hello world, i am here!\n&#x27;</span> * <span class="number">5</span>)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>读数据</strong></p><ol><li>read：使用read(num)可以从文件中读取数据，num表示要从文件中读取的数据的长度（单位是字节），如果没有传入 num，那么就表示读取文件中所有的数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">content = f.read(<span class="number">5</span>) <span class="comment"># 最多读取5个数据  </span></span><br><span class="line"><span class="built_in">print</span>(content)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;‐&quot;</span> * <span class="number">30</span>) <span class="comment"># 分割线，用来测试  </span></span><br><span class="line">content = f.read() <span class="comment"># 从上次读取的位置继续读取剩下的所有的数据  </span></span><br><span class="line"><span class="built_in">print</span>(content)  </span><br><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><blockquote><p>如果用 open 打开文件时，如果使用的&quot; r &quot;，那么可以省略 <code>open('test.txt')</code></p></blockquote><ol><li>readline：只用来读取一行数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">content = f.readline()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1:%s&quot;</span> % content)  </span><br><span class="line">content = f.readline()  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2:%s&quot;</span> % content)  </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ol><li>readlines：可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行为列表的一个元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">content = f.readlines()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(content))</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> content:</span><br><span class="line">    <span class="built_in">print</span>(temp)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="序列化和反序列化">序列化和反序列化</h3><blockquote><ul><li>序列化：对象-&gt;字节序列</li><li>反序列化：字节序列-&gt;对象</li></ul></blockquote><p><strong>使用JSON实现序列化</strong></p><ol><li>dumps：把对象转换成为字符串，它本身不具备将数据写入到文件的功能</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;names.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">names = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;henry&#x27;</span>, <span class="string">&#x27;merry&#x27;</span>, <span class="string">&#x27;chris&#x27;</span>]</span><br><span class="line"><span class="comment"># file.write(names)  出错，不能直接将列表写入到文件里</span></span><br><span class="line"><span class="comment"># 可以调用 json的dumps方法，传入一个对象参数</span></span><br><span class="line">result = json.dumps(names)</span><br><span class="line"><span class="comment"># dumps 方法得到的结果是一个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 可以将字符串写入到文件里</span></span><br><span class="line">file.write(result)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><ol start="2"><li>dump：可以在将对象转换成为字符串的同时，指定一个文件对象，把转换后的字符串写入到这个文件里</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;names.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">names = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;jerry&#x27;</span>, <span class="string">&#x27;henry&#x27;</span>, <span class="string">&#x27;merry&#x27;</span>, <span class="string">&#x27;chris&#x27;</span>]</span><br><span class="line"><span class="comment"># dump方法可以接收一个文件参数，在将对象转换成为字符串的同时写入到文件里</span></span><br><span class="line">json.dump(names, file)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>使用JSON实现反序列化</strong></p><ol><li>loads：需要一个字符串参数，用来将一个字符串加载成为Python对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用loads方法，传入一个字符串，可以将这个字符串加载成为Python对象</span></span><br><span class="line">result = json.loads(<span class="string">&#x27;[&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;, &quot;jerry&quot;, &quot;henry&quot;, &quot;merry&quot;, &quot;chris&quot;]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ol><li>load：可以传入一个文件对象，用来将一个文件对象里的数据加载成为Python对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以可读方式打开一个文件</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;names.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment"># 调用load方法，将文件里的内容加载成为一个Python对象</span></span><br><span class="line">result = json.load(file)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><h2 id="异常">异常</h2><ol><li><p>在读取一个文件时，如果这个文件不存在，则会报出FileNotFoundError错误</p></li><li><p>try…except语句</p><ol><li>语法</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   可能会出现异常的代码块</span><br><span class="line"><span class="keyword">except</span> 异常的类型:</span><br><span class="line">   出现异常以后的处理语句</span><br></pre></td></tr></table></figure><ol start="2"><li>示例</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件没有找到,请检查文件名称是否正确&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Java从入门到精通」Java语言概述</title>
      <link href="/7ddf46a04c61.html"/>
      <url>/7ddf46a04c61.html</url>
      
        <content type="html"><![CDATA[<h2 id="计算机的硬件">计算机的硬件</h2><ol><li>CPU</li><li>内存</li><li>存储设备</li><li>输入设备</li><li>输出设备</li><li>通信设备</li></ol><h2 id="常见的DOS命令">常见的DOS命令</h2><ol><li>进入和回退</li></ol><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">盘符名称:</td><td style="text-align:left">盘符切换。D:，表示切换到D盘</td></tr><tr><td style="text-align:left">dir</td><td style="text-align:left">列出当前目录下的文件及文件夹</td></tr><tr><td style="text-align:left">cd 目录</td><td style="text-align:left">进入指定单级目录文件夹</td></tr><tr><td style="text-align:left">cd 目录1\目录2\…</td><td style="text-align:left">进入指定多级目录</td></tr><tr><td style="text-align:left">cd…</td><td style="text-align:left">回退到上一级目录</td></tr><tr><td style="text-align:left">cd / 或cd \</td><td style="text-align:left">回退到盘符目录</td></tr></tbody></table><ol><li>增删</li></ol><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">md 文件目录名</td><td style="text-align:left">创建指定的文件目录</td></tr><tr><td style="text-align:left">rd 文件目录名</td><td style="text-align:left">删除指定的文件目录（文件目录内有数据则无法删除）</td></tr></tbody></table><ol><li>其他</li></ol><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">cls</td><td style="text-align:left">清屏</td></tr><tr><td style="text-align:left">exit</td><td style="text-align:left">退出命令提示符窗口</td></tr><tr><td style="text-align:left">← →</td><td style="text-align:left">移动光标</td></tr><tr><td style="text-align:left">↑↓</td><td style="text-align:left">调阅历史操作命令</td></tr><tr><td style="text-align:left">Backspace和Delete</td><td style="text-align:left">删除字符</td></tr></tbody></table><h2 id="HelloWorld的编写和执行">HelloWorld的编写和执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloChina</span>&#123;  <span class="comment">//class：关键字，表示“类”，后面跟着类名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello,world!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Java程序编写的过程<ol><li>编写：.java源文件</li><li>编译：<code>javac java源文件.java</code></li><li>运行：<code>java 文件名</code></li></ol></li></ol><blockquote><ul><li>Java程序严格区分大小写；</li><li>每一行执行语句以“;”结尾</li><li>一个源文件中可以声明多个类，但是最多只能有一个类使用public进行声明，且要求声明为public的类的类名与源文件相同</li></ul></blockquote><h2 id="单行注释和多行注释的使用">单行注释和多行注释的使用</h2><ol><li>单行注释</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释文字</span></span><br></pre></td></tr></table></figure><ol start="2"><li>多行注释</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释文字1</span></span><br><span class="line"><span class="comment">注释文字2</span></span><br><span class="line"><span class="comment">注释文字3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>文档注释<ol><li>文档注释的内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档</li><li>操作方法： <code>javadoc -d mydoc -author -version HelloWorld.java</code></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> 指定Java程序的作者</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 指定源文件的版本</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」字符型数据</title>
      <link href="/8ce8ea82eb87.html"/>
      <url>/8ce8ea82eb87.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符型常量">字符型常量</h2><h3 id="字符常量">字符常量</h3><ol><li>单引号中的大写字母和小写字母代表不同的字符常量</li><li>单引号中的空格符也是一个字符常量</li><li>字符常量只能包含一个字符</li><li>字符常量只能用单引号括起来，不能用双引号括起来</li><li>字符常量在内存中占一个字节，存放的是字符的ASCII代码值</li></ol><h3 id="转义字符常量">转义字符常量</h3><table><thead><tr><th style="text-align:left">字符形式</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">\n</td><td style="text-align:left">回车换行</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">横向跳若干个（Tab键）</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">竖向跳格</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车符</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">换页符</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格符（Backspace键）</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">反斜杠字符“\”</td></tr><tr><td style="text-align:left">'</td><td style="text-align:left">单引号字符</td></tr><tr><td style="text-align:left">&quot;</td><td style="text-align:left">双引号字符</td></tr><tr><td style="text-align:left">\ddd</td><td style="text-align:left">三位八进制数代表的一个ASCII字符</td></tr><tr><td style="text-align:left">\xhh</td><td style="text-align:left">二位十六进制数代表的一个ASCII字符</td></tr><tr><td style="text-align:left">\0</td><td style="text-align:left">空值，其ASCII码值为0</td></tr></tbody></table><ol><li>转义字符常量只代表一个字符</li><li>反斜线后的八进制数可以不带0开头</li><li>在一对单引号内，可以用反斜线后跟一个十六进制数来表示一个ASCII字符</li></ol><h3 id="字符串常量">字符串常量</h3><ol><li>定义：由双引号括起来的一串字符</li><li>在C语言中，系统在每个字符串的最后自动加入一个字符 <code>'\0'</code> 作为字符串的结束标志</li></ol><h3 id="可对字符量进行的运算">可对字符量进行的运算</h3><ol><li>字符量可参加任何整数运算</li></ol><h2 id="字符变量">字符变量</h2><ol><li>C语言中，字符变量用关键字char定义，在定义的同时可以赋初值</li><li>占一个字节</li><li>字符变量可以作为整型变量来处理，可以参与对整型变量所允许的任何运算</li></ol><h2 id="字符的输入和输出">字符的输入和输出</h2><h3 id="调用printf和scanf函数输出和输入字符">调用printf和scanf函数输出和输入字符</h3><ol><li>调用函数进行输入和输出时，必须在程序的开头出现包含头文件stdio.h的命令行：<code>#include &lt;stdio.h&gt;</code></li></ol><h3 id="调用putchar和getchar函数输出和输入字符">调用putchar和getchar函数输出和输入字符</h3><ol><li>putchar函数用于输出字符，调用形式：<code>putchar(ch)</code><ol><li>ch可以是字符常量也可以是字符变量</li></ol></li><li>getchar函数用于输入字符，调用形式：<code>ch=getchar()</code></li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出26个大写字母和它们的ASCII代码，每行输出两组数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i=i+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c %d %c %d\n&quot;</span>, c + i, c + i, c + i + <span class="number">1</span>, c + i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从终端输入一个字符，当按Enter键时，程序才继续往下进行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把从终端输入的一行字符中所有小写字母转换为大写字母，其他字符不变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">            ch = ch - <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">统计输入的字符中空格符、换行符和横向跳格（制表）符的个数，用！结束输入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27; &#x27;</span>||ch==<span class="string">&#x27;\n&#x27;</span>||ch==<span class="string">&#x27;\t&#x27;</span>)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把一串密文译成明文，密文以字符@表示结束，译码规则如下：</span></span><br><span class="line"><span class="comment">（1）如果是字母，转换成字母序列的下一个字母。如A译成B</span></span><br><span class="line"><span class="comment">（2）如果是字母Z，译成A</span></span><br><span class="line"><span class="comment">（3）无论是大小写字母都译成小写字母</span></span><br><span class="line"><span class="comment">（4）其他字符一律照原样译出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(ch))&#123;    <span class="comment">/*isalpha(ch)判断ch中的字符是否为字母，如果是，函数值为1*/</span></span><br><span class="line">            ch = <span class="built_in">tolower</span>(ch);   <span class="comment">/*把大写字母转为小写字母*/</span></span><br><span class="line">            ch = (ch - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」循环结构</title>
      <link href="/c100f34d4b56.html"/>
      <url>/c100f34d4b56.html</url>
      
        <content type="html"><![CDATA[<h2 id="while语句和用while语句构成的循环结构">while语句和用while语句构成的循环结构</h2><ol><li>一般形式：<code>while(表达式) 循环体</code><ol><li>表达式不能为空</li></ol></li></ol><h2 id="do-while语句和用do-while语句构成的循环结构">do-while语句和用do-while语句构成的循环结构</h2><ol><li>一般形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">while</span>(表达式);</span><br></pre></td></tr></table></figure><ol start="2"><li>do必须和while联合使用</li></ol><h2 id="for语句和用for语句构成的循环结构">for语句和用for语句构成的循环结构</h2><ol><li>一般形式：<code>for(表达式1;表达式2;表达式3) 循环体</code></li><li>执行过程<ol><li>计算表达式1</li><li>计算表达式2.若其值为非0，转步骤3；若其值为0，转步骤5</li><li>执行一次for循环体</li><li>计算表达式3，转向步骤2</li><li>结束循环</li></ol></li><li>for语句中的表达式可以部分或全部省略，但两个“;”不可以省略</li></ol><h2 id="循环结构的嵌套">循环结构的嵌套</h2><ol><li>嵌套循环：在一个循环体内又完整地包含了另一个循环</li></ol><h2 id="break和continue语句在循环体中的作用">break和continue语句在循环体中的作用</h2><ol><li>break语句只能在循环体内和switch语句体内使用</li><li>continue语句的作用是跳过本次循环体中余下尚未执行的语句，立刻进行下一次的循环条件判定</li></ol><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从输入的若干个正整数中选出最大值，用-1结束输入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> max, n;</span><br><span class="line">    max=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入数据，用-1结束输入：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span>(max&lt;n)&#123;</span><br><span class="line">            max = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (n != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%d&quot;</span>, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用迭代法求某数a的平方根。已知求平方根的迭代公式为x1=（x0+a/x0）/2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> x0, x1, a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a);</span><br><span class="line">    x0 = a / <span class="number">2</span>;</span><br><span class="line">    x1 = (x0 + a / x0) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        x0 = x1;</span><br><span class="line">        x1 = (x0 + a / x0) / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (a &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">fabs</span>(x1 - x0) &gt; <span class="number">1e-6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x=%f&quot;</span>, x1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」选择结构</title>
      <link href="/9bd95ab60051.html"/>
      <url>/9bd95ab60051.html</url>
      
        <content type="html"><![CDATA[<h2 id="关系运算和逻辑运算">关系运算和逻辑运算</h2><h3 id="C语言的逻辑值">C语言的逻辑值</h3><ol><li>在C语言中，用非0表示“真”，用0表示“假”</li></ol><h3 id="关系运算符和关系表达式">关系运算符和关系表达式</h3><ol><li>6种关系运算符<ol><li>小于 &lt;</li><li>大于 &gt;</li><li>等于 ==</li><li>小于或等于 &lt;=</li><li>大于或等于 &gt;=</li><li>不等于 !=</li></ol></li><li>由两个字符组成的运算符之间不允许有空格</li><li>关系运算符是双目运算符，具有自左至右的结合性</li><li>关系运算的值为“逻辑值”，只有可能是整数0或1</li></ol><h3 id="逻辑运算符和逻辑表达式">逻辑运算符和逻辑表达式</h3><p><strong>逻辑运算符</strong></p><ol><li>三种逻辑运算符<ol><li>逻辑与 &amp;&amp;</li><li>逻辑或 ||</li><li>逻辑非 !</li></ol></li><li>&amp;&amp;和||为双目运算符，!为单目运算符，出现在运算对象的左边。结合方向自左至右</li></ol><p><strong>逻辑表达式和逻辑表达式的值</strong></p><ol><li>逻辑表达式的运算结果为1或0</li><li>由&amp;&amp;或||构成的逻辑表达式，在特定情况下会产生“短路”现象</li></ol><h2 id="if语句和用if语句构成的选择结构">if语句和用if语句构成的选择结构</h2><h3 id="if语句">if语句</h3><ol><li>基本形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) 语句    /\* 不含<span class="keyword">else</span>子句的<span class="keyword">if</span>语句 \*/</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(表达式) 语句<span class="number">1</span>    /\* 含<span class="keyword">else</span>子句的<span class="keyword">if</span>语句 \*/</span><br><span class="line"><span class="keyword">else</span> 语句<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="嵌套的if语句">嵌套的if语句</h3><ol><li>语句形式</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(表达式<span class="number">2</span>) 语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>else子句总是与前面最近的不带else的if相结合</li></ol><h2 id="条件表达式构成的选择结构">条件表达式构成的选择结构</h2><ol><li>条件运算符：<code>? :</code> ,C语言提供的唯一的三目运算符</li><li>右条件运算符构成的条件表达式：<code>表达式1 ? 表达式2 : 表达式3</code></li><li>运算功能：当表达式1的值为非零时，求出表达式2的值为整个表达式的值；当表达式1的值为零时，求出表达式3的值为整个表达式的值</li></ol><h2 id="switch语句以及用switch语句和break语句构成的选择结构">switch语句以及用switch语句和break语句构成的选择结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">1</span>:语句<span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">2</span>:语句<span class="number">2</span></span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line">·</span><br><span class="line"><span class="keyword">case</span> 常量表达式n:语句n</span><br><span class="line"><span class="keyword">default</span>        :语句n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>关键字case和常量表达式之间一定要有空格</li><li>通常在case之后的语句最后加上break语句，每当执行到break语句时，立即跳出switch语句体</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」顺序结构</title>
      <link href="/1c4fbf64698f.html"/>
      <url>/1c4fbf64698f.html</url>
      
        <content type="html"><![CDATA[<h2 id="赋值语句">赋值语句</h2><ol><li>赋值语句（表达式语句）：在赋值表达式的尾部加上“;”</li></ol><h2 id="数据输出">数据输出</h2><h3 id="printf函数的一般调用形式">printf函数的一般调用形式</h3><ol><li>调用形式：<code>printf(格式控制，输出项1，输出项2，···)</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><h3 id="printf函数中常用的格式说明">printf函数中常用的格式说明</h3><blockquote><p>每个格式说明都必须用“%”开头，以一个格式字符作为结束，在此之间可以根据需要插入“宽度说明”、左对齐符号“-”、前导零符号“0”</p></blockquote><ol><li>格式字符</li></ol><table><thead><tr><th style="text-align:left">格式字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">c</td><td style="text-align:left">输出一个字符</td></tr><tr><td style="text-align:left">d或i</td><td style="text-align:left">输出带符号的十进制整型数。%ld为长整型，%hd为短整型，%I64d为64位长整数</td></tr><tr><td style="text-align:left">o</td><td style="text-align:left">以八进制格式输出整型数。%#o加先导0</td></tr><tr><td style="text-align:left">x或X</td><td style="text-align:left">以十六进制格式输出整型数。%#x或%#X输出带先导0x或0X的十六进制数</td></tr><tr><td style="text-align:left">u</td><td style="text-align:left">以无符号十进制形式输出整型数</td></tr><tr><td style="text-align:left">f</td><td style="text-align:left">以带小数点的数学形式输出浮点数（单精度和双精度数）</td></tr><tr><td style="text-align:left">e或E</td><td style="text-align:left">以指数形式输出浮点是（单精度和双精度数）</td></tr><tr><td style="text-align:left">g或G</td><td style="text-align:left">有系统决定采用%f还是采用%e（或%E）格式输出，以使输出宽度最小</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">输出一个字符串，直到遇到“\0”</td></tr><tr><td style="text-align:left">p</td><td style="text-align:left">输出变量的内存地址</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">输出一个%</td></tr></tbody></table><ol start="2"><li>输出数据所占宽度说明<ol><li>在%和格式字符之间插入一个整数常量来指定输出的宽度。如果指定的宽度超过输出数据的实际宽度，输出时将会右对齐，左边补上空格</li><li>对于float和double类型的实数，可以用“n1.n2”的形式来指定输出宽度（n1和n2分别代表一个整常数），其中n1指定输出数据的宽度（包括小数点），n2指定小数点后小数位的位数，n2也称精度<ol><li>对于f、e或E，当输出数据的小数位数多于n2位时，截去右边多余小数，并对截去部分的第一位小数做四舍五入处理；当输出数据的小数位少于n2时，在小数最右边补0</li><li>也可用“.n2”格式，不指定总宽度；如果指定“n1.0”或“.0”格式，则不输出小数点和小数部分</li><li>对于g或G，宽度用来指定输出的有效数字位数。默认6位有效数字</li></ol></li></ol></li></ol><table><thead><tr><th style="text-align:left">宽度说明</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">%2d</td><td style="text-align:left">输出数据占两位宽度，不足两位右对齐，左边补空格</td></tr><tr><td style="text-align:left">%10.2f</td><td style="text-align:left">输出浮点数总宽度为10，小数点后保留两位</td></tr></tbody></table><ol start="3"><li>输出数据左对齐：在“%”和宽度之间加“-”</li><li>使输出数据总带+/-：在“%”和格式字符间加“+”</li></ol><h3 id="使用printf函数时的注意事项">使用printf函数时的注意事项</h3><ol><li>调用函数printf时，其参数是从右至左进行处理的</li><li>输出数据的域宽可以改变</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*d&quot;</span>,m,i);    <span class="comment">/*将按照m指定的域宽输出i值，并不输出m的值*/</span></span><br></pre></td></tr></table></figure><h2 id="数据输入">数据输入</h2><h3 id="scanf函数的一般调用形式">scanf函数的一般调用形式</h3><ol><li>调用形式：<code>scanf(格式控制，输入项1，输入项二，···)</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%f%lf&quot;</span>,&amp;k,&amp;a,&amp;y);</span><br></pre></td></tr></table></figure><h3 id="scanf函数中常用的格式说明">scanf函数中常用的格式说明</h3><table><thead><tr><th style="text-align:left">格式字符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">c</td><td style="text-align:left">输入一个字符</td></tr><tr><td style="text-align:left">d</td><td style="text-align:left">输入带符号的十进制整型数</td></tr><tr><td style="text-align:left">i</td><td style="text-align:left">输入整型数，整型数可以是带先导0的八进制数，也可以是带先导0x（或0X）的十六进制数</td></tr><tr><td style="text-align:left">o</td><td style="text-align:left">以八进制格式输入整型数，可以带先导0，也可以不带</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">以十六进制格式输入整型数，可以带先导0x或0X，也可以不带</td></tr><tr><td style="text-align:left">u</td><td style="text-align:left">以无符号十进制形式输入整型数</td></tr><tr><td style="text-align:left">f（lf）</td><td style="text-align:left">以带小数点的数学形式或指数形式输入浮点数（单精度数用f，双精度数用lf）</td></tr><tr><td style="text-align:left">e（le）</td><td style="text-align:left">同上</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">输入一个字符串，直到遇到“\0”</td></tr></tbody></table><ol><li>scanf函数右返回值，其值就是本次scanf调用正确输入的数据项个数</li></ol><h3 id="通过scanf函数从键盘输入数据">通过scanf函数从键盘输入数据</h3><ol><li>输入数值数据：在输入整数或实数这类数值型数据后，输入的数据之间必须用空格、回车符、制表符等间隔符隔开</li><li>跳过某个输入数据：在%和字符之间加入“*”</li></ol><h2 id="复合语句和空语句">复合语句和空语句</h2><p><strong>复合语句</strong></p><ol><li>语句形式：<code>&#123;语句1 语句2 语句3 ··· 语句n&#125;</code></li></ol><p><strong>空语句</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">;    <span class="comment">/*空语句*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="程序举例">程序举例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入整数x和y的值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d,y=%d\n&quot;</span>, x, y);</span><br><span class="line">t = x;</span><br><span class="line">x = y;</span><br><span class="line">y = t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d,y=%d&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 输入一个double类型的数，使该数保留小数点后两位，对第三位小数进行四舍五入处理，然后输出此数  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数据：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%f\n&quot;</span>, x);</span><br><span class="line">x = x * <span class="number">100</span>;</span><br><span class="line">x = x + <span class="number">0.5</span>;</span><br><span class="line">x = (<span class="type">int</span>) x;</span><br><span class="line">x = x / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%f&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」C程序设计的初步认识</title>
      <link href="/f2437dccc17c.html"/>
      <url>/f2437dccc17c.html</url>
      
        <content type="html"><![CDATA[<h2 id="简单C语言程序的构成和格式">简单C语言程序的构成和格式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*求矩形面积*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> a, b, area;</span><br><span class="line">a = <span class="number">1.2</span>; <span class="comment">/*将矩形的两条边长分别赋给a和b*/</span></span><br><span class="line">b = <span class="number">3.6</span>;</span><br><span class="line">area = a * b; <span class="comment">/*计算矩形的面积并储存到变量area中*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%f,b=%f,area=%f\n&quot;</span>, a, b, area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>C语言规定必须用main作为主函数名,每一个可执行的C程序都必须有且只有一个主函数</li><li>C程序中的每一条执行语句都必须用分号结束</li><li>注释内容必须放在符号“/*”和“*/”之间，在注释之间不可以再嵌套“/*”和“*/”</li></ol><h2 id="标识符、常量和变量">标识符、常量和变量</h2><p><strong>标识符</strong></p><ol><li>由字母、数字和下划线组成，并且第一个字符必须为字母或下划线</li><li>类别<ol><li>关键字</li><li>预定义标识符</li><li>用户标识符</li></ol></li></ol><p><strong>常量</strong></p><ol><li>程序运行中，其值不能被改变的量</li><li>分类<ol><li>整型常量：只用数字表示，不带小数点<ol><li>短整型常量</li><li>长整型常量</li></ol></li><li>实型常量：必须带小数点的数</li><li>字符常量</li><li>字符串常量</li></ol></li></ol><p><strong>符号常量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*计算圆面积*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159 <span class="comment">/*定义符号名PI为3.14159*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> r, s;</span><br><span class="line">r = <span class="number">5.0</span>;</span><br><span class="line">s = PI * r * r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s=%f\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量</strong></p><ol><li>变量指程序运行过程中其值可以改变的量</li></ol><h2 id="整型数据">整型数据</h2><h3 id="整型常量">整型常量</h3><ol><li>整型常量可以用十进制、八进制和十六进制等形式表示</li><li>八进制数：开头必须是数字“0”</li><li>十六进制数：使用“0x”或“0X”开头；十六进制数中的字母a、b、c、d、e、f既可以小写也可以大写</li><li>在C程序中，只有十进制数可以是负数，而八进制和十六进制数只能是正数</li></ol><h3 id="整型变量">整型变量</h3><ol><li>基本型的整型变量用类型名关键字int进行定义</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>, k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="整型数据的分类">整型数据的分类</h3><ol><li>短整型（short int）</li><li>基本整型（int）</li><li>长整型（long int）</li><li>无符号型（unsigned）：无符号整数在数的末尾加上字母后缀u或U；若是长整型无符号整型常量，加上后缀lu或LU</li></ol><blockquote><p>若不指定变量为无符号型，则变量隐含为有符号型（signed）</p></blockquote><h3 id="整数在内存中的储存形式">整数在内存中的储存形式</h3><ol><li>通常把一个字节的最右边一位称为最低位，最左边一位称为最高位。对于一个有符号整数，其中最高位用来存放整数的符号，称为符号位。若是正整数，最高位放置0；若是负整数，最高位放置1</li><li>负整数在内存中以“补码”形式存放</li></ol><p><strong>例</strong>：取二进制数10000101（十进制数-5）的补码<br>步骤如下：求原码的反码。把原码除符号位之外的二进制码按位取反，得11111010<br>把所得的反码加1，得到原码的补码。得11111011</p><blockquote><p>把内存中以补码形式存放的二进制码转化成十进制的负整数</p><ul><li>先对除符号位之外的各位取反</li><li>将所得二进制数转换成十进制数</li><li>对所求得的数再减1</li></ul></blockquote><h2 id="实型数据">实型数据</h2><h3 id="实型常量">实型常量</h3><ol><li>小数形式：必须要有小数点</li></ol><h3 id="实型变量">实型变量</h3><ol><li>单精度型（float）<ol><li>定义：<code>float a,b,c;</code></li><li>占4字节的存储单元</li></ol></li><li>双精度型（double）<ol><li>定义：<code>double x,y,z;</code></li><li>占8字节的存储单元</li></ol></li></ol><h2 id="算数表达式">算数表达式</h2><h3 id="基本的算数运算符">基本的算数运算符</h3><ol><li>加（+）</li><li>减（-）</li><li>乘（*）</li><li>除（/）</li><li>求余（%）：运算对象只能是整型</li></ol><blockquote><ul><li>这些运算符需要两个运算对象，称为双目运算符</li><li>“+”和“-”也可用作单目运算符，运算符必须出现在运算数的左边</li><li>如果双面运算符两边运算数的类型一致，则所得结果的类型与运算数的类型一致</li><li>如果双目运算符两边运算数的类型不一致，系统将自动进行类型转换，使运算符两边的类型达到一致后再进行运算</li><li>在C语言中，所有实型数的运算均以双精度方式进行</li></ul></blockquote><h3 id="运算符的优先级、结合性和算数表达式">运算符的优先级、结合性和算数表达式</h3><ol><li><p>算数运算符的优先级![[3.png]]</p></li><li><p>算数运算符和圆括号的结合性</p><ol><li>以上运算符中，只有单目运算符“+”和“-”的结合性是从右到左的，其余运算符的结合性都是从左到右</li></ol></li><li><p>算数表达式</p><ol><li>定义：用算术运算符和一对圆括号将运算符（或称操作数）连接起来的、符合C语言语法的表达式</li><li>运算对象可以是常量、变量和函数等</li></ol></li></ol><h3 id="强制类型转换表达式">强制类型转换表达式</h3><ol><li>格式：<code>(类型名)(表达式)</code><ol><li><code>(类型名)</code> 称为强制类型转换运算符</li></ol></li></ol><h2 id="赋值表达式">赋值表达式</h2><h3 id="赋值运算符和赋值表达式">赋值运算符和赋值表达式</h3><ol><li>格式：<code>变量名=表达式</code></li><li>赋值运算符的左侧只能是变量，不能是常量或表达式</li><li>C语言规定最左边变量中所得到的新值就是赋值表达式的值</li></ol><h3 id="复合赋值表达式">复合赋值表达式</h3><ol><li>定义：在赋值运算符之前加上其他运算符</li></ol><h3 id="赋值运算中的类型转换">赋值运算中的类型转换</h3><ol><li>如果赋值运算符两侧的数据类型不一致，在赋值前系统将自动先把右侧表达式求得的数值按赋值号左边变量的类型进行转换</li><li>在C语言的表达式（不包括赋值表达式）中的转换规则<ol><li>一个短整型，一个长整型：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>短整型</mtext><mo>→</mo><mtext>长整型</mtext></mrow><annotation encoding="application/x-tex">短整型 \to 长整型</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">短整型</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">长整型</span></span></span></span></li><li>一个是有符号整型，一个是无符号整型：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>有符号整型</mtext><mo>→</mo><mtext>无符号整型</mtext></mrow><annotation encoding="application/x-tex">有符号整型 \to 无符号整型</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">有符号整型</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">无符号整型</span></span></span></span></li></ol></li></ol><h2 id="自加、自减运算符和逗号">自加、自减运算符和逗号</h2><h3 id="自加运算符和自减运算符">自加运算符和自减运算符</h3><ol><li>“++”和“–”都是单目运算符，不能给常量或表达式赋值</li><li>既可以前缀形式出现，也可以后缀形式出现</li><li>对于变量来说自增或自减1；对于表达式来说，前置先自增后使用变量值，后置先使用变量值再自增</li><li>结合方向：从右至左</li></ol><h3 id="逗号运算符">逗号运算符</h3><ol><li>结合方向：从左至右</li><li>逗号运算符优先级最低</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「第一行代码」第一行Android 代码</title>
      <link href="/4d4ebbc0eb20.html"/>
      <url>/4d4ebbc0eb20.html</url>
      
        <content type="html"><![CDATA[<h2 id="Android简介">Android简介</h2><h3 id="Android系统架构">Android系统架构</h3><ol><li>Linux内核层</li><li>系统运行库层</li><li>应用框架层</li><li>应用层</li></ol><h3 id="Android应用开发特色">Android应用开发特色</h3><ol><li>四大组件<ol><li>Activity：界面</li><li>Service：在后台运行</li><li>BroadcastReceiver：允许你的应用接收或发送来自广播消息</li><li>ContentP rovider：为应用程序之间共享数据提供了可能</li></ol></li><li>系统控件</li><li>SQLite数据库</li><li>多媒体</li></ol><h2 id="创建Android项目">创建Android项目</h2><ol><li>res目录<ol><li>以“drawable”开头的目录存放图片</li><li>以“mipmap”开头的目录放应用图标</li><li>以“values”开头的目录放字符串、样式、颜色等配置</li><li>以“layout”开头的目录放布局文件</li></ol></li><li>资源引用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R.string.app_name <span class="comment">// 代码中</span></span><br><span class="line"><span class="meta">@string</span>/app_name <span class="comment">// xml中</span></span><br></pre></td></tr></table></figure><h2 id="使用Android的日志工具Log">使用Android的日志工具Log</h2><ol><li>Log.v()：用于打印那些最为琐碎的、意义最小的日志信息。对应级别verbose，是 Android 日志里面级别最低的一种</li><li>Log.d()：用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的。对应级别debug，比verbose 高一级</li><li>Log.i()：用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为的数据。对应级别info，比debug 高一级</li><li>Log.w()：用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方。对应级别warn，比info高一级</li><li>Log.e()：用于打印程序中的错误信息，比如程序进入了catch语句中。当有错误信息打印出来的时候，一般代表你的程序出现严重问题了，必须尽快修复。对应级别error，比 warn 高一级</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「C语言程序设计」程序设计的基本概念</title>
      <link href="/be54a660ba8e.html"/>
      <url>/be54a660ba8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="算法的特性">算法的特性</h2><ol><li>有穷性：算法必须在执行有限的步骤后终止，不会无限循环或进入死循环</li><li>确定性：算法的每个步骤必须明确定义，没有歧义。相同输入应产生相同的输出</li><li>可执行性：算法中的每个步骤都必须能够被执行，不会包含无法实现的操作</li><li>有零个或多个输入：算法可以接受零个或多个输入参数，这些参数是问题的输入数据</li><li>有一个或多个输出：算法产生一个或多个输出结果，这是问题的解决方案</li></ol><h2 id="三种基本结构">三种基本结构</h2><blockquote><p>三种基本结构组成的算法可以解决任何复杂的问题</p></blockquote><ol><li>顺序结构：程序中的语句按顺序执行，从上到下，每个语句都执行一次</li><li>选择结构：选择结构允许根据条件的真假来执行不同的代码块。这包括<code>if</code>语句和<code>switch</code>语句等。例如，使用<code>if</code>语句可以根据条件执行不同的代码块，从而实现分支逻辑 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">   <span class="comment">// 代码块1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 代码块2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>循环结构：循环结构允许多次执行相同的代码块，直到满足特定条件为止。这可以通过<code>for</code>、<code>while</code>和<code>do-while</code>等循环语句来实现 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">   <span class="comment">// 循环执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">// 循环执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo相关说明</title>
      <link href="/f2dda33b4059.html"/>
      <url>/f2dda33b4059.html</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>! 这是你的第一篇文章。有关详细信息，请查看<a href="https://hexo.io/docs/">文档</a>. 如果你在使用 Hexo 时遇到任何问题，可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案， 也可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速开始">快速开始</h2><h3 id="创建新文章">创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器">运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件">生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点">部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息：<a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="其他">其他</h2><ol><li>使用PowerShell时，一键生成并发布</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean ; hexo g ; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Alist</title>
      <link href="/4f6306fe4bfe.html"/>
      <url>/4f6306fe4bfe.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s install</span><br></pre></td></tr></table></figure><blockquote><p>默认安装在 <code>/opt/alist</code> 中</p></blockquote><h2 id="更新">更新</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s update</span><br></pre></td></tr></table></figure><h2 id="卸载">卸载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s uninstall</span><br></pre></td></tr></table></figure><h2 id="密码">密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x ./alist</span><br><span class="line"><span class="comment"># 随机生成一个密码</span></span><br><span class="line">./alist admin random</span><br><span class="line"><span class="comment"># 手动设置一个密码,`NEW_PASSWORD`是指你需要设置的密码</span></span><br><span class="line">./alist admin <span class="built_in">set</span> NEW_PASSWORD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 WordPress搭建一个个人博客</title>
      <link href="/b0223cbefc39.html"/>
      <url>/b0223cbefc39.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装LNMP">安装LNMP</h2><ol><li>下载LNMP<br><code>wget http://soft.vpser.net/lnmp/lnmp2.0.tar.gz -cO lnmp2.0.tar.gz</code></li><li>解压并执行<br><code>tar zxf lnmp2.0.tar.gz &amp;&amp; cd lnmp1.5 &amp;&amp; ./install.sh lnmp</code></li><li>之后选择想要安装的版本然后回车开始安装</li><li>时间比较长，耐心等待一下，看到以下显示表示安装成功<img src="/pic/1.png" alt="img"></li><li>配置nigix<ol><li>查看nginx配置文件,在目录 <code>/usr/local/nginx/conf</code> 下，<code>root  /home/wwwroot/default;</code> 表明网站根目录为<code>/home/wwwroot/default</code>，可访问<code>http://ip</code>查看<img src="/pic/2.png" alt="img"></li><li>如果你绑定了域名，可以为网站配置 Cloudflare 免费证书和 SSL<ol><li>在 Cloudflare 的控制面板中，确保 SSL 选项设置为 “Full” 或 “Full (strict)”，生成一个私钥（通常是 .key 格式）和一个证书文件（通常是 .pem 格式）放置到服务器中</li><li>在 “server” 块内部，添加以下 SSL 配置</li></ol> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 SSL</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl_certificate</span> /path/to/your_cloudflare_cert.pem;  <span class="comment"># 指向 Cloudflare 证书文件</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /path/to/your_cloudflare_private.key;  <span class="comment"># 指向Cloudflare 私钥文件</span></span><br></pre></td></tr></table></figure><ol start="3"><li>验证nginx是否有配置错误 <code>nginx -t</code></li><li>重新加载nginx <code>nginx -s reload</code></li></ol></li></ol></li></ol><h2 id="安装WordPress">安装WordPress</h2><ol><li><p>安装 wordpress 安装包并解压到 <code>/home/wwwroot</code><br><code>wget https://cn.wordpress.org/latest-zh_CN.zip &amp;&amp; unzip latest-zh_CN.zip -d /home/wwwroot</code></p></li><li><p>登录MySQL，创建wordpress表，创建完后输入exit退出</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">create database wordpress;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol><li>如果使用远程连接，还需配置防火墙<code>ufw allow 3306</code></li><li>创建允许远程访问用户<code>CREATE USER 'remote_user'@'%' IDENTIFIED BY 'securepassword';</code></li><li>刷新 <code>FLUSH PRIVILEGES;</code></li></ol></li><li><p>使用 vim 修改 nginx 配置文件,将网站根目录为<code>/home/wwwroot/wordpress</code><br><code>vim /usr/local/nginx/conf/nginx.conf</code></p></li><li><p>保存文件</p></li><li><p>修改wordpress目录权限<br><code>cd /home/wwwroot &amp;&amp; chown -R www wordpress/ &amp;&amp; chgrp -R www wordpress/</code></p></li><li><p>访问<a href="http://ip/wp-admin/setup-config.php%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85">http://ip/wp-admin/setup-config.php开始安装</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
